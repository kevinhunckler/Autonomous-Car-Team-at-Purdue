
DELAY_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f6c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  2000000c  00000f78  0002000c  2**2
                  ALLOC
  3 .stack        00002004  20000044  00000fb0  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012c18  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002033  00000000  00000000  00032ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000304e  00000000  00000000  00034cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002f8  00000000  00000000  00037d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003a8  00000000  00000000  0003801e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001cc6b  00000000  00000000  000383c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007970  00000000  00000000  00055031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009e5ac  00000000  00000000  0005c9a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000740  00000000  00000000  000faf50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	48 20 00 20 21 0d 00 00 1d 0d 00 00 1d 0d 00 00     H . !...........
	...
  2c:	1d 0d 00 00 00 00 00 00 00 00 00 00 1d 0d 00 00     ................
  3c:	1d 0d 00 00 1d 0d 00 00 1d 0d 00 00 1d 0d 00 00     ................
  4c:	1d 0d 00 00 1d 0d 00 00 1d 0d 00 00 1d 0d 00 00     ................
  5c:	1d 0d 00 00 1d 0d 00 00 1d 0d 00 00 1d 0d 00 00     ................
  6c:	1d 0d 00 00 1d 0d 00 00 1d 0d 00 00 1d 0d 00 00     ................
  7c:	1d 0d 00 00 1d 0d 00 00 1d 0d 00 00 1d 0d 00 00     ................
  8c:	1d 0d 00 00 1d 0d 00 00 1d 0d 00 00 1d 0d 00 00     ................
  9c:	1d 0d 00 00 1d 0d 00 00 1d 0d 00 00 1d 0d 00 00     ................
  ac:	1d 0d 00 00 1d 0d 00 00 1d 0d 00 00 1d 0d 00 00     ................

000000bc <__do_global_dtors_aux>:
  bc:	b510      	push	{r4, lr}
  be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
  c0:	7823      	ldrb	r3, [r4, #0]
  c2:	2b00      	cmp	r3, #0
  c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
  c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
  c8:	2b00      	cmp	r3, #0
  ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
  cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
  ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
  d0:	bf00      	nop
  d2:	2301      	movs	r3, #1
  d4:	7023      	strb	r3, [r4, #0]
  d6:	bd10      	pop	{r4, pc}
  d8:	2000000c 	.word	0x2000000c
  dc:	00000000 	.word	0x00000000
  e0:	00000f6c 	.word	0x00000f6c

000000e4 <frame_dummy>:
  e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
  e6:	b510      	push	{r4, lr}
  e8:	2b00      	cmp	r3, #0
  ea:	d003      	beq.n	f4 <frame_dummy+0x10>
  ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
  ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
  f0:	e000      	b.n	f4 <frame_dummy+0x10>
  f2:	bf00      	nop
  f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
  f6:	6803      	ldr	r3, [r0, #0]
  f8:	2b00      	cmp	r3, #0
  fa:	d100      	bne.n	fe <frame_dummy+0x1a>
  fc:	bd10      	pop	{r4, pc}
  fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
 100:	2b00      	cmp	r3, #0
 102:	d0fb      	beq.n	fc <frame_dummy+0x18>
 104:	4798      	blx	r3
 106:	e7f9      	b.n	fc <frame_dummy+0x18>
 108:	00000000 	.word	0x00000000
 10c:	20000010 	.word	0x20000010
 110:	00000f6c 	.word	0x00000f6c
 114:	00000f6c 	.word	0x00000f6c
 118:	00000000 	.word	0x00000000

0000011c <_tcc_get_inst_index>:
	for(ch = 0; ch < TCC_NUM_CHANNELS; ch ++) {
		if (events->generate_event_on_channel[ch]) {
			evctrl |= (TCC_EVCTRL_MCEO(1) << ch);
		}
		if (events->on_event_perform_channel_action[ch]) {
			evctrl |= (TCC_EVCTRL_MCEI(1) << ch);
 11c:	4b09      	ldr	r3, [pc, #36]	; (144 <_tcc_get_inst_index+0x28>)
 11e:	4298      	cmp	r0, r3
		}
	}
	if (events->generate_event_on_counter_overflow) {
 120:	d00c      	beq.n	13c <_tcc_get_inst_index+0x20>
 122:	4b09      	ldr	r3, [pc, #36]	; (148 <_tcc_get_inst_index+0x2c>)
 124:	4298      	cmp	r0, r3
		evctrl |= TCC_EVCTRL_OVFEO;
 126:	d007      	beq.n	138 <_tcc_get_inst_index+0x1c>
 128:	4a08      	ldr	r2, [pc, #32]	; (14c <_tcc_get_inst_index+0x30>)
 12a:	2300      	movs	r3, #0
	}
	if (events->generate_event_on_counter_retrigger) {
 12c:	4290      	cmp	r0, r2
 12e:	d001      	beq.n	134 <_tcc_get_inst_index+0x18>
 130:	0018      	movs	r0, r3
		evctrl |= TCC_EVCTRL_TRGEO;
 132:	4770      	bx	lr
 134:	3302      	adds	r3, #2
 136:	e002      	b.n	13e <_tcc_get_inst_index+0x22>
	}
	if (events->generate_event_on_counter_event) {
 138:	2301      	movs	r3, #1
 13a:	e000      	b.n	13e <_tcc_get_inst_index+0x22>
 13c:	2300      	movs	r3, #0
		evctrl |= TCC_EVCTRL_CNTEO;
 13e:	b2db      	uxtb	r3, r3
 140:	e7f6      	b.n	130 <_tcc_get_inst_index+0x14>
 142:	46c0      	nop			; (mov r8, r8)
	}

	tcc_module->EVCTRL.reg = evctrl;
 144:	42002400 	.word	0x42002400

	return STATUS_OK;
 148:	42002800 	.word	0x42002800
			return STATUS_ERR_INVALID_ARG;
 14c:	42002c00 	.word	0x42002c00

00000150 <_tcc_set_compare_value>:
			return STATUS_ERR_INVALID_ARG;
 150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 152:	000f      	movs	r7, r1
 154:	0014      	movs	r4, r2
 156:	001d      	movs	r5, r3
 158:	6806      	ldr	r6, [r0, #0]
 15a:	0030      	movs	r0, r6
 15c:	4b10      	ldr	r3, [pc, #64]	; (1a0 <_tcc_set_compare_value+0x50>)
 15e:	4798      	blx	r3
 160:	4b10      	ldr	r3, [pc, #64]	; (1a4 <_tcc_set_compare_value+0x54>)
 162:	5c1a      	ldrb	r2, [r3, r0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
 164:	2317      	movs	r3, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
 166:	42ba      	cmp	r2, r7
 168:	d801      	bhi.n	16e <_tcc_set_compare_value+0x1e>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
 16a:	0018      	movs	r0, r3
 16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t max_count = _tcc_maxs[module_index];
 16e:	0080      	lsls	r0, r0, #2
	if (compare > max_count) {
 170:	4b0d      	ldr	r3, [pc, #52]	; (1a8 <_tcc_set_compare_value+0x58>)
 172:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
 174:	2317      	movs	r3, #23
	if (compare > max_count) {
 176:	42a2      	cmp	r2, r4
 178:	d3f7      	bcc.n	16a <_tcc_set_compare_value+0x1a>
	if (double_buffering_enabled) {
 17a:	2d00      	cmp	r5, #0
 17c:	d10b      	bne.n	196 <_tcc_set_compare_value+0x46>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
 17e:	2280      	movs	r2, #128	; 0x80
 180:	0052      	lsls	r2, r2, #1
 182:	40ba      	lsls	r2, r7
 184:	68b3      	ldr	r3, [r6, #8]
 186:	421a      	tst	r2, r3
 188:	d1fc      	bne.n	184 <_tcc_set_compare_value+0x34>
		tcc_module->CC[channel_index].reg = compare;
 18a:	3710      	adds	r7, #16
 18c:	00bf      	lsls	r7, r7, #2
 18e:	19f6      	adds	r6, r6, r7
 190:	6074      	str	r4, [r6, #4]
	return STATUS_OK;
 192:	2300      	movs	r3, #0
 194:	e7e9      	b.n	16a <_tcc_set_compare_value+0x1a>
		tcc_module->CCBUF[channel_index].reg = compare;
 196:	371c      	adds	r7, #28
 198:	00bf      	lsls	r7, r7, #2
 19a:	51bc      	str	r4, [r7, r6]
	return STATUS_OK;
 19c:	2300      	movs	r3, #0
 19e:	e7e4      	b.n	16a <_tcc_set_compare_value+0x1a>
 1a0:	0000011d 	.word	0x0000011d
 1a4:	00000f14 	.word	0x00000f14
 1a8:	00000f1c 	.word	0x00000f1c

000001ac <tcc_get_config_defaults>:
{
 1ac:	b510      	push	{r4, lr}
 1ae:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
 1b0:	0008      	movs	r0, r1
 1b2:	4b4f      	ldr	r3, [pc, #316]	; (2f0 <tcc_get_config_defaults+0x144>)
 1b4:	4798      	blx	r3
	config->counter.count                  = 0;
 1b6:	2300      	movs	r3, #0
 1b8:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
 1ba:	0080      	lsls	r0, r0, #2
 1bc:	4a4d      	ldr	r2, [pc, #308]	; (2f4 <tcc_get_config_defaults+0x148>)
 1be:	5882      	ldr	r2, [r0, r2]
 1c0:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
 1c2:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
 1c4:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
 1c6:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
 1c8:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
 1ca:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
 1cc:	61e3      	str	r3, [r4, #28]
 1ce:	6223      	str	r3, [r4, #32]
 1d0:	6263      	str	r3, [r4, #36]	; 0x24
 1d2:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
 1d4:	7523      	strb	r3, [r4, #20]
 1d6:	7563      	strb	r3, [r4, #21]
 1d8:	75a3      	strb	r3, [r4, #22]
 1da:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
 1dc:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
 1de:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
 1e0:	7423      	strb	r3, [r4, #16]
 1e2:	7463      	strb	r3, [r4, #17]
 1e4:	74a3      	strb	r3, [r4, #18]
 1e6:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
 1e8:	222c      	movs	r2, #44	; 0x2c
 1ea:	54a3      	strb	r3, [r4, r2]
 1ec:	3201      	adds	r2, #1
 1ee:	54a3      	strb	r3, [r4, r2]
 1f0:	3201      	adds	r2, #1
 1f2:	54a3      	strb	r3, [r4, r2]
 1f4:	3201      	adds	r2, #1
 1f6:	54a3      	strb	r3, [r4, r2]
 1f8:	3201      	adds	r2, #1
 1fa:	54a3      	strb	r3, [r4, r2]
 1fc:	3201      	adds	r2, #1
 1fe:	54a3      	strb	r3, [r4, r2]
 200:	3201      	adds	r2, #1
 202:	54a3      	strb	r3, [r4, r2]
 204:	3201      	adds	r2, #1
 206:	54a3      	strb	r3, [r4, r2]
 208:	3201      	adds	r2, #1
 20a:	54a3      	strb	r3, [r4, r2]
 20c:	3201      	adds	r2, #1
 20e:	54a3      	strb	r3, [r4, r2]
 210:	3201      	adds	r2, #1
 212:	54a3      	strb	r3, [r4, r2]
 214:	3201      	adds	r2, #1
 216:	54a3      	strb	r3, [r4, r2]
 218:	3201      	adds	r2, #1
 21a:	54a3      	strb	r3, [r4, r2]
 21c:	3201      	adds	r2, #1
 21e:	54a3      	strb	r3, [r4, r2]
 220:	3201      	adds	r2, #1
 222:	54a3      	strb	r3, [r4, r2]
 224:	3201      	adds	r2, #1
 226:	54a3      	strb	r3, [r4, r2]
 228:	3201      	adds	r2, #1
 22a:	54a3      	strb	r3, [r4, r2]
 22c:	3201      	adds	r2, #1
 22e:	54a3      	strb	r3, [r4, r2]
 230:	3201      	adds	r2, #1
 232:	54a3      	strb	r3, [r4, r2]
 234:	3201      	adds	r2, #1
 236:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
 238:	3201      	adds	r2, #1
 23a:	54a3      	strb	r3, [r4, r2]
 23c:	3201      	adds	r2, #1
 23e:	54a3      	strb	r3, [r4, r2]
 240:	3201      	adds	r2, #1
 242:	54a3      	strb	r3, [r4, r2]
 244:	3201      	adds	r2, #1
 246:	54a3      	strb	r3, [r4, r2]
 248:	3201      	adds	r2, #1
 24a:	54a3      	strb	r3, [r4, r2]
 24c:	3201      	adds	r2, #1
 24e:	54a3      	strb	r3, [r4, r2]
 250:	3201      	adds	r2, #1
 252:	54a3      	strb	r3, [r4, r2]
 254:	3201      	adds	r2, #1
 256:	54a3      	strb	r3, [r4, r2]
 258:	3201      	adds	r2, #1
 25a:	54a3      	strb	r3, [r4, r2]
 25c:	3201      	adds	r2, #1
 25e:	54a3      	strb	r3, [r4, r2]
 260:	3201      	adds	r2, #1
 262:	54a3      	strb	r3, [r4, r2]
 264:	3201      	adds	r2, #1
 266:	54a3      	strb	r3, [r4, r2]
 268:	3201      	adds	r2, #1
 26a:	54a3      	strb	r3, [r4, r2]
 26c:	3201      	adds	r2, #1
 26e:	54a3      	strb	r3, [r4, r2]
 270:	3201      	adds	r2, #1
 272:	54a3      	strb	r3, [r4, r2]
 274:	3201      	adds	r2, #1
 276:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
 278:	3201      	adds	r2, #1
 27a:	54a3      	strb	r3, [r4, r2]
 27c:	3201      	adds	r2, #1
 27e:	54a3      	strb	r3, [r4, r2]
 280:	3201      	adds	r2, #1
 282:	54a3      	strb	r3, [r4, r2]
 284:	3201      	adds	r2, #1
 286:	54a3      	strb	r3, [r4, r2]
 288:	3201      	adds	r2, #1
 28a:	54a3      	strb	r3, [r4, r2]
 28c:	3201      	adds	r2, #1
 28e:	54a3      	strb	r3, [r4, r2]
 290:	3201      	adds	r2, #1
 292:	54a3      	strb	r3, [r4, r2]
 294:	3201      	adds	r2, #1
 296:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
 298:	3241      	adds	r2, #65	; 0x41
 29a:	54a3      	strb	r3, [r4, r2]
 29c:	65a3      	str	r3, [r4, #88]	; 0x58
 29e:	67a3      	str	r3, [r4, #120]	; 0x78
 2a0:	3201      	adds	r2, #1
 2a2:	54a3      	strb	r3, [r4, r2]
 2a4:	65e3      	str	r3, [r4, #92]	; 0x5c
 2a6:	67e3      	str	r3, [r4, #124]	; 0x7c
 2a8:	3201      	adds	r2, #1
 2aa:	54a3      	strb	r3, [r4, r2]
 2ac:	6623      	str	r3, [r4, #96]	; 0x60
 2ae:	3a1a      	subs	r2, #26
 2b0:	50a3      	str	r3, [r4, r2]
 2b2:	321b      	adds	r2, #27
 2b4:	54a3      	strb	r3, [r4, r2]
 2b6:	6663      	str	r3, [r4, #100]	; 0x64
 2b8:	3a17      	subs	r2, #23
 2ba:	50a3      	str	r3, [r4, r2]
 2bc:	3218      	adds	r2, #24
 2be:	54a3      	strb	r3, [r4, r2]
 2c0:	66a3      	str	r3, [r4, #104]	; 0x68
 2c2:	3a14      	subs	r2, #20
 2c4:	50a3      	str	r3, [r4, r2]
 2c6:	3215      	adds	r2, #21
 2c8:	54a3      	strb	r3, [r4, r2]
 2ca:	66e3      	str	r3, [r4, #108]	; 0x6c
 2cc:	3a11      	subs	r2, #17
 2ce:	50a3      	str	r3, [r4, r2]
 2d0:	3212      	adds	r2, #18
 2d2:	54a3      	strb	r3, [r4, r2]
 2d4:	6723      	str	r3, [r4, #112]	; 0x70
 2d6:	3a0e      	subs	r2, #14
 2d8:	50a3      	str	r3, [r4, r2]
 2da:	320f      	adds	r2, #15
 2dc:	54a3      	strb	r3, [r4, r2]
 2de:	6763      	str	r3, [r4, #116]	; 0x74
 2e0:	3a0b      	subs	r2, #11
 2e2:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
 2e4:	2101      	movs	r1, #1
 2e6:	320c      	adds	r2, #12
 2e8:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
 2ea:	3201      	adds	r2, #1
 2ec:	54a3      	strb	r3, [r4, r2]
}
 2ee:	bd10      	pop	{r4, pc}
 2f0:	0000011d 	.word	0x0000011d
 2f4:	00000f1c 	.word	0x00000f1c

000002f8 <tcc_init>:
{
 2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 2fa:	46de      	mov	lr, fp
 2fc:	4657      	mov	r7, sl
 2fe:	464e      	mov	r6, r9
 300:	4645      	mov	r5, r8
 302:	b5e0      	push	{r5, r6, r7, lr}
 304:	b091      	sub	sp, #68	; 0x44
 306:	9001      	str	r0, [sp, #4]
 308:	000c      	movs	r4, r1
 30a:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
 30c:	0008      	movs	r0, r1
 30e:	4bc9      	ldr	r3, [pc, #804]	; (634 <tcc_init+0x33c>)
 310:	4798      	blx	r3
 312:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
 314:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
 316:	48c8      	ldr	r0, [pc, #800]	; (638 <tcc_init+0x340>)
 318:	69c2      	ldr	r2, [r0, #28]
 31a:	009e      	lsls	r6, r3, #2
 31c:	4fc7      	ldr	r7, [pc, #796]	; (63c <tcc_init+0x344>)
 31e:	59f7      	ldr	r7, [r6, r7]
 320:	433a      	orrs	r2, r7
 322:	61c2      	str	r2, [r0, #28]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
 324:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
 326:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
 328:	0792      	lsls	r2, r2, #30
 32a:	d506      	bpl.n	33a <tcc_init+0x42>
}
 32c:	b011      	add	sp, #68	; 0x44
 32e:	bc3c      	pop	{r2, r3, r4, r5}
 330:	4690      	mov	r8, r2
 332:	4699      	mov	r9, r3
 334:	46a2      	mov	sl, r4
 336:	46ab      	mov	fp, r5
 338:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
 33a:	6822      	ldr	r2, [r4, #0]
 33c:	2701      	movs	r7, #1
 33e:	4017      	ands	r7, r2
 340:	d1f4      	bne.n	32c <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
 342:	48bf      	ldr	r0, [pc, #764]	; (640 <tcc_init+0x348>)
 344:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
 346:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
 348:	682e      	ldr	r6, [r5, #0]
 34a:	42b2      	cmp	r2, r6
 34c:	d3ee      	bcc.n	32c <tcc_init+0x34>
		|| (config->counter.period > count_max)
 34e:	686e      	ldr	r6, [r5, #4]
 350:	42b2      	cmp	r2, r6
 352:	d3eb      	bcc.n	32c <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
 354:	69e8      	ldr	r0, [r5, #28]
 356:	4282      	cmp	r2, r0
 358:	d200      	bcs.n	35c <tcc_init+0x64>
 35a:	e165      	b.n	628 <tcc_init+0x330>
 35c:	6a28      	ldr	r0, [r5, #32]
 35e:	4282      	cmp	r2, r0
 360:	d200      	bcs.n	364 <tcc_init+0x6c>
 362:	e163      	b.n	62c <tcc_init+0x334>
 364:	6a68      	ldr	r0, [r5, #36]	; 0x24
 366:	4282      	cmp	r2, r0
 368:	d200      	bcs.n	36c <tcc_init+0x74>
 36a:	e161      	b.n	630 <tcc_init+0x338>
 36c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 36e:	4282      	cmp	r2, r0
 370:	d200      	bcs.n	374 <tcc_init+0x7c>
 372:	e16d      	b.n	650 <tcc_init+0x358>
 374:	2298      	movs	r2, #152	; 0x98
 376:	4694      	mov	ip, r2
 378:	44ac      	add	ip, r5
 37a:	4662      	mov	r2, ip
 37c:	9208      	str	r2, [sp, #32]
 37e:	2000      	movs	r0, #0
 380:	e003      	b.n	38a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
 382:	3001      	adds	r0, #1
 384:	3201      	adds	r2, #1
 386:	2808      	cmp	r0, #8
 388:	d008      	beq.n	39c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
 38a:	7816      	ldrb	r6, [r2, #0]
 38c:	2e00      	cmp	r6, #0
 38e:	d0f8      	beq.n	382 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
 390:	4eac      	ldr	r6, [pc, #688]	; (644 <tcc_init+0x34c>)
 392:	5c76      	ldrb	r6, [r6, r1]
 394:	4286      	cmp	r6, r0
 396:	dcf4      	bgt.n	382 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
 398:	2017      	movs	r0, #23
 39a:	e7c7      	b.n	32c <tcc_init+0x34>
 39c:	2200      	movs	r2, #0
 39e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
 3a0:	2080      	movs	r0, #128	; 0x80
 3a2:	0440      	lsls	r0, r0, #17
 3a4:	4684      	mov	ip, r0
 3a6:	e002      	b.n	3ae <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
 3a8:	3201      	adds	r2, #1
 3aa:	2a04      	cmp	r2, #4
 3ac:	d00e      	beq.n	3cc <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
 3ae:	18a8      	adds	r0, r5, r2
 3b0:	7c00      	ldrb	r0, [r0, #16]
 3b2:	2801      	cmp	r0, #1
 3b4:	d1f8      	bne.n	3a8 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
 3b6:	48a4      	ldr	r0, [pc, #656]	; (648 <tcc_init+0x350>)
 3b8:	5c40      	ldrb	r0, [r0, r1]
 3ba:	4290      	cmp	r0, r2
 3bc:	da00      	bge.n	3c0 <tcc_init+0xc8>
 3be:	e149      	b.n	654 <tcc_init+0x35c>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
 3c0:	4660      	mov	r0, ip
 3c2:	4090      	lsls	r0, r2
 3c4:	9e02      	ldr	r6, [sp, #8]
 3c6:	4306      	orrs	r6, r0
 3c8:	9602      	str	r6, [sp, #8]
 3ca:	e7ed      	b.n	3a8 <tcc_init+0xb0>
	if (config->run_in_standby) {
 3cc:	329d      	adds	r2, #157	; 0x9d
 3ce:	5caa      	ldrb	r2, [r5, r2]
 3d0:	2a00      	cmp	r2, #0
 3d2:	d004      	beq.n	3de <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
 3d4:	2280      	movs	r2, #128	; 0x80
 3d6:	0112      	lsls	r2, r2, #4
 3d8:	9902      	ldr	r1, [sp, #8]
 3da:	4311      	orrs	r1, r2
 3dc:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
 3de:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
 3e0:	1e51      	subs	r1, r2, #1
 3e2:	418a      	sbcs	r2, r1
 3e4:	0092      	lsls	r2, r2, #2
 3e6:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
 3e8:	7a6a      	ldrb	r2, [r5, #9]
 3ea:	2a01      	cmp	r2, #1
 3ec:	d022      	beq.n	434 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
 3ee:	4a96      	ldr	r2, [pc, #600]	; (648 <tcc_init+0x350>)
 3f0:	5cd2      	ldrb	r2, [r2, r3]
 3f2:	0011      	movs	r1, r2
 3f4:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
 3f6:	2235      	movs	r2, #53	; 0x35
 3f8:	5caa      	ldrb	r2, [r5, r2]
 3fa:	4291      	cmp	r1, r2
 3fc:	d800      	bhi.n	400 <tcc_init+0x108>
 3fe:	e133      	b.n	668 <tcc_init+0x370>
		if (cfg->filter_value > 0xF) {
 400:	212c      	movs	r1, #44	; 0x2c
 402:	5c69      	ldrb	r1, [r5, r1]
 404:	290f      	cmp	r1, #15
 406:	d900      	bls.n	40a <tcc_init+0x112>
 408:	e12e      	b.n	668 <tcc_init+0x370>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
 40a:	7b28      	ldrb	r0, [r5, #12]
 40c:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
 40e:	7ae8      	ldrb	r0, [r5, #11]
 410:	900b      	str	r0, [sp, #44]	; 0x2c
 412:	202d      	movs	r0, #45	; 0x2d
 414:	4682      	mov	sl, r0
 416:	44aa      	add	sl, r5
 418:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
 41a:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
 41c:	ae0e      	add	r6, sp, #56	; 0x38
 41e:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
 420:	26c0      	movs	r6, #192	; 0xc0
 422:	0136      	lsls	r6, r6, #4
 424:	46b1      	mov	r9, r6
 426:	4684      	mov	ip, r0
 428:	46a0      	mov	r8, r4
 42a:	0028      	movs	r0, r5
 42c:	4655      	mov	r5, sl
 42e:	9309      	str	r3, [sp, #36]	; 0x24
 430:	4682      	mov	sl, r0
 432:	e035      	b.n	4a0 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
 434:	9906      	ldr	r1, [sp, #24]
 436:	4311      	orrs	r1, r2
 438:	9106      	str	r1, [sp, #24]
 43a:	e7d8      	b.n	3ee <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
 43c:	0292      	lsls	r2, r2, #10
 43e:	464f      	mov	r7, r9
 440:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
 442:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
 444:	7919      	ldrb	r1, [r3, #4]
 446:	468b      	mov	fp, r1
 448:	2103      	movs	r1, #3
 44a:	465f      	mov	r7, fp
 44c:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
 44e:	430a      	orrs	r2, r1
 450:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
 452:	795a      	ldrb	r2, [r3, #5]
 454:	0152      	lsls	r2, r2, #5
 456:	2160      	movs	r1, #96	; 0x60
 458:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
 45a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
 45c:	7999      	ldrb	r1, [r3, #6]
 45e:	0209      	lsls	r1, r1, #8
 460:	26c0      	movs	r6, #192	; 0xc0
 462:	00b6      	lsls	r6, r6, #2
 464:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
 466:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
 468:	79da      	ldrb	r2, [r3, #7]
 46a:	0312      	lsls	r2, r2, #12
 46c:	21e0      	movs	r1, #224	; 0xe0
 46e:	01c9      	lsls	r1, r1, #7
 470:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
 472:	4316      	orrs	r6, r2
 474:	4334      	orrs	r4, r6
 476:	9a03      	ldr	r2, [sp, #12]
 478:	4314      	orrs	r4, r2
 47a:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
 47c:	4662      	mov	r2, ip
 47e:	9907      	ldr	r1, [sp, #28]
 480:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
 482:	2a04      	cmp	r2, #4
 484:	d02a      	beq.n	4dc <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
 486:	7c9a      	ldrb	r2, [r3, #18]
 488:	9905      	ldr	r1, [sp, #20]
 48a:	4291      	cmp	r1, r2
 48c:	d800      	bhi.n	490 <tcc_init+0x198>
 48e:	e0eb      	b.n	668 <tcc_init+0x370>
		if (cfg->filter_value > 0xF) {
 490:	7a59      	ldrb	r1, [r3, #9]
 492:	350a      	adds	r5, #10
 494:	2304      	movs	r3, #4
 496:	469b      	mov	fp, r3
 498:	44dc      	add	ip, fp
 49a:	290f      	cmp	r1, #15
 49c:	d900      	bls.n	4a0 <tcc_init+0x1a8>
 49e:	e0e3      	b.n	668 <tcc_init+0x370>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
 4a0:	0609      	lsls	r1, r1, #24
 4a2:	23f0      	movs	r3, #240	; 0xf0
 4a4:	051b      	lsls	r3, r3, #20
 4a6:	4019      	ands	r1, r3
 4a8:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
 4aa:	782e      	ldrb	r6, [r5, #0]
 4ac:	0436      	lsls	r6, r6, #16
 4ae:	20ff      	movs	r0, #255	; 0xff
 4b0:	0400      	lsls	r0, r0, #16
 4b2:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
 4b4:	7868      	ldrb	r0, [r5, #1]
 4b6:	2480      	movs	r4, #128	; 0x80
 4b8:	2800      	cmp	r0, #0
 4ba:	d100      	bne.n	4be <tcc_init+0x1c6>
 4bc:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
 4be:	7898      	ldrb	r0, [r3, #2]
 4c0:	2708      	movs	r7, #8
 4c2:	9703      	str	r7, [sp, #12]
 4c4:	2800      	cmp	r0, #0
 4c6:	d101      	bne.n	4cc <tcc_init+0x1d4>
 4c8:	9804      	ldr	r0, [sp, #16]
 4ca:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
 4cc:	78d8      	ldrb	r0, [r3, #3]
 4ce:	4683      	mov	fp, r0
 4d0:	2010      	movs	r0, #16
 4d2:	465f      	mov	r7, fp
 4d4:	2f00      	cmp	r7, #0
 4d6:	d1b1      	bne.n	43c <tcc_init+0x144>
 4d8:	9804      	ldr	r0, [sp, #16]
 4da:	e7af      	b.n	43c <tcc_init+0x144>
 4dc:	4644      	mov	r4, r8
 4de:	4655      	mov	r5, sl
 4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
 4e2:	4a58      	ldr	r2, [pc, #352]	; (644 <tcc_init+0x34c>)
 4e4:	5cd2      	ldrb	r2, [r2, r3]
 4e6:	4691      	mov	r9, r2
 4e8:	4651      	mov	r1, sl
 4ea:	3150      	adds	r1, #80	; 0x50
 4ec:	4650      	mov	r0, sl
 4ee:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
 4f0:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
 4f2:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
 4f4:	2601      	movs	r6, #1
 4f6:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
 4f8:	2602      	movs	r6, #2
 4fa:	36ff      	adds	r6, #255	; 0xff
 4fc:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
 4fe:	2680      	movs	r6, #128	; 0x80
 500:	0276      	lsls	r6, r6, #9
 502:	46b0      	mov	r8, r6
 504:	46a4      	mov	ip, r4
 506:	001c      	movs	r4, r3
 508:	464b      	mov	r3, r9
 50a:	e00f      	b.n	52c <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
 50c:	7806      	ldrb	r6, [r0, #0]
 50e:	2e00      	cmp	r6, #0
 510:	d007      	beq.n	522 <tcc_init+0x22a>
			if (i >= ow_num) {
 512:	4293      	cmp	r3, r2
 514:	d800      	bhi.n	518 <tcc_init+0x220>
 516:	e0a1      	b.n	65c <tcc_init+0x364>
			if (config->wave_ext.non_recoverable_fault[i].output ==
 518:	2e02      	cmp	r6, #2
 51a:	d014      	beq.n	546 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
 51c:	4656      	mov	r6, sl
 51e:	4096      	lsls	r6, r2
 520:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
 522:	3201      	adds	r2, #1
 524:	3101      	adds	r1, #1
 526:	3002      	adds	r0, #2
 528:	2a08      	cmp	r2, #8
 52a:	d010      	beq.n	54e <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
 52c:	780e      	ldrb	r6, [r1, #0]
 52e:	2e00      	cmp	r6, #0
 530:	d0ec      	beq.n	50c <tcc_init+0x214>
			if (i >= ow_num) {
 532:	4293      	cmp	r3, r2
 534:	d800      	bhi.n	538 <tcc_init+0x240>
 536:	e08f      	b.n	658 <tcc_init+0x360>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
 538:	4646      	mov	r6, r8
 53a:	4096      	lsls	r6, r2
 53c:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
 53e:	7806      	ldrb	r6, [r0, #0]
 540:	2e00      	cmp	r6, #0
 542:	d1e9      	bne.n	518 <tcc_init+0x220>
 544:	e7ed      	b.n	522 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
 546:	465e      	mov	r6, fp
 548:	4096      	lsls	r6, r2
 54a:	4337      	orrs	r7, r6
 54c:	e7e9      	b.n	522 <tcc_init+0x22a>
 54e:	4699      	mov	r9, r3
 550:	0023      	movs	r3, r4
 552:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
 554:	7e6a      	ldrb	r2, [r5, #25]
 556:	0112      	lsls	r2, r2, #4
 558:	2130      	movs	r1, #48	; 0x30
 55a:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
 55c:	7e28      	ldrb	r0, [r5, #24]
 55e:	2207      	movs	r2, #7
 560:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
 562:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
 564:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
 566:	2080      	movs	r0, #128	; 0x80
 568:	0240      	lsls	r0, r0, #9
 56a:	000e      	movs	r6, r1
 56c:	e002      	b.n	574 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
 56e:	3201      	adds	r2, #1
 570:	2a04      	cmp	r2, #4
 572:	d07b      	beq.n	66c <tcc_init+0x374>
		if (wav_cfg->wave_polarity[n]) {
 574:	18a9      	adds	r1, r5, r2
 576:	7d09      	ldrb	r1, [r1, #20]
 578:	2900      	cmp	r1, #0
 57a:	d0f8      	beq.n	56e <tcc_init+0x276>
			if (n >= cc_num) {
 57c:	9905      	ldr	r1, [sp, #20]
 57e:	4291      	cmp	r1, r2
 580:	dd6e      	ble.n	660 <tcc_init+0x368>
			wave |= (TCC_WAVE_POL0 << n);
 582:	0001      	movs	r1, r0
 584:	4091      	lsls	r1, r2
 586:	430e      	orrs	r6, r1
 588:	e7f1      	b.n	56e <tcc_init+0x276>
 58a:	3401      	adds	r4, #1
 58c:	3504      	adds	r5, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
 58e:	42b4      	cmp	r4, r6
 590:	d014      	beq.n	5bc <tcc_init+0x2c4>
		if (!config->pins.enable_wave_out_pin[i]) {
 592:	7823      	ldrb	r3, [r4, #0]
 594:	2b00      	cmp	r3, #0
 596:	d0f8      	beq.n	58a <tcc_init+0x292>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
 598:	ab0c      	add	r3, sp, #48	; 0x30
 59a:	464a      	mov	r2, r9
 59c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
 59e:	2300      	movs	r3, #0
 5a0:	aa0c      	add	r2, sp, #48	; 0x30
 5a2:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
 5a4:	0013      	movs	r3, r2
 5a6:	2220      	movs	r2, #32
 5a8:	18aa      	adds	r2, r5, r2
 5aa:	7812      	ldrb	r2, [r2, #0]
 5ac:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
 5ae:	464a      	mov	r2, r9
 5b0:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
 5b2:	7828      	ldrb	r0, [r5, #0]
 5b4:	0019      	movs	r1, r3
 5b6:	4b25      	ldr	r3, [pc, #148]	; (64c <tcc_init+0x354>)
 5b8:	4798      	blx	r3
 5ba:	e7e6      	b.n	58a <tcc_init+0x292>
 5bc:	4644      	mov	r4, r8
 5be:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
 5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 5c2:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
 5c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 5c6:	0212      	lsls	r2, r2, #8
 5c8:	4313      	orrs	r3, r2
 5ca:	9a02      	ldr	r2, [sp, #8]
 5cc:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
 5ce:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
 5d0:	2204      	movs	r2, #4
 5d2:	68a3      	ldr	r3, [r4, #8]
 5d4:	421a      	tst	r2, r3
 5d6:	d1fc      	bne.n	5d2 <tcc_init+0x2da>
	hw->CTRLBCLR.reg = 0xFF;
 5d8:	23ff      	movs	r3, #255	; 0xff
 5da:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
 5dc:	2204      	movs	r2, #4
 5de:	68a3      	ldr	r3, [r4, #8]
 5e0:	421a      	tst	r2, r3
 5e2:	d1fc      	bne.n	5de <tcc_init+0x2e6>
	hw->CTRLBSET.reg = ctrlb;
 5e4:	466b      	mov	r3, sp
 5e6:	7e1b      	ldrb	r3, [r3, #24]
 5e8:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
 5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 5ec:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
 5ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 5f0:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
 5f2:	61a7      	str	r7, [r4, #24]
	hw->WAVE.reg = waves[0];
 5f4:	4653      	mov	r3, sl
 5f6:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
 5f8:	2210      	movs	r2, #16
 5fa:	68a3      	ldr	r3, [r4, #8]
 5fc:	421a      	tst	r2, r3
 5fe:	d1fc      	bne.n	5fa <tcc_init+0x302>
	hw->COUNT.reg = config->counter.count;
 600:	682b      	ldr	r3, [r5, #0]
 602:	6363      	str	r3, [r4, #52]	; 0x34
	hw->PER.reg = (config->counter.period);
 604:	686b      	ldr	r3, [r5, #4]
 606:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
 608:	9905      	ldr	r1, [sp, #20]
 60a:	2900      	cmp	r1, #0
 60c:	dd2a      	ble.n	664 <tcc_init+0x36c>
 60e:	351c      	adds	r5, #28
 610:	2200      	movs	r2, #0
		hw->CC[i].reg = (config->compare.match[i]);
 612:	cd01      	ldmia	r5!, {r0}
 614:	0013      	movs	r3, r2
 616:	3310      	adds	r3, #16
 618:	009b      	lsls	r3, r3, #2
 61a:	18e3      	adds	r3, r4, r3
 61c:	6058      	str	r0, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
 61e:	3201      	adds	r2, #1
 620:	428a      	cmp	r2, r1
 622:	dbf6      	blt.n	612 <tcc_init+0x31a>
	return STATUS_OK;
 624:	2000      	movs	r0, #0
 626:	e681      	b.n	32c <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
 628:	2017      	movs	r0, #23
 62a:	e67f      	b.n	32c <tcc_init+0x34>
 62c:	2017      	movs	r0, #23
 62e:	e67d      	b.n	32c <tcc_init+0x34>
 630:	2017      	movs	r0, #23
 632:	e67b      	b.n	32c <tcc_init+0x34>
 634:	0000011d 	.word	0x0000011d
 638:	40000800 	.word	0x40000800
 63c:	00000f08 	.word	0x00000f08
 640:	00000f1c 	.word	0x00000f1c
 644:	00000f28 	.word	0x00000f28
 648:	00000f14 	.word	0x00000f14
 64c:	00000cc1 	.word	0x00000cc1
 650:	2017      	movs	r0, #23
 652:	e66b      	b.n	32c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
 654:	2017      	movs	r0, #23
 656:	e669      	b.n	32c <tcc_init+0x34>
			if (i >= ow_num) {
 658:	2017      	movs	r0, #23
 65a:	e667      	b.n	32c <tcc_init+0x34>
			if (i >= ow_num) {
 65c:	2017      	movs	r0, #23
 65e:	e665      	b.n	32c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
 660:	2017      	movs	r0, #23
 662:	e663      	b.n	32c <tcc_init+0x34>
	return STATUS_OK;
 664:	2000      	movs	r0, #0
 666:	e661      	b.n	32c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
 668:	2017      	movs	r0, #23
 66a:	e65f      	b.n	32c <tcc_init+0x34>
 66c:	46b2      	mov	sl, r6
	module_inst->hw = hw;
 66e:	9901      	ldr	r1, [sp, #4]
 670:	600c      	str	r4, [r1, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
 672:	22a0      	movs	r2, #160	; 0xa0
 674:	5caa      	ldrb	r2, [r5, r2]
 676:	710a      	strb	r2, [r1, #4]
	gclk_chan_config.source_generator = config->counter.clock_source;
 678:	a90d      	add	r1, sp, #52	; 0x34
 67a:	7aaa      	ldrb	r2, [r5, #10]
 67c:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
 67e:	4a0c      	ldr	r2, [pc, #48]	; (6b0 <tcc_init+0x3b8>)
 680:	5cd6      	ldrb	r6, [r2, r3]
 682:	0030      	movs	r0, r6
 684:	4b0b      	ldr	r3, [pc, #44]	; (6b4 <tcc_init+0x3bc>)
 686:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
 688:	0030      	movs	r0, r6
 68a:	4b0b      	ldr	r3, [pc, #44]	; (6b8 <tcc_init+0x3c0>)
 68c:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
 68e:	464b      	mov	r3, r9
 690:	2b00      	cmp	r3, #0
 692:	dd95      	ble.n	5c0 <tcc_init+0x2c8>
 694:	2358      	movs	r3, #88	; 0x58
 696:	4698      	mov	r8, r3
 698:	44a8      	add	r8, r5
 69a:	464e      	mov	r6, r9
 69c:	3698      	adds	r6, #152	; 0x98
 69e:	19ae      	adds	r6, r5, r6
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
 6a0:	3b57      	subs	r3, #87	; 0x57
 6a2:	4699      	mov	r9, r3
 6a4:	46ab      	mov	fp, r5
 6a6:	4645      	mov	r5, r8
 6a8:	46a0      	mov	r8, r4
 6aa:	9c08      	ldr	r4, [sp, #32]
 6ac:	e771      	b.n	592 <tcc_init+0x29a>
 6ae:	46c0      	nop			; (mov r8, r8)
 6b0:	00000f18 	.word	0x00000f18
 6b4:	00000bf5 	.word	0x00000bf5
 6b8:	00000b85 	.word	0x00000b85

000006bc <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
 6bc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
 6be:	7903      	ldrb	r3, [r0, #4]
 6c0:	4c01      	ldr	r4, [pc, #4]	; (6c8 <tcc_set_compare_value+0xc>)
 6c2:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
 6c4:	bd10      	pop	{r4, pc}
 6c6:	46c0      	nop			; (mov r8, r8)
 6c8:	00000151 	.word	0x00000151

000006cc <main>:
	tcc_init(&tcc_instance, TCC0, &config_tcc);
	tcc_enable(&tcc_instance);
}

int main(void)
{
 6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 6ce:	46d6      	mov	lr, sl
 6d0:	464f      	mov	r7, r9
 6d2:	b580      	push	{r7, lr}
 6d4:	b0ab      	sub	sp, #172	; 0xac
	system_init();
 6d6:	4b43      	ldr	r3, [pc, #268]	; (7e4 <main+0x118>)
 6d8:	4798      	blx	r3
	tcc_get_config_defaults(&config_tcc, TCC0);
 6da:	4d43      	ldr	r5, [pc, #268]	; (7e8 <main+0x11c>)
 6dc:	ac01      	add	r4, sp, #4
 6de:	0029      	movs	r1, r5
 6e0:	0020      	movs	r0, r4
 6e2:	4e42      	ldr	r6, [pc, #264]	; (7ec <main+0x120>)
 6e4:	47b0      	blx	r6
	tcc_get_config_defaults(&config_tcc, TCC1);
 6e6:	4942      	ldr	r1, [pc, #264]	; (7f0 <main+0x124>)
 6e8:	0020      	movs	r0, r4
 6ea:	47b0      	blx	r6
	config_tcc.counter.period = 65535;
 6ec:	4b41      	ldr	r3, [pc, #260]	; (7f4 <main+0x128>)
 6ee:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
 6f0:	2202      	movs	r2, #2
 6f2:	7622      	strb	r2, [r4, #24]
	config_tcc.compare.match[3] = 65535;
 6f4:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.compare.match[0] = 65535;
 6f6:	61e3      	str	r3, [r4, #28]
	config_tcc.compare.match[1] = 65535;
 6f8:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[7] = true;
 6fa:	2301      	movs	r3, #1
 6fc:	329d      	adds	r2, #157	; 0x9d
 6fe:	54a3      	strb	r3, [r4, r2]
	config_tcc.pins.wave_out_pin[7] = PIN_PB13F_TCC0_WO7;
 700:	3a72      	subs	r2, #114	; 0x72
 702:	6762      	str	r2, [r4, #116]	; 0x74
	config_tcc.pins.wave_out_pin_mux[7] = MUX_PB13F_TCC0_WO7;
 704:	2105      	movs	r1, #5
 706:	3267      	adds	r2, #103	; 0x67
 708:	50a1      	str	r1, [r4, r2]
	config_tcc.pins.enable_wave_out_pin[0] = true;
 70a:	3204      	adds	r2, #4
 70c:	54a3      	strb	r3, [r4, r2]
	config_tcc.pins.wave_out_pin[0] = PIN_PB30E_TCC0_WO0;
 70e:	3a5a      	subs	r2, #90	; 0x5a
 710:	65a2      	str	r2, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[0] = MUX_PB30E_TCC0_WO0;
 712:	3a3a      	subs	r2, #58	; 0x3a
 714:	67a2      	str	r2, [r4, #120]	; 0x78
	config_tcc.pins.enable_wave_out_pin[1] = true;
 716:	3194      	adds	r1, #148	; 0x94
 718:	5463      	strb	r3, [r4, r1]
	config_tcc.pins.wave_out_pin[1] = PIN_PA09E_TCC0_WO1;
 71a:	3308      	adds	r3, #8
 71c:	65e3      	str	r3, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[1] = MUX_PA09E_TCC0_WO1;
 71e:	67e2      	str	r2, [r4, #124]	; 0x7c
	tcc_init(&tcc_instance, TCC0, &config_tcc);
 720:	4e35      	ldr	r6, [pc, #212]	; (7f8 <main+0x12c>)
 722:	0022      	movs	r2, r4
 724:	0029      	movs	r1, r5
 726:	0030      	movs	r0, r6
 728:	4b34      	ldr	r3, [pc, #208]	; (7fc <main+0x130>)
 72a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
 72c:	6833      	ldr	r3, [r6, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
 72e:	2202      	movs	r2, #2
 730:	6899      	ldr	r1, [r3, #8]
 732:	420a      	tst	r2, r1
 734:	d1fc      	bne.n	730 <main+0x64>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
 736:	681a      	ldr	r2, [r3, #0]
 738:	2102      	movs	r1, #2
 73a:	430a      	orrs	r2, r1
 73c:	601a      	str	r2, [r3, #0]
	configure_tcc();
	delay_init();
 73e:	4b30      	ldr	r3, [pc, #192]	; (800 <main+0x134>)
 740:	4798      	blx	r3
	int devideo = 0;
	//! [main]
	//! [main_loop]
	while (true) {
		devideo	= 65535;
		for (int i = 1; i < 255; i++) {
 742:	4d30      	ldr	r5, [pc, #192]	; (804 <main+0x138>)
			tcc_set_compare_value(&tcc_instance, 3, devideo);
			delay_ms(2);
			
		}
		devideo	= 0;
		for (int i = 1; i < 255; i++) {
 744:	4e30      	ldr	r6, [pc, #192]	; (808 <main+0x13c>)
		devideo	= 65535;
 746:	4c2b      	ldr	r4, [pc, #172]	; (7f4 <main+0x128>)
			tcc_set_compare_value(&tcc_instance, 3, devideo);
 748:	4b30      	ldr	r3, [pc, #192]	; (80c <main+0x140>)
 74a:	4699      	mov	r9, r3
			delay_ms(2);
 74c:	4f30      	ldr	r7, [pc, #192]	; (810 <main+0x144>)
			devideo = devideo - 255;
 74e:	3cff      	subs	r4, #255	; 0xff
			tcc_set_compare_value(&tcc_instance, 3, devideo);
 750:	0022      	movs	r2, r4
 752:	2103      	movs	r1, #3
 754:	4828      	ldr	r0, [pc, #160]	; (7f8 <main+0x12c>)
 756:	47c8      	blx	r9
			delay_ms(2);
 758:	2002      	movs	r0, #2
 75a:	47b8      	blx	r7
		for (int i = 1; i < 255; i++) {
 75c:	42ac      	cmp	r4, r5
 75e:	d1f6      	bne.n	74e <main+0x82>
 760:	2700      	movs	r7, #0
			devideo = devideo + 255;
			tcc_set_compare_value(&tcc_instance, 3, devideo);
 762:	4b2a      	ldr	r3, [pc, #168]	; (80c <main+0x140>)
 764:	469a      	mov	sl, r3
			delay_ms(2);
 766:	4c2a      	ldr	r4, [pc, #168]	; (810 <main+0x144>)
			devideo = devideo + 255;
 768:	37ff      	adds	r7, #255	; 0xff
			tcc_set_compare_value(&tcc_instance, 3, devideo);
 76a:	003a      	movs	r2, r7
 76c:	2103      	movs	r1, #3
 76e:	4822      	ldr	r0, [pc, #136]	; (7f8 <main+0x12c>)
 770:	47d0      	blx	sl
			delay_ms(2);
 772:	2002      	movs	r0, #2
 774:	47a0      	blx	r4
		for (int i = 1; i < 255; i++) {
 776:	42b7      	cmp	r7, r6
 778:	d1f6      	bne.n	768 <main+0x9c>
 77a:	4f1e      	ldr	r7, [pc, #120]	; (7f4 <main+0x128>)
			
		}
		devideo	= 65535;
		for (int i = 1; i < 255; i++) {
			devideo = devideo - 255;
			tcc_set_compare_value(&tcc_instance, 0, devideo);
 77c:	4b23      	ldr	r3, [pc, #140]	; (80c <main+0x140>)
 77e:	469a      	mov	sl, r3
			delay_ms(2);
 780:	4c23      	ldr	r4, [pc, #140]	; (810 <main+0x144>)
			devideo = devideo - 255;
 782:	3fff      	subs	r7, #255	; 0xff
			tcc_set_compare_value(&tcc_instance, 0, devideo);
 784:	003a      	movs	r2, r7
 786:	2100      	movs	r1, #0
 788:	481b      	ldr	r0, [pc, #108]	; (7f8 <main+0x12c>)
 78a:	47d0      	blx	sl
			delay_ms(2);
 78c:	2002      	movs	r0, #2
 78e:	47a0      	blx	r4
		for (int i = 1; i < 255; i++) {
 790:	42af      	cmp	r7, r5
 792:	d1f6      	bne.n	782 <main+0xb6>
 794:	2700      	movs	r7, #0
			
		}
		devideo	= 0;
		for (int i = 1; i < 255; i++) {
			devideo = devideo + 255;
			tcc_set_compare_value(&tcc_instance, 0, devideo);
 796:	4b1d      	ldr	r3, [pc, #116]	; (80c <main+0x140>)
 798:	469a      	mov	sl, r3
			delay_ms(2);
 79a:	4c1d      	ldr	r4, [pc, #116]	; (810 <main+0x144>)
			devideo = devideo + 255;
 79c:	37ff      	adds	r7, #255	; 0xff
			tcc_set_compare_value(&tcc_instance, 0, devideo);
 79e:	003a      	movs	r2, r7
 7a0:	2100      	movs	r1, #0
 7a2:	4815      	ldr	r0, [pc, #84]	; (7f8 <main+0x12c>)
 7a4:	47d0      	blx	sl
			delay_ms(2);
 7a6:	2002      	movs	r0, #2
 7a8:	47a0      	blx	r4
		for (int i = 1; i < 255; i++) {
 7aa:	42b7      	cmp	r7, r6
 7ac:	d1f6      	bne.n	79c <main+0xd0>
 7ae:	4c11      	ldr	r4, [pc, #68]	; (7f4 <main+0x128>)
			
		}
		devideo	= 65535;
		for (int i = 1; i < 255; i++) {
			devideo = devideo - 255;
			tcc_set_compare_value(&tcc_instance, 1, devideo);
 7b0:	4b16      	ldr	r3, [pc, #88]	; (80c <main+0x140>)
 7b2:	469a      	mov	sl, r3
			delay_ms(2);
 7b4:	4f16      	ldr	r7, [pc, #88]	; (810 <main+0x144>)
			devideo = devideo - 255;
 7b6:	3cff      	subs	r4, #255	; 0xff
			tcc_set_compare_value(&tcc_instance, 1, devideo);
 7b8:	0022      	movs	r2, r4
 7ba:	2101      	movs	r1, #1
 7bc:	480e      	ldr	r0, [pc, #56]	; (7f8 <main+0x12c>)
 7be:	47d0      	blx	sl
			delay_ms(2);
 7c0:	2002      	movs	r0, #2
 7c2:	47b8      	blx	r7
		for (int i = 1; i < 255; i++) {
 7c4:	42ac      	cmp	r4, r5
 7c6:	d1f6      	bne.n	7b6 <main+0xea>
 7c8:	2400      	movs	r4, #0
			
		}
		devideo	= 0;
		for (int i = 1; i < 255; i++) {
			devideo = devideo + 255;
			tcc_set_compare_value(&tcc_instance, 1, devideo);
 7ca:	4b10      	ldr	r3, [pc, #64]	; (80c <main+0x140>)
 7cc:	469a      	mov	sl, r3
			delay_ms(2);
 7ce:	4f10      	ldr	r7, [pc, #64]	; (810 <main+0x144>)
			devideo = devideo + 255;
 7d0:	34ff      	adds	r4, #255	; 0xff
			tcc_set_compare_value(&tcc_instance, 1, devideo);
 7d2:	0022      	movs	r2, r4
 7d4:	2101      	movs	r1, #1
 7d6:	4808      	ldr	r0, [pc, #32]	; (7f8 <main+0x12c>)
 7d8:	47d0      	blx	sl
			delay_ms(2);
 7da:	2002      	movs	r0, #2
 7dc:	47b8      	blx	r7
		for (int i = 1; i < 255; i++) {
 7de:	42b4      	cmp	r4, r6
 7e0:	d1f6      	bne.n	7d0 <main+0x104>
 7e2:	e7b0      	b.n	746 <main+0x7a>
 7e4:	00000cf1 	.word	0x00000cf1
 7e8:	42002400 	.word	0x42002400
 7ec:	000001ad 	.word	0x000001ad
 7f0:	42002800 	.word	0x42002800
 7f4:	0000ffff 	.word	0x0000ffff
 7f8:	2000003c 	.word	0x2000003c
 7fc:	000002f9 	.word	0x000002f9
 800:	00000815 	.word	0x00000815
 804:	000002fd 	.word	0x000002fd
 808:	0000fd02 	.word	0x0000fd02
 80c:	000006bd 	.word	0x000006bd
 810:	00000855 	.word	0x00000855

00000814 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
 814:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
 816:	2000      	movs	r0, #0
 818:	4b08      	ldr	r3, [pc, #32]	; (83c <delay_init+0x28>)
 81a:	4798      	blx	r3
 81c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
 81e:	4c08      	ldr	r4, [pc, #32]	; (840 <delay_init+0x2c>)
 820:	21fa      	movs	r1, #250	; 0xfa
 822:	0089      	lsls	r1, r1, #2
 824:	47a0      	blx	r4
 826:	4b07      	ldr	r3, [pc, #28]	; (844 <delay_init+0x30>)
 828:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
 82a:	4907      	ldr	r1, [pc, #28]	; (848 <delay_init+0x34>)
 82c:	0028      	movs	r0, r5
 82e:	47a0      	blx	r4
 830:	4b06      	ldr	r3, [pc, #24]	; (84c <delay_init+0x38>)
 832:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 834:	2205      	movs	r2, #5
 836:	4b06      	ldr	r3, [pc, #24]	; (850 <delay_init+0x3c>)
 838:	601a      	str	r2, [r3, #0]
}
 83a:	bd70      	pop	{r4, r5, r6, pc}
 83c:	00000b19 	.word	0x00000b19
 840:	00000da9 	.word	0x00000da9
 844:	20000000 	.word	0x20000000
 848:	000f4240 	.word	0x000f4240
 84c:	20000004 	.word	0x20000004
 850:	e000e010 	.word	0xe000e010

00000854 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
 854:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
 856:	4b08      	ldr	r3, [pc, #32]	; (878 <delay_cycles_ms+0x24>)
 858:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
 85a:	4a08      	ldr	r2, [pc, #32]	; (87c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
 85c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 85e:	2180      	movs	r1, #128	; 0x80
 860:	0249      	lsls	r1, r1, #9
	while (n--) {
 862:	3801      	subs	r0, #1
 864:	d307      	bcc.n	876 <delay_cycles_ms+0x22>
	if (n > 0) {
 866:	2c00      	cmp	r4, #0
 868:	d0fb      	beq.n	862 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
 86a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 86c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 86e:	6813      	ldr	r3, [r2, #0]
 870:	420b      	tst	r3, r1
 872:	d0fc      	beq.n	86e <delay_cycles_ms+0x1a>
 874:	e7f5      	b.n	862 <delay_cycles_ms+0xe>
	}
}
 876:	bd30      	pop	{r4, r5, pc}
 878:	20000000 	.word	0x20000000
 87c:	e000e010 	.word	0xe000e010

00000880 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 880:	4b0c      	ldr	r3, [pc, #48]	; (8b4 <cpu_irq_enter_critical+0x34>)
 882:	681b      	ldr	r3, [r3, #0]
 884:	2b00      	cmp	r3, #0
 886:	d106      	bne.n	896 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 888:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 88c:	2b00      	cmp	r3, #0
 88e:	d007      	beq.n	8a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 890:	2200      	movs	r2, #0
 892:	4b09      	ldr	r3, [pc, #36]	; (8b8 <cpu_irq_enter_critical+0x38>)
 894:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 896:	4a07      	ldr	r2, [pc, #28]	; (8b4 <cpu_irq_enter_critical+0x34>)
 898:	6813      	ldr	r3, [r2, #0]
 89a:	3301      	adds	r3, #1
 89c:	6013      	str	r3, [r2, #0]
}
 89e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 8a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 8a6:	2200      	movs	r2, #0
 8a8:	4b04      	ldr	r3, [pc, #16]	; (8bc <cpu_irq_enter_critical+0x3c>)
 8aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 8ac:	3201      	adds	r2, #1
 8ae:	4b02      	ldr	r3, [pc, #8]	; (8b8 <cpu_irq_enter_critical+0x38>)
 8b0:	701a      	strb	r2, [r3, #0]
 8b2:	e7f0      	b.n	896 <cpu_irq_enter_critical+0x16>
 8b4:	20000028 	.word	0x20000028
 8b8:	2000002c 	.word	0x2000002c
 8bc:	20000008 	.word	0x20000008

000008c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 8c0:	4b08      	ldr	r3, [pc, #32]	; (8e4 <cpu_irq_leave_critical+0x24>)
 8c2:	681a      	ldr	r2, [r3, #0]
 8c4:	3a01      	subs	r2, #1
 8c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 8c8:	681b      	ldr	r3, [r3, #0]
 8ca:	2b00      	cmp	r3, #0
 8cc:	d109      	bne.n	8e2 <cpu_irq_leave_critical+0x22>
 8ce:	4b06      	ldr	r3, [pc, #24]	; (8e8 <cpu_irq_leave_critical+0x28>)
 8d0:	781b      	ldrb	r3, [r3, #0]
 8d2:	2b00      	cmp	r3, #0
 8d4:	d005      	beq.n	8e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 8d6:	2201      	movs	r2, #1
 8d8:	4b04      	ldr	r3, [pc, #16]	; (8ec <cpu_irq_leave_critical+0x2c>)
 8da:	701a      	strb	r2, [r3, #0]
 8dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8e0:	b662      	cpsie	i
	}
}
 8e2:	4770      	bx	lr
 8e4:	20000028 	.word	0x20000028
 8e8:	2000002c 	.word	0x2000002c
 8ec:	20000008 	.word	0x20000008

000008f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 8f4:	ac01      	add	r4, sp, #4
 8f6:	2501      	movs	r5, #1
 8f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 8fa:	2700      	movs	r7, #0
 8fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 8fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 900:	0021      	movs	r1, r4
 902:	200f      	movs	r0, #15
 904:	4e06      	ldr	r6, [pc, #24]	; (920 <system_board_init+0x30>)
 906:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 908:	2280      	movs	r2, #128	; 0x80
 90a:	0212      	lsls	r2, r2, #8
 90c:	2382      	movs	r3, #130	; 0x82
 90e:	05db      	lsls	r3, r3, #23
 910:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 912:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 914:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 916:	0021      	movs	r1, r4
 918:	201c      	movs	r0, #28
 91a:	47b0      	blx	r6
}
 91c:	b003      	add	sp, #12
 91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 920:	00000925 	.word	0x00000925

00000924 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 924:	b500      	push	{lr}
 926:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
 928:	ab01      	add	r3, sp, #4
 92a:	2280      	movs	r2, #128	; 0x80
 92c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 92e:	780a      	ldrb	r2, [r1, #0]
 930:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 932:	784a      	ldrb	r2, [r1, #1]
 934:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 936:	788a      	ldrb	r2, [r1, #2]
 938:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 93a:	0019      	movs	r1, r3
 93c:	4b01      	ldr	r3, [pc, #4]	; (944 <port_pin_set_config+0x20>)
 93e:	4798      	blx	r3
}
 940:	b003      	add	sp, #12
 942:	bd00      	pop	{pc}
 944:	00000cc1 	.word	0x00000cc1

00000948 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 948:	b510      	push	{r4, lr}
	switch (clock_source) {
 94a:	2807      	cmp	r0, #7
 94c:	d803      	bhi.n	956 <system_clock_source_get_hz+0xe>
 94e:	0080      	lsls	r0, r0, #2
 950:	4b0f      	ldr	r3, [pc, #60]	; (990 <system_clock_source_get_hz+0x48>)
 952:	581b      	ldr	r3, [r3, r0]
 954:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
 956:	2000      	movs	r0, #0
 958:	e018      	b.n	98c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
 95a:	4b0e      	ldr	r3, [pc, #56]	; (994 <system_clock_source_get_hz+0x4c>)
 95c:	6858      	ldr	r0, [r3, #4]
 95e:	e015      	b.n	98c <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
 960:	4b0d      	ldr	r3, [pc, #52]	; (998 <system_clock_source_get_hz+0x50>)
 962:	7d59      	ldrb	r1, [r3, #21]
 964:	0709      	lsls	r1, r1, #28
 966:	0f09      	lsrs	r1, r1, #28
 968:	3101      	adds	r1, #1
 96a:	480c      	ldr	r0, [pc, #48]	; (99c <system_clock_source_get_hz+0x54>)
 96c:	4b0c      	ldr	r3, [pc, #48]	; (9a0 <system_clock_source_get_hz+0x58>)
 96e:	4798      	blx	r3
 970:	e00c      	b.n	98c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
 972:	4b08      	ldr	r3, [pc, #32]	; (994 <system_clock_source_get_hz+0x4c>)
 974:	6898      	ldr	r0, [r3, #8]
 976:	e009      	b.n	98c <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
 978:	4b07      	ldr	r3, [pc, #28]	; (998 <system_clock_source_get_hz+0x50>)
 97a:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
 97c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
 97e:	079b      	lsls	r3, r3, #30
 980:	d504      	bpl.n	98c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
 982:	4b04      	ldr	r3, [pc, #16]	; (994 <system_clock_source_get_hz+0x4c>)
 984:	6818      	ldr	r0, [r3, #0]
 986:	e001      	b.n	98c <system_clock_source_get_hz+0x44>
		return 32768UL;
 988:	2080      	movs	r0, #128	; 0x80
 98a:	0200      	lsls	r0, r0, #8
	}
}
 98c:	bd10      	pop	{r4, pc}
 98e:	46c0      	nop			; (mov r8, r8)
 990:	00000f2c 	.word	0x00000f2c
 994:	20000030 	.word	0x20000030
 998:	40001000 	.word	0x40001000
 99c:	02dc6c00 	.word	0x02dc6c00
 9a0:	00000da9 	.word	0x00000da9

000009a4 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
 9a4:	b500      	push	{lr}
 9a6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
 9a8:	2203      	movs	r2, #3
 9aa:	4b10      	ldr	r3, [pc, #64]	; (9ec <system_clock_init+0x48>)
 9ac:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 9ae:	4a10      	ldr	r2, [pc, #64]	; (9f0 <system_clock_init+0x4c>)
 9b0:	6853      	ldr	r3, [r2, #4]
 9b2:	211e      	movs	r1, #30
 9b4:	438b      	bics	r3, r1
 9b6:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
 9b8:	4a0e      	ldr	r2, [pc, #56]	; (9f4 <system_clock_init+0x50>)
 9ba:	7d13      	ldrb	r3, [r2, #20]
 9bc:	3162      	adds	r1, #98	; 0x62
 9be:	430b      	orrs	r3, r1
 9c0:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 9c2:	4b0d      	ldr	r3, [pc, #52]	; (9f8 <system_clock_init+0x54>)
 9c4:	4798      	blx	r3
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
 9c6:	2301      	movs	r3, #1
 9c8:	4a0c      	ldr	r2, [pc, #48]	; (9fc <system_clock_init+0x58>)
 9ca:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 9cc:	a901      	add	r1, sp, #4
 9ce:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
 9d0:	2300      	movs	r3, #0
 9d2:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
 9d4:	2206      	movs	r2, #6
 9d6:	700a      	strb	r2, [r1, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
 9d8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
 9da:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 9dc:	2000      	movs	r0, #0
 9de:	4b08      	ldr	r3, [pc, #32]	; (a00 <system_clock_init+0x5c>)
 9e0:	4798      	blx	r3
 9e2:	2000      	movs	r0, #0
 9e4:	4b07      	ldr	r3, [pc, #28]	; (a04 <system_clock_init+0x60>)
 9e6:	4798      	blx	r3
#endif

}
 9e8:	b005      	add	sp, #20
 9ea:	bd00      	pop	{pc}
 9ec:	40001800 	.word	0x40001800
 9f0:	41004000 	.word	0x41004000
 9f4:	40001000 	.word	0x40001000
 9f8:	00000a09 	.word	0x00000a09
 9fc:	40000800 	.word	0x40000800
 a00:	00000a2d 	.word	0x00000a2d
 a04:	00000ad9 	.word	0x00000ad9

00000a08 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
 a08:	4a06      	ldr	r2, [pc, #24]	; (a24 <system_gclk_init+0x1c>)
 a0a:	6953      	ldr	r3, [r2, #20]
 a0c:	2180      	movs	r1, #128	; 0x80
 a0e:	430b      	orrs	r3, r1
 a10:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
 a12:	2201      	movs	r2, #1
 a14:	4b04      	ldr	r3, [pc, #16]	; (a28 <system_gclk_init+0x20>)
 a16:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
 a18:	0019      	movs	r1, r3
 a1a:	780b      	ldrb	r3, [r1, #0]
 a1c:	4213      	tst	r3, r2
 a1e:	d1fc      	bne.n	a1a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 a20:	4770      	bx	lr
 a22:	46c0      	nop			; (mov r8, r8)
 a24:	40000800 	.word	0x40000800
 a28:	40001c00 	.word	0x40001c00

00000a2c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 a2c:	b570      	push	{r4, r5, r6, lr}
 a2e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
 a30:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 a32:	784b      	ldrb	r3, [r1, #1]
 a34:	2b00      	cmp	r3, #0
 a36:	d002      	beq.n	a3e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 a38:	2380      	movs	r3, #128	; 0x80
 a3a:	00db      	lsls	r3, r3, #3
 a3c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 a3e:	7a4b      	ldrb	r3, [r1, #9]
 a40:	2b00      	cmp	r3, #0
 a42:	d002      	beq.n	a4a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 a44:	2380      	movs	r3, #128	; 0x80
 a46:	011b      	lsls	r3, r3, #4
 a48:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 a4a:	6848      	ldr	r0, [r1, #4]
 a4c:	2801      	cmp	r0, #1
 a4e:	d90f      	bls.n	a70 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 a50:	1e43      	subs	r3, r0, #1
 a52:	4218      	tst	r0, r3
 a54:	d131      	bne.n	aba <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 a56:	2802      	cmp	r0, #2
 a58:	d92d      	bls.n	ab6 <system_gclk_gen_set_config+0x8a>
 a5a:	2302      	movs	r3, #2
 a5c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 a5e:	3201      	adds	r2, #1
						mask <<= 1) {
 a60:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 a62:	4298      	cmp	r0, r3
 a64:	d8fb      	bhi.n	a5e <system_gclk_gen_set_config+0x32>
 a66:	2380      	movs	r3, #128	; 0x80
 a68:	015b      	lsls	r3, r3, #5
 a6a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
 a6c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 a6e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 a70:	7a0b      	ldrb	r3, [r1, #8]
 a72:	2b00      	cmp	r3, #0
 a74:	d002      	beq.n	a7c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 a76:	2380      	movs	r3, #128	; 0x80
 a78:	019b      	lsls	r3, r3, #6
 a7a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 a7c:	2604      	movs	r6, #4
 a7e:	40a6      	lsls	r6, r4
 a80:	4911      	ldr	r1, [pc, #68]	; (ac8 <system_gclk_gen_set_config+0x9c>)
 a82:	4a12      	ldr	r2, [pc, #72]	; (acc <system_gclk_gen_set_config+0xa0>)
 a84:	684b      	ldr	r3, [r1, #4]
 a86:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
 a88:	421e      	tst	r6, r3
 a8a:	d1fb      	bne.n	a84 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 a8c:	4b10      	ldr	r3, [pc, #64]	; (ad0 <system_gclk_gen_set_config+0xa4>)
 a8e:	4798      	blx	r3
 a90:	00a4      	lsls	r4, r4, #2
 a92:	4b0d      	ldr	r3, [pc, #52]	; (ac8 <system_gclk_gen_set_config+0x9c>)
 a94:	469c      	mov	ip, r3
 a96:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
 a98:	6a22      	ldr	r2, [r4, #32]
 a9a:	2380      	movs	r3, #128	; 0x80
 a9c:	005b      	lsls	r3, r3, #1
 a9e:	401a      	ands	r2, r3
 aa0:	432a      	orrs	r2, r5
 aa2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 aa4:	4661      	mov	r1, ip
 aa6:	4a09      	ldr	r2, [pc, #36]	; (acc <system_gclk_gen_set_config+0xa0>)
 aa8:	684b      	ldr	r3, [r1, #4]
 aaa:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
 aac:	421e      	tst	r6, r3
 aae:	d1fb      	bne.n	aa8 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 ab0:	4b08      	ldr	r3, [pc, #32]	; (ad4 <system_gclk_gen_set_config+0xa8>)
 ab2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
 ab4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 ab6:	2200      	movs	r2, #0
 ab8:	e7d5      	b.n	a66 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
 aba:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 abc:	2380      	movs	r3, #128	; 0x80
 abe:	009b      	lsls	r3, r3, #2
 ac0:	4318      	orrs	r0, r3
 ac2:	4305      	orrs	r5, r0
 ac4:	e7d4      	b.n	a70 <system_gclk_gen_set_config+0x44>
 ac6:	46c0      	nop			; (mov r8, r8)
 ac8:	40001c00 	.word	0x40001c00
 acc:	000007fc 	.word	0x000007fc
 ad0:	00000881 	.word	0x00000881
 ad4:	000008c1 	.word	0x000008c1

00000ad8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 ad8:	b510      	push	{r4, lr}
 ada:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 adc:	2204      	movs	r2, #4
 ade:	4082      	lsls	r2, r0
 ae0:	4809      	ldr	r0, [pc, #36]	; (b08 <system_gclk_gen_enable+0x30>)
 ae2:	490a      	ldr	r1, [pc, #40]	; (b0c <system_gclk_gen_enable+0x34>)
 ae4:	6843      	ldr	r3, [r0, #4]
 ae6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
 ae8:	421a      	tst	r2, r3
 aea:	d1fb      	bne.n	ae4 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
 aec:	4b08      	ldr	r3, [pc, #32]	; (b10 <system_gclk_gen_enable+0x38>)
 aee:	4798      	blx	r3
 af0:	00a4      	lsls	r4, r4, #2
 af2:	4b05      	ldr	r3, [pc, #20]	; (b08 <system_gclk_gen_enable+0x30>)
 af4:	469c      	mov	ip, r3
 af6:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
 af8:	6a22      	ldr	r2, [r4, #32]
 afa:	2380      	movs	r3, #128	; 0x80
 afc:	005b      	lsls	r3, r3, #1
 afe:	4313      	orrs	r3, r2
 b00:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
 b02:	4b04      	ldr	r3, [pc, #16]	; (b14 <system_gclk_gen_enable+0x3c>)
 b04:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 b06:	bd10      	pop	{r4, pc}
 b08:	40001c00 	.word	0x40001c00
 b0c:	000007fc 	.word	0x000007fc
 b10:	00000881 	.word	0x00000881
 b14:	000008c1 	.word	0x000008c1

00000b18 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 b1a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 b1c:	2204      	movs	r2, #4
 b1e:	4082      	lsls	r2, r0
 b20:	4812      	ldr	r0, [pc, #72]	; (b6c <system_gclk_gen_get_hz+0x54>)
 b22:	4913      	ldr	r1, [pc, #76]	; (b70 <system_gclk_gen_get_hz+0x58>)
 b24:	6843      	ldr	r3, [r0, #4]
 b26:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
 b28:	421a      	tst	r2, r3
 b2a:	d1fb      	bne.n	b24 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
 b2c:	4b11      	ldr	r3, [pc, #68]	; (b74 <system_gclk_gen_get_hz+0x5c>)
 b2e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
 b30:	4f0e      	ldr	r7, [pc, #56]	; (b6c <system_gclk_gen_get_hz+0x54>)
 b32:	3408      	adds	r4, #8
 b34:	00a4      	lsls	r4, r4, #2
 b36:	59e0      	ldr	r0, [r4, r7]
 b38:	0740      	lsls	r0, r0, #29
 b3a:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
 b3c:	4b0e      	ldr	r3, [pc, #56]	; (b78 <system_gclk_gen_get_hz+0x60>)
 b3e:	4798      	blx	r3
 b40:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
 b42:	59e5      	ldr	r5, [r4, r7]
 b44:	04ed      	lsls	r5, r5, #19
 b46:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
 b48:	59e4      	ldr	r4, [r4, r7]
 b4a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 b4c:	4b0b      	ldr	r3, [pc, #44]	; (b7c <system_gclk_gen_get_hz+0x64>)
 b4e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 b50:	2d00      	cmp	r5, #0
 b52:	d107      	bne.n	b64 <system_gclk_gen_get_hz+0x4c>
 b54:	2c01      	cmp	r4, #1
 b56:	d907      	bls.n	b68 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
 b58:	0021      	movs	r1, r4
 b5a:	0030      	movs	r0, r6
 b5c:	4b08      	ldr	r3, [pc, #32]	; (b80 <system_gclk_gen_get_hz+0x68>)
 b5e:	4798      	blx	r3
 b60:	0006      	movs	r6, r0
 b62:	e001      	b.n	b68 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 b64:	3401      	adds	r4, #1
 b66:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
 b68:	0030      	movs	r0, r6
 b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 b6c:	40001c00 	.word	0x40001c00
 b70:	000007fc 	.word	0x000007fc
 b74:	00000881 	.word	0x00000881
 b78:	00000949 	.word	0x00000949
 b7c:	000008c1 	.word	0x000008c1
 b80:	00000da9 	.word	0x00000da9

00000b84 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 b84:	b510      	push	{r4, lr}
 b86:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 b88:	4b09      	ldr	r3, [pc, #36]	; (bb0 <system_gclk_chan_enable+0x2c>)
 b8a:	4798      	blx	r3
 b8c:	00a0      	lsls	r0, r4, #2
 b8e:	4b09      	ldr	r3, [pc, #36]	; (bb4 <system_gclk_chan_enable+0x30>)
 b90:	469c      	mov	ip, r3
 b92:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
 b94:	2280      	movs	r2, #128	; 0x80
 b96:	5883      	ldr	r3, [r0, r2]
 b98:	2140      	movs	r1, #64	; 0x40
 b9a:	430b      	orrs	r3, r1
 b9c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
 b9e:	3140      	adds	r1, #64	; 0x40
 ba0:	3a40      	subs	r2, #64	; 0x40
 ba2:	5843      	ldr	r3, [r0, r1]
 ba4:	421a      	tst	r2, r3
 ba6:	d0fc      	beq.n	ba2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
 ba8:	4b03      	ldr	r3, [pc, #12]	; (bb8 <system_gclk_chan_enable+0x34>)
 baa:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
 bac:	bd10      	pop	{r4, pc}
 bae:	46c0      	nop			; (mov r8, r8)
 bb0:	00000881 	.word	0x00000881
 bb4:	40001c00 	.word	0x40001c00
 bb8:	000008c1 	.word	0x000008c1

00000bbc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 bbc:	b510      	push	{r4, lr}
 bbe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 bc0:	4b09      	ldr	r3, [pc, #36]	; (be8 <system_gclk_chan_disable+0x2c>)
 bc2:	4798      	blx	r3
 bc4:	00a0      	lsls	r0, r4, #2
 bc6:	4b09      	ldr	r3, [pc, #36]	; (bec <system_gclk_chan_disable+0x30>)
 bc8:	469c      	mov	ip, r3
 bca:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
 bcc:	2280      	movs	r2, #128	; 0x80
 bce:	5883      	ldr	r3, [r0, r2]
 bd0:	2140      	movs	r1, #64	; 0x40
 bd2:	438b      	bics	r3, r1
 bd4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
 bd6:	3140      	adds	r1, #64	; 0x40
 bd8:	3a40      	subs	r2, #64	; 0x40
 bda:	5843      	ldr	r3, [r0, r1]
 bdc:	421a      	tst	r2, r3
 bde:	d1fc      	bne.n	bda <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
 be0:	4b03      	ldr	r3, [pc, #12]	; (bf0 <system_gclk_chan_disable+0x34>)
 be2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
 be4:	bd10      	pop	{r4, pc}
 be6:	46c0      	nop			; (mov r8, r8)
 be8:	00000881 	.word	0x00000881
 bec:	40001c00 	.word	0x40001c00
 bf0:	000008c1 	.word	0x000008c1

00000bf4 <system_gclk_chan_set_config>:
{
 bf4:	b570      	push	{r4, r5, r6, lr}
 bf6:	0004      	movs	r4, r0
 bf8:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
 bfa:	4b05      	ldr	r3, [pc, #20]	; (c10 <system_gclk_chan_set_config+0x1c>)
 bfc:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
 bfe:	782a      	ldrb	r2, [r5, #0]
 c00:	230f      	movs	r3, #15
 c02:	4013      	ands	r3, r2
 c04:	3420      	adds	r4, #32
 c06:	00a4      	lsls	r4, r4, #2
 c08:	4a02      	ldr	r2, [pc, #8]	; (c14 <system_gclk_chan_set_config+0x20>)
 c0a:	50a3      	str	r3, [r4, r2]
}
 c0c:	bd70      	pop	{r4, r5, r6, pc}
 c0e:	46c0      	nop			; (mov r8, r8)
 c10:	00000bbd 	.word	0x00000bbd
 c14:	40001c00 	.word	0x40001c00

00000c18 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 c18:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 c1a:	78d3      	ldrb	r3, [r2, #3]
 c1c:	2b00      	cmp	r3, #0
 c1e:	d135      	bne.n	c8c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 c20:	7813      	ldrb	r3, [r2, #0]
 c22:	2b80      	cmp	r3, #128	; 0x80
 c24:	d029      	beq.n	c7a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 c26:	061b      	lsls	r3, r3, #24
 c28:	2480      	movs	r4, #128	; 0x80
 c2a:	0264      	lsls	r4, r4, #9
 c2c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 c2e:	7854      	ldrb	r4, [r2, #1]
 c30:	2502      	movs	r5, #2
 c32:	43ac      	bics	r4, r5
 c34:	d106      	bne.n	c44 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 c36:	7894      	ldrb	r4, [r2, #2]
 c38:	2c00      	cmp	r4, #0
 c3a:	d120      	bne.n	c7e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 c3c:	2480      	movs	r4, #128	; 0x80
 c3e:	02a4      	lsls	r4, r4, #10
 c40:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 c42:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 c44:	7854      	ldrb	r4, [r2, #1]
 c46:	3c01      	subs	r4, #1
 c48:	2c01      	cmp	r4, #1
 c4a:	d91c      	bls.n	c86 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 c4c:	040d      	lsls	r5, r1, #16
 c4e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 c50:	24a0      	movs	r4, #160	; 0xa0
 c52:	05e4      	lsls	r4, r4, #23
 c54:	432c      	orrs	r4, r5
 c56:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 c58:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 c5a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 c5c:	24d0      	movs	r4, #208	; 0xd0
 c5e:	0624      	lsls	r4, r4, #24
 c60:	432c      	orrs	r4, r5
 c62:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 c64:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 c66:	78d4      	ldrb	r4, [r2, #3]
 c68:	2c00      	cmp	r4, #0
 c6a:	d122      	bne.n	cb2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 c6c:	035b      	lsls	r3, r3, #13
 c6e:	d51c      	bpl.n	caa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 c70:	7893      	ldrb	r3, [r2, #2]
 c72:	2b01      	cmp	r3, #1
 c74:	d01e      	beq.n	cb4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 c76:	6141      	str	r1, [r0, #20]
 c78:	e017      	b.n	caa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 c7a:	2300      	movs	r3, #0
 c7c:	e7d7      	b.n	c2e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 c7e:	24c0      	movs	r4, #192	; 0xc0
 c80:	02e4      	lsls	r4, r4, #11
 c82:	4323      	orrs	r3, r4
 c84:	e7dd      	b.n	c42 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 c86:	4c0d      	ldr	r4, [pc, #52]	; (cbc <_system_pinmux_config+0xa4>)
 c88:	4023      	ands	r3, r4
 c8a:	e7df      	b.n	c4c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 c8c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 c8e:	040c      	lsls	r4, r1, #16
 c90:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 c92:	23a0      	movs	r3, #160	; 0xa0
 c94:	05db      	lsls	r3, r3, #23
 c96:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 c98:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 c9a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 c9c:	23d0      	movs	r3, #208	; 0xd0
 c9e:	061b      	lsls	r3, r3, #24
 ca0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 ca2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 ca4:	78d3      	ldrb	r3, [r2, #3]
 ca6:	2b00      	cmp	r3, #0
 ca8:	d103      	bne.n	cb2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 caa:	7853      	ldrb	r3, [r2, #1]
 cac:	3b01      	subs	r3, #1
 cae:	2b01      	cmp	r3, #1
 cb0:	d902      	bls.n	cb8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 cb2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 cb4:	6181      	str	r1, [r0, #24]
 cb6:	e7f8      	b.n	caa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 cb8:	6081      	str	r1, [r0, #8]
}
 cba:	e7fa      	b.n	cb2 <_system_pinmux_config+0x9a>
 cbc:	fffbffff 	.word	0xfffbffff

00000cc0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 cc0:	b510      	push	{r4, lr}
 cc2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 cc4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 cc6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 cc8:	2900      	cmp	r1, #0
 cca:	d105      	bne.n	cd8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
 ccc:	0943      	lsrs	r3, r0, #5
 cce:	01db      	lsls	r3, r3, #7
 cd0:	2182      	movs	r1, #130	; 0x82
 cd2:	05c9      	lsls	r1, r1, #23
 cd4:	468c      	mov	ip, r1
 cd6:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 cd8:	241f      	movs	r4, #31
 cda:	4020      	ands	r0, r4
 cdc:	2101      	movs	r1, #1
 cde:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 ce0:	0018      	movs	r0, r3
 ce2:	4b01      	ldr	r3, [pc, #4]	; (ce8 <system_pinmux_pin_set_config+0x28>)
 ce4:	4798      	blx	r3
}
 ce6:	bd10      	pop	{r4, pc}
 ce8:	00000c19 	.word	0x00000c19

00000cec <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 cec:	4770      	bx	lr
	...

00000cf0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 cf0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 cf2:	4b05      	ldr	r3, [pc, #20]	; (d08 <system_init+0x18>)
 cf4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 cf6:	4b05      	ldr	r3, [pc, #20]	; (d0c <system_init+0x1c>)
 cf8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 cfa:	4b05      	ldr	r3, [pc, #20]	; (d10 <system_init+0x20>)
 cfc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 cfe:	4b05      	ldr	r3, [pc, #20]	; (d14 <system_init+0x24>)
 d00:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 d02:	4b05      	ldr	r3, [pc, #20]	; (d18 <system_init+0x28>)
 d04:	4798      	blx	r3
}
 d06:	bd10      	pop	{r4, pc}
 d08:	000009a5 	.word	0x000009a5
 d0c:	000008f1 	.word	0x000008f1
 d10:	00000ced 	.word	0x00000ced
 d14:	00000ced 	.word	0x00000ced
 d18:	00000ced 	.word	0x00000ced

00000d1c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 d1c:	e7fe      	b.n	d1c <Dummy_Handler>
	...

00000d20 <Reset_Handler>:
{
 d20:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 d22:	4a17      	ldr	r2, [pc, #92]	; (d80 <Reset_Handler+0x60>)
 d24:	4b17      	ldr	r3, [pc, #92]	; (d84 <Reset_Handler+0x64>)
 d26:	429a      	cmp	r2, r3
 d28:	d011      	beq.n	d4e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 d2a:	001a      	movs	r2, r3
 d2c:	4b16      	ldr	r3, [pc, #88]	; (d88 <Reset_Handler+0x68>)
 d2e:	429a      	cmp	r2, r3
 d30:	d20d      	bcs.n	d4e <Reset_Handler+0x2e>
 d32:	4a16      	ldr	r2, [pc, #88]	; (d8c <Reset_Handler+0x6c>)
 d34:	3303      	adds	r3, #3
 d36:	1a9b      	subs	r3, r3, r2
 d38:	089b      	lsrs	r3, r3, #2
 d3a:	3301      	adds	r3, #1
 d3c:	009b      	lsls	r3, r3, #2
 d3e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 d40:	4810      	ldr	r0, [pc, #64]	; (d84 <Reset_Handler+0x64>)
 d42:	490f      	ldr	r1, [pc, #60]	; (d80 <Reset_Handler+0x60>)
 d44:	588c      	ldr	r4, [r1, r2]
 d46:	5084      	str	r4, [r0, r2]
 d48:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 d4a:	429a      	cmp	r2, r3
 d4c:	d1fa      	bne.n	d44 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 d4e:	4a10      	ldr	r2, [pc, #64]	; (d90 <Reset_Handler+0x70>)
 d50:	4b10      	ldr	r3, [pc, #64]	; (d94 <Reset_Handler+0x74>)
 d52:	429a      	cmp	r2, r3
 d54:	d20a      	bcs.n	d6c <Reset_Handler+0x4c>
 d56:	43d3      	mvns	r3, r2
 d58:	490e      	ldr	r1, [pc, #56]	; (d94 <Reset_Handler+0x74>)
 d5a:	185b      	adds	r3, r3, r1
 d5c:	2103      	movs	r1, #3
 d5e:	438b      	bics	r3, r1
 d60:	3304      	adds	r3, #4
 d62:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 d64:	2100      	movs	r1, #0
 d66:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 d68:	4293      	cmp	r3, r2
 d6a:	d1fc      	bne.n	d66 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 d6c:	4a0a      	ldr	r2, [pc, #40]	; (d98 <Reset_Handler+0x78>)
 d6e:	21ff      	movs	r1, #255	; 0xff
 d70:	4b0a      	ldr	r3, [pc, #40]	; (d9c <Reset_Handler+0x7c>)
 d72:	438b      	bics	r3, r1
 d74:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 d76:	4b0a      	ldr	r3, [pc, #40]	; (da0 <Reset_Handler+0x80>)
 d78:	4798      	blx	r3
        main();
 d7a:	4b0a      	ldr	r3, [pc, #40]	; (da4 <Reset_Handler+0x84>)
 d7c:	4798      	blx	r3
 d7e:	e7fe      	b.n	d7e <Reset_Handler+0x5e>
 d80:	00000f6c 	.word	0x00000f6c
 d84:	20000000 	.word	0x20000000
 d88:	2000000c 	.word	0x2000000c
 d8c:	20000004 	.word	0x20000004
 d90:	2000000c 	.word	0x2000000c
 d94:	20000044 	.word	0x20000044
 d98:	e000ed00 	.word	0xe000ed00
 d9c:	00000000 	.word	0x00000000
 da0:	00000ec1 	.word	0x00000ec1
 da4:	000006cd 	.word	0x000006cd

00000da8 <__udivsi3>:
 da8:	2200      	movs	r2, #0
 daa:	0843      	lsrs	r3, r0, #1
 dac:	428b      	cmp	r3, r1
 dae:	d374      	bcc.n	e9a <__udivsi3+0xf2>
 db0:	0903      	lsrs	r3, r0, #4
 db2:	428b      	cmp	r3, r1
 db4:	d35f      	bcc.n	e76 <__udivsi3+0xce>
 db6:	0a03      	lsrs	r3, r0, #8
 db8:	428b      	cmp	r3, r1
 dba:	d344      	bcc.n	e46 <__udivsi3+0x9e>
 dbc:	0b03      	lsrs	r3, r0, #12
 dbe:	428b      	cmp	r3, r1
 dc0:	d328      	bcc.n	e14 <__udivsi3+0x6c>
 dc2:	0c03      	lsrs	r3, r0, #16
 dc4:	428b      	cmp	r3, r1
 dc6:	d30d      	bcc.n	de4 <__udivsi3+0x3c>
 dc8:	22ff      	movs	r2, #255	; 0xff
 dca:	0209      	lsls	r1, r1, #8
 dcc:	ba12      	rev	r2, r2
 dce:	0c03      	lsrs	r3, r0, #16
 dd0:	428b      	cmp	r3, r1
 dd2:	d302      	bcc.n	dda <__udivsi3+0x32>
 dd4:	1212      	asrs	r2, r2, #8
 dd6:	0209      	lsls	r1, r1, #8
 dd8:	d065      	beq.n	ea6 <__udivsi3+0xfe>
 dda:	0b03      	lsrs	r3, r0, #12
 ddc:	428b      	cmp	r3, r1
 dde:	d319      	bcc.n	e14 <__udivsi3+0x6c>
 de0:	e000      	b.n	de4 <__udivsi3+0x3c>
 de2:	0a09      	lsrs	r1, r1, #8
 de4:	0bc3      	lsrs	r3, r0, #15
 de6:	428b      	cmp	r3, r1
 de8:	d301      	bcc.n	dee <__udivsi3+0x46>
 dea:	03cb      	lsls	r3, r1, #15
 dec:	1ac0      	subs	r0, r0, r3
 dee:	4152      	adcs	r2, r2
 df0:	0b83      	lsrs	r3, r0, #14
 df2:	428b      	cmp	r3, r1
 df4:	d301      	bcc.n	dfa <__udivsi3+0x52>
 df6:	038b      	lsls	r3, r1, #14
 df8:	1ac0      	subs	r0, r0, r3
 dfa:	4152      	adcs	r2, r2
 dfc:	0b43      	lsrs	r3, r0, #13
 dfe:	428b      	cmp	r3, r1
 e00:	d301      	bcc.n	e06 <__udivsi3+0x5e>
 e02:	034b      	lsls	r3, r1, #13
 e04:	1ac0      	subs	r0, r0, r3
 e06:	4152      	adcs	r2, r2
 e08:	0b03      	lsrs	r3, r0, #12
 e0a:	428b      	cmp	r3, r1
 e0c:	d301      	bcc.n	e12 <__udivsi3+0x6a>
 e0e:	030b      	lsls	r3, r1, #12
 e10:	1ac0      	subs	r0, r0, r3
 e12:	4152      	adcs	r2, r2
 e14:	0ac3      	lsrs	r3, r0, #11
 e16:	428b      	cmp	r3, r1
 e18:	d301      	bcc.n	e1e <__udivsi3+0x76>
 e1a:	02cb      	lsls	r3, r1, #11
 e1c:	1ac0      	subs	r0, r0, r3
 e1e:	4152      	adcs	r2, r2
 e20:	0a83      	lsrs	r3, r0, #10
 e22:	428b      	cmp	r3, r1
 e24:	d301      	bcc.n	e2a <__udivsi3+0x82>
 e26:	028b      	lsls	r3, r1, #10
 e28:	1ac0      	subs	r0, r0, r3
 e2a:	4152      	adcs	r2, r2
 e2c:	0a43      	lsrs	r3, r0, #9
 e2e:	428b      	cmp	r3, r1
 e30:	d301      	bcc.n	e36 <__udivsi3+0x8e>
 e32:	024b      	lsls	r3, r1, #9
 e34:	1ac0      	subs	r0, r0, r3
 e36:	4152      	adcs	r2, r2
 e38:	0a03      	lsrs	r3, r0, #8
 e3a:	428b      	cmp	r3, r1
 e3c:	d301      	bcc.n	e42 <__udivsi3+0x9a>
 e3e:	020b      	lsls	r3, r1, #8
 e40:	1ac0      	subs	r0, r0, r3
 e42:	4152      	adcs	r2, r2
 e44:	d2cd      	bcs.n	de2 <__udivsi3+0x3a>
 e46:	09c3      	lsrs	r3, r0, #7
 e48:	428b      	cmp	r3, r1
 e4a:	d301      	bcc.n	e50 <__udivsi3+0xa8>
 e4c:	01cb      	lsls	r3, r1, #7
 e4e:	1ac0      	subs	r0, r0, r3
 e50:	4152      	adcs	r2, r2
 e52:	0983      	lsrs	r3, r0, #6
 e54:	428b      	cmp	r3, r1
 e56:	d301      	bcc.n	e5c <__udivsi3+0xb4>
 e58:	018b      	lsls	r3, r1, #6
 e5a:	1ac0      	subs	r0, r0, r3
 e5c:	4152      	adcs	r2, r2
 e5e:	0943      	lsrs	r3, r0, #5
 e60:	428b      	cmp	r3, r1
 e62:	d301      	bcc.n	e68 <__udivsi3+0xc0>
 e64:	014b      	lsls	r3, r1, #5
 e66:	1ac0      	subs	r0, r0, r3
 e68:	4152      	adcs	r2, r2
 e6a:	0903      	lsrs	r3, r0, #4
 e6c:	428b      	cmp	r3, r1
 e6e:	d301      	bcc.n	e74 <__udivsi3+0xcc>
 e70:	010b      	lsls	r3, r1, #4
 e72:	1ac0      	subs	r0, r0, r3
 e74:	4152      	adcs	r2, r2
 e76:	08c3      	lsrs	r3, r0, #3
 e78:	428b      	cmp	r3, r1
 e7a:	d301      	bcc.n	e80 <__udivsi3+0xd8>
 e7c:	00cb      	lsls	r3, r1, #3
 e7e:	1ac0      	subs	r0, r0, r3
 e80:	4152      	adcs	r2, r2
 e82:	0883      	lsrs	r3, r0, #2
 e84:	428b      	cmp	r3, r1
 e86:	d301      	bcc.n	e8c <__udivsi3+0xe4>
 e88:	008b      	lsls	r3, r1, #2
 e8a:	1ac0      	subs	r0, r0, r3
 e8c:	4152      	adcs	r2, r2
 e8e:	0843      	lsrs	r3, r0, #1
 e90:	428b      	cmp	r3, r1
 e92:	d301      	bcc.n	e98 <__udivsi3+0xf0>
 e94:	004b      	lsls	r3, r1, #1
 e96:	1ac0      	subs	r0, r0, r3
 e98:	4152      	adcs	r2, r2
 e9a:	1a41      	subs	r1, r0, r1
 e9c:	d200      	bcs.n	ea0 <__udivsi3+0xf8>
 e9e:	4601      	mov	r1, r0
 ea0:	4152      	adcs	r2, r2
 ea2:	4610      	mov	r0, r2
 ea4:	4770      	bx	lr
 ea6:	e7ff      	b.n	ea8 <__udivsi3+0x100>
 ea8:	b501      	push	{r0, lr}
 eaa:	2000      	movs	r0, #0
 eac:	f000 f806 	bl	ebc <__aeabi_idiv0>
 eb0:	bd02      	pop	{r1, pc}
 eb2:	46c0      	nop			; (mov r8, r8)

00000eb4 <__aeabi_uidivmod>:
 eb4:	2900      	cmp	r1, #0
 eb6:	d0f7      	beq.n	ea8 <__udivsi3+0x100>
 eb8:	e776      	b.n	da8 <__udivsi3>
 eba:	4770      	bx	lr

00000ebc <__aeabi_idiv0>:
 ebc:	4770      	bx	lr
 ebe:	46c0      	nop			; (mov r8, r8)

00000ec0 <__libc_init_array>:
 ec0:	b570      	push	{r4, r5, r6, lr}
 ec2:	2600      	movs	r6, #0
 ec4:	4d0c      	ldr	r5, [pc, #48]	; (ef8 <__libc_init_array+0x38>)
 ec6:	4c0d      	ldr	r4, [pc, #52]	; (efc <__libc_init_array+0x3c>)
 ec8:	1b64      	subs	r4, r4, r5
 eca:	10a4      	asrs	r4, r4, #2
 ecc:	42a6      	cmp	r6, r4
 ece:	d109      	bne.n	ee4 <__libc_init_array+0x24>
 ed0:	2600      	movs	r6, #0
 ed2:	f000 f83b 	bl	f4c <_init>
 ed6:	4d0a      	ldr	r5, [pc, #40]	; (f00 <__libc_init_array+0x40>)
 ed8:	4c0a      	ldr	r4, [pc, #40]	; (f04 <__libc_init_array+0x44>)
 eda:	1b64      	subs	r4, r4, r5
 edc:	10a4      	asrs	r4, r4, #2
 ede:	42a6      	cmp	r6, r4
 ee0:	d105      	bne.n	eee <__libc_init_array+0x2e>
 ee2:	bd70      	pop	{r4, r5, r6, pc}
 ee4:	00b3      	lsls	r3, r6, #2
 ee6:	58eb      	ldr	r3, [r5, r3]
 ee8:	4798      	blx	r3
 eea:	3601      	adds	r6, #1
 eec:	e7ee      	b.n	ecc <__libc_init_array+0xc>
 eee:	00b3      	lsls	r3, r6, #2
 ef0:	58eb      	ldr	r3, [r5, r3]
 ef2:	4798      	blx	r3
 ef4:	3601      	adds	r6, #1
 ef6:	e7f2      	b.n	ede <__libc_init_array+0x1e>
 ef8:	00000f58 	.word	0x00000f58
 efc:	00000f58 	.word	0x00000f58
 f00:	00000f58 	.word	0x00000f58
 f04:	00000f5c 	.word	0x00000f5c

00000f08 <_tcc_apbcmasks>:
 f08:	00000200 00000400 00000800              ............

00000f14 <_tcc_cc_nums>:
 f14:	00020204                                ....

00000f18 <_tcc_gclk_ids>:
 f18:	001d1c1c                                ....

00000f1c <_tcc_maxs>:
 f1c:	00ffffff 00ffffff 0000ffff              ............

00000f28 <_tcc_ow_nums>:
 f28:	00020408 0000095a 00000956 00000956     ....Z...V...V...
 f38:	00000988 00000988 00000972 00000960     ........r...`...
 f48:	00000978                                x...

00000f4c <_init>:
 f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 f4e:	46c0      	nop			; (mov r8, r8)
 f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 f52:	bc08      	pop	{r3}
 f54:	469e      	mov	lr, r3
 f56:	4770      	bx	lr

00000f58 <__init_array_start>:
 f58:	000000e5 	.word	0x000000e5

00000f5c <_fini>:
 f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 f5e:	46c0      	nop			; (mov r8, r8)
 f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 f62:	bc08      	pop	{r3}
 f64:	469e      	mov	lr, r3
 f66:	4770      	bx	lr

00000f68 <__fini_array_start>:
 f68:	000000bd 	.word	0x000000bd
