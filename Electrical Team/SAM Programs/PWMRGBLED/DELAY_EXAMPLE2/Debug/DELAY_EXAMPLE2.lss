
DELAY_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a48  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  2000000c  00001a54  0002000c  2**2
                  ALLOC
  3 .stack        00002004  2000006c  00001ab4  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001bece  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002db9  00000000  00000000  0003bf5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000045f0  00000000  00000000  0003ed14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003e0  00000000  00000000  00043304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000590  00000000  00000000  000436e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e07f  00000000  00000000  00043c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a30a  00000000  00000000  00061cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a0678  00000000  00000000  0006bffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000940  00000000  00000000  0010c678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 20 00 20 99 16 00 00 95 16 00 00 95 16 00 00     p . ............
	...
      2c:	95 16 00 00 00 00 00 00 00 00 00 00 95 16 00 00     ................
      3c:	95 16 00 00 95 16 00 00 95 16 00 00 95 16 00 00     ................
      4c:	95 16 00 00 95 16 00 00 95 16 00 00 95 16 00 00     ................
      5c:	95 16 00 00 95 16 00 00 95 16 00 00 95 16 00 00     ................
      6c:	95 16 00 00 95 16 00 00 95 16 00 00 95 16 00 00     ................
      7c:	95 16 00 00 95 16 00 00 95 16 00 00 95 16 00 00     ................
      8c:	95 16 00 00 95 16 00 00 95 16 00 00 95 16 00 00     ................
      9c:	95 16 00 00 95 16 00 00 41 07 00 00 51 07 00 00     ........A...Q...
      ac:	95 16 00 00 95 16 00 00 95 16 00 00 95 16 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	2000000c 	.word	0x2000000c
      dc:	00000000 	.word	0x00000000
      e0:	00001a48 	.word	0x00001a48

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000010 	.word	0x20000010
     110:	00001a48 	.word	0x00001a48
     114:	00001a48 	.word	0x00001a48
     118:	00000000 	.word	0x00000000

0000011c <_adc_get_inst_index>:
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
     11c:	4b06      	ldr	r3, [pc, #24]	; (138 <_adc_get_inst_index+0x1c>)
     11e:	4298      	cmp	r0, r3
     120:	d008      	beq.n	134 <_adc_get_inst_index+0x18>
     122:	4a06      	ldr	r2, [pc, #24]	; (13c <_adc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     124:	2300      	movs	r3, #0
		if (hw == adc_modules[i]) {
     126:	4290      	cmp	r0, r2
     128:	d001      	beq.n	12e <_adc_get_inst_index+0x12>
}
     12a:	0018      	movs	r0, r3
     12c:	4770      	bx	lr
     12e:	3301      	adds	r3, #1
			return i;
     130:	b2db      	uxtb	r3, r3
     132:	e7fa      	b.n	12a <_adc_get_inst_index+0xe>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     134:	2300      	movs	r3, #0
     136:	e7fb      	b.n	130 <_adc_get_inst_index+0x14>
     138:	42004400 	.word	0x42004400
     13c:	42004800 	.word	0x42004800

00000140 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     140:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     142:	2300      	movs	r3, #0
     144:	2200      	movs	r2, #0
     146:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     148:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     14a:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     14c:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     14e:	2100      	movs	r1, #0
     150:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     152:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     154:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     156:	2401      	movs	r4, #1
     158:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     15a:	24c0      	movs	r4, #192	; 0xc0
     15c:	0164      	lsls	r4, r4, #5
     15e:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     160:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     162:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     164:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     166:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     168:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     16a:	242a      	movs	r4, #42	; 0x2a
     16c:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     16e:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     170:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     172:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     174:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     176:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     178:	3c06      	subs	r4, #6
     17a:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     17c:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     17e:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     180:	7541      	strb	r1, [r0, #21]
}
     182:	bd10      	pop	{r4, pc}

00000184 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     184:	b5f0      	push	{r4, r5, r6, r7, lr}
     186:	46de      	mov	lr, fp
     188:	4657      	mov	r7, sl
     18a:	464e      	mov	r6, r9
     18c:	4645      	mov	r5, r8
     18e:	b5e0      	push	{r5, r6, r7, lr}
     190:	b09f      	sub	sp, #124	; 0x7c
     192:	0005      	movs	r5, r0
     194:	000e      	movs	r6, r1
     196:	0017      	movs	r7, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     198:	0008      	movs	r0, r1
     19a:	4b98      	ldr	r3, [pc, #608]	; (3fc <adc_init+0x278>)
     19c:	4798      	blx	r3
     19e:	0004      	movs	r4, r0
     1a0:	9001      	str	r0, [sp, #4]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1a2:	602e      	str	r6, [r5, #0]
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     1a4:	4a96      	ldr	r2, [pc, #600]	; (400 <adc_init+0x27c>)
     1a6:	69d3      	ldr	r3, [r2, #28]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
     1a8:	0080      	lsls	r0, r0, #2
     1aa:	4996      	ldr	r1, [pc, #600]	; (404 <adc_init+0x280>)
     1ac:	5841      	ldr	r1, [r0, r1]
     1ae:	430b      	orrs	r3, r1
     1b0:	61d3      	str	r3, [r2, #28]
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1b2:	7833      	ldrb	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1b4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1b6:	07db      	lsls	r3, r3, #31
     1b8:	d506      	bpl.n	1c8 <adc_init+0x44>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     1ba:	b01f      	add	sp, #124	; 0x7c
     1bc:	bc3c      	pop	{r2, r3, r4, r5}
     1be:	4690      	mov	r8, r2
     1c0:	4699      	mov	r9, r3
     1c2:	46a2      	mov	sl, r4
     1c4:	46ab      	mov	fp, r5
     1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1c8:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     1ca:	8c13      	ldrh	r3, [r2, #32]
     1cc:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     1ce:	2b00      	cmp	r3, #0
     1d0:	d1fb      	bne.n	1ca <adc_init+0x46>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d2:	7833      	ldrb	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     1d4:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d6:	079b      	lsls	r3, r3, #30
     1d8:	d4ef      	bmi.n	1ba <adc_init+0x36>
	module_inst->reference = config->reference;
     1da:	787b      	ldrb	r3, [r7, #1]
     1dc:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     1de:	2b00      	cmp	r3, #0
     1e0:	d104      	bne.n	1ec <adc_init+0x68>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1e2:	4a89      	ldr	r2, [pc, #548]	; (408 <adc_init+0x284>)
     1e4:	69d3      	ldr	r3, [r2, #28]
     1e6:	2104      	movs	r1, #4
     1e8:	430b      	orrs	r3, r1
     1ea:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     1ec:	2300      	movs	r3, #0
     1ee:	60ab      	str	r3, [r5, #8]
     1f0:	60eb      	str	r3, [r5, #12]
     1f2:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     1f4:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     1f6:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     1f8:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     1fa:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     1fc:	00a3      	lsls	r3, r4, #2
     1fe:	4a83      	ldr	r2, [pc, #524]	; (40c <adc_init+0x288>)
     200:	509d      	str	r5, [r3, r2]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     202:	232a      	movs	r3, #42	; 0x2a
     204:	5cfb      	ldrb	r3, [r7, r3]
     206:	2b00      	cmp	r3, #0
     208:	d105      	bne.n	216 <adc_init+0x92>
     20a:	7b3b      	ldrb	r3, [r7, #12]
     20c:	2b00      	cmp	r3, #0
     20e:	d102      	bne.n	216 <adc_init+0x92>
		module_inst->software_trigger = true;
     210:	3301      	adds	r3, #1
     212:	776b      	strb	r3, [r5, #29]
     214:	e001      	b.n	21a <adc_init+0x96>
		module_inst->software_trigger = false;
     216:	2300      	movs	r3, #0
     218:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     21a:	682b      	ldr	r3, [r5, #0]
     21c:	469a      	mov	sl, r3
	gclk_chan_conf.source_generator = config->clock_source;
     21e:	783b      	ldrb	r3, [r7, #0]
     220:	aa04      	add	r2, sp, #16
     222:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     224:	4b7a      	ldr	r3, [pc, #488]	; (410 <adc_init+0x28c>)
     226:	5d1e      	ldrb	r6, [r3, r4]
     228:	0011      	movs	r1, r2
     22a:	0030      	movs	r0, r6
     22c:	4b79      	ldr	r3, [pc, #484]	; (414 <adc_init+0x290>)
     22e:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     230:	0030      	movs	r0, r6
     232:	4b79      	ldr	r3, [pc, #484]	; (418 <adc_init+0x294>)
     234:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     236:	793b      	ldrb	r3, [r7, #4]
     238:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     23a:	ae06      	add	r6, sp, #24
     23c:	4b77      	ldr	r3, [pc, #476]	; (41c <adc_init+0x298>)
     23e:	469c      	mov	ip, r3
     240:	0032      	movs	r2, r6
     242:	0019      	movs	r1, r3
     244:	c949      	ldmia	r1!, {r0, r3, r6}
     246:	c249      	stmia	r2!, {r0, r3, r6}
     248:	c949      	ldmia	r1!, {r0, r3, r6}
     24a:	c249      	stmia	r2!, {r0, r3, r6}
     24c:	c949      	ldmia	r1!, {r0, r3, r6}
     24e:	c249      	stmia	r2!, {r0, r3, r6}
     250:	c949      	ldmia	r1!, {r0, r3, r6}
     252:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     254:	a912      	add	r1, sp, #72	; 0x48
     256:	4663      	mov	r3, ip
     258:	3330      	adds	r3, #48	; 0x30
     25a:	000a      	movs	r2, r1
     25c:	cb43      	ldmia	r3!, {r0, r1, r6}
     25e:	c243      	stmia	r2!, {r0, r1, r6}
     260:	cb43      	ldmia	r3!, {r0, r1, r6}
     262:	c243      	stmia	r2!, {r0, r1, r6}
     264:	cb43      	ldmia	r3!, {r0, r1, r6}
     266:	c243      	stmia	r2!, {r0, r1, r6}
     268:	cb43      	ldmia	r3!, {r0, r1, r6}
     26a:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     26c:	9b01      	ldr	r3, [sp, #4]
     26e:	2b00      	cmp	r3, #0
     270:	d004      	beq.n	27c <adc_init+0xf8>
		pinmapping = pinmapping1;
     272:	a912      	add	r1, sp, #72	; 0x48
	switch(index) {
     274:	2b01      	cmp	r3, #1
     276:	d002      	beq.n	27e <adc_init+0xfa>
	const uint32_t *pinmapping = NULL;;
     278:	2100      	movs	r1, #0
     27a:	e000      	b.n	27e <adc_init+0xfa>
		pinmapping = pinmapping0;
     27c:	a906      	add	r1, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     27e:	00a3      	lsls	r3, r4, #2
     280:	4a67      	ldr	r2, [pc, #412]	; (420 <adc_init+0x29c>)
     282:	589b      	ldr	r3, [r3, r2]
     284:	469b      	mov	fp, r3
     286:	4598      	cmp	r8, r3
     288:	d922      	bls.n	2d0 <adc_init+0x14c>
	_adc_configure_ain_pin(index, config->negative_input);
     28a:	88fb      	ldrh	r3, [r7, #6]
     28c:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     28e:	ae06      	add	r6, sp, #24
     290:	4b62      	ldr	r3, [pc, #392]	; (41c <adc_init+0x298>)
     292:	469c      	mov	ip, r3
     294:	0032      	movs	r2, r6
     296:	0019      	movs	r1, r3
     298:	c949      	ldmia	r1!, {r0, r3, r6}
     29a:	c249      	stmia	r2!, {r0, r3, r6}
     29c:	c949      	ldmia	r1!, {r0, r3, r6}
     29e:	c249      	stmia	r2!, {r0, r3, r6}
     2a0:	c949      	ldmia	r1!, {r0, r3, r6}
     2a2:	c249      	stmia	r2!, {r0, r3, r6}
     2a4:	c949      	ldmia	r1!, {r0, r3, r6}
     2a6:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     2a8:	a912      	add	r1, sp, #72	; 0x48
     2aa:	4663      	mov	r3, ip
     2ac:	3330      	adds	r3, #48	; 0x30
     2ae:	000a      	movs	r2, r1
     2b0:	cb43      	ldmia	r3!, {r0, r1, r6}
     2b2:	c243      	stmia	r2!, {r0, r1, r6}
     2b4:	cb43      	ldmia	r3!, {r0, r1, r6}
     2b6:	c243      	stmia	r2!, {r0, r1, r6}
     2b8:	cb43      	ldmia	r3!, {r0, r1, r6}
     2ba:	c243      	stmia	r2!, {r0, r1, r6}
     2bc:	cb43      	ldmia	r3!, {r0, r1, r6}
     2be:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     2c0:	9a01      	ldr	r2, [sp, #4]
     2c2:	2a00      	cmp	r2, #0
     2c4:	d012      	beq.n	2ec <adc_init+0x168>
		pinmapping = pinmapping1;
     2c6:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     2c8:	2a01      	cmp	r2, #1
     2ca:	d010      	beq.n	2ee <adc_init+0x16a>
	const uint32_t *pinmapping = NULL;;
     2cc:	2300      	movs	r3, #0
     2ce:	e00e      	b.n	2ee <adc_init+0x16a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2d0:	4643      	mov	r3, r8
     2d2:	0098      	lsls	r0, r3, #2
     2d4:	5840      	ldr	r0, [r0, r1]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d6:	a905      	add	r1, sp, #20
     2d8:	2300      	movs	r3, #0
     2da:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2dc:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2de:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2e0:	3301      	adds	r3, #1
     2e2:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2e4:	b2c0      	uxtb	r0, r0
     2e6:	4b4f      	ldr	r3, [pc, #316]	; (424 <adc_init+0x2a0>)
     2e8:	4798      	blx	r3
     2ea:	e7ce      	b.n	28a <adc_init+0x106>
		pinmapping = pinmapping0;
     2ec:	ab06      	add	r3, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     2ee:	45d8      	cmp	r8, fp
     2f0:	d90a      	bls.n	308 <adc_init+0x184>
     2f2:	2100      	movs	r1, #0
     2f4:	2600      	movs	r6, #0
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     2f6:	2301      	movs	r3, #1
     2f8:	4699      	mov	r9, r3
	const uint32_t pinmapping0[] = {
     2fa:	4b48      	ldr	r3, [pc, #288]	; (41c <adc_init+0x298>)
     2fc:	4698      	mov	r8, r3
		system_pinmux_pin_set_config(pin_map_result, &config);
     2fe:	9403      	str	r4, [sp, #12]
     300:	465b      	mov	r3, fp
     302:	9302      	str	r3, [sp, #8]
     304:	46ab      	mov	fp, r5
     306:	e020      	b.n	34a <adc_init+0x1c6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     308:	4642      	mov	r2, r8
     30a:	0090      	lsls	r0, r2, #2
     30c:	58c0      	ldr	r0, [r0, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     30e:	a905      	add	r1, sp, #20
     310:	2300      	movs	r3, #0
     312:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     314:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     316:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     318:	3301      	adds	r3, #1
     31a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     31c:	b2c0      	uxtb	r0, r0
     31e:	4b41      	ldr	r3, [pc, #260]	; (424 <adc_init+0x2a0>)
     320:	4798      	blx	r3
     322:	e7e6      	b.n	2f2 <adc_init+0x16e>
		pinmapping = pinmapping0;
     324:	ab06      	add	r3, sp, #24
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     326:	0089      	lsls	r1, r1, #2
     328:	58c8      	ldr	r0, [r1, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     32a:	a905      	add	r1, sp, #20
     32c:	2300      	movs	r3, #0
     32e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     330:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     332:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     334:	464b      	mov	r3, r9
     336:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     338:	b2c0      	uxtb	r0, r0
     33a:	4b3a      	ldr	r3, [pc, #232]	; (424 <adc_init+0x2a0>)
     33c:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     33e:	3601      	adds	r6, #1
     340:	b2f6      	uxtb	r6, r6
     342:	0031      	movs	r1, r6
     344:	9b02      	ldr	r3, [sp, #8]
     346:	429e      	cmp	r6, r3
     348:	d823      	bhi.n	392 <adc_init+0x20e>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     34a:	464b      	mov	r3, r9
     34c:	40b3      	lsls	r3, r6
     34e:	693a      	ldr	r2, [r7, #16]
     350:	421a      	tst	r2, r3
     352:	d0f4      	beq.n	33e <adc_init+0x1ba>
	const uint32_t pinmapping0[] = {
     354:	a806      	add	r0, sp, #24
     356:	0003      	movs	r3, r0
     358:	4642      	mov	r2, r8
     35a:	ca31      	ldmia	r2!, {r0, r4, r5}
     35c:	c331      	stmia	r3!, {r0, r4, r5}
     35e:	ca31      	ldmia	r2!, {r0, r4, r5}
     360:	c331      	stmia	r3!, {r0, r4, r5}
     362:	ca31      	ldmia	r2!, {r0, r4, r5}
     364:	c331      	stmia	r3!, {r0, r4, r5}
     366:	ca31      	ldmia	r2!, {r0, r4, r5}
     368:	c331      	stmia	r3!, {r0, r4, r5}
	const uint32_t pinmapping1[] = {
     36a:	a812      	add	r0, sp, #72	; 0x48
     36c:	4643      	mov	r3, r8
     36e:	3330      	adds	r3, #48	; 0x30
     370:	0002      	movs	r2, r0
     372:	cb31      	ldmia	r3!, {r0, r4, r5}
     374:	c231      	stmia	r2!, {r0, r4, r5}
     376:	cb31      	ldmia	r3!, {r0, r4, r5}
     378:	c231      	stmia	r2!, {r0, r4, r5}
     37a:	cb31      	ldmia	r3!, {r0, r4, r5}
     37c:	c231      	stmia	r2!, {r0, r4, r5}
     37e:	cb31      	ldmia	r3!, {r0, r4, r5}
     380:	c231      	stmia	r2!, {r0, r4, r5}
	switch(index) {
     382:	9a01      	ldr	r2, [sp, #4]
     384:	2a00      	cmp	r2, #0
     386:	d0cd      	beq.n	324 <adc_init+0x1a0>
		pinmapping = pinmapping1;
     388:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     38a:	2a01      	cmp	r2, #1
     38c:	d0cb      	beq.n	326 <adc_init+0x1a2>
	const uint32_t *pinmapping = NULL;;
     38e:	2300      	movs	r3, #0
     390:	e7c9      	b.n	326 <adc_init+0x1a2>
     392:	465d      	mov	r5, fp
     394:	9c03      	ldr	r4, [sp, #12]
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     396:	7b7b      	ldrb	r3, [r7, #13]
     398:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     39a:	7bba      	ldrb	r2, [r7, #14]
     39c:	01d2      	lsls	r2, r2, #7
     39e:	4313      	orrs	r3, r2
     3a0:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     3a2:	4652      	mov	r2, sl
     3a4:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     3a6:	7d3b      	ldrb	r3, [r7, #20]
     3a8:	01db      	lsls	r3, r3, #7
			| (config->reference);
     3aa:	787a      	ldrb	r2, [r7, #1]
     3ac:	4313      	orrs	r3, r2
     3ae:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     3b0:	4652      	mov	r2, sl
     3b2:	7093      	strb	r3, [r2, #2]
	switch (config->resolution) {
     3b4:	78fb      	ldrb	r3, [r7, #3]
     3b6:	2b34      	cmp	r3, #52	; 0x34
     3b8:	d900      	bls.n	3bc <adc_init+0x238>
     3ba:	e14f      	b.n	65c <adc_init+0x4d8>
     3bc:	009b      	lsls	r3, r3, #2
     3be:	4a1a      	ldr	r2, [pc, #104]	; (428 <adc_init+0x2a4>)
     3c0:	58d3      	ldr	r3, [r2, r3]
     3c2:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     3c4:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     3c6:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_4;
     3c8:	2102      	movs	r1, #2
     3ca:	e032      	b.n	432 <adc_init+0x2ae>
		adjres = config->divide_result;
     3cc:	7a79      	ldrb	r1, [r7, #9]
		accumulate = config->accumulate_samples;
     3ce:	7a3a      	ldrb	r2, [r7, #8]
		resolution = ADC_RESOLUTION_16BIT;
     3d0:	2610      	movs	r6, #16
     3d2:	e02e      	b.n	432 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     3d4:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     3d6:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3d8:	2101      	movs	r1, #1
     3da:	e02a      	b.n	432 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     3dc:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     3de:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     3e0:	2100      	movs	r1, #0
     3e2:	e026      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3e4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     3e6:	2630      	movs	r6, #48	; 0x30
	uint8_t adjres = 0;
     3e8:	2100      	movs	r1, #0
     3ea:	e022      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ec:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     3ee:	2620      	movs	r6, #32
	uint8_t adjres = 0;
     3f0:	2100      	movs	r1, #0
     3f2:	e01e      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3f4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     3f6:	2600      	movs	r6, #0
	uint8_t adjres = 0;
     3f8:	2100      	movs	r1, #0
     3fa:	e01a      	b.n	432 <adc_init+0x2ae>
     3fc:	0000011d 	.word	0x0000011d
     400:	40000800 	.word	0x40000800
     404:	000019b4 	.word	0x000019b4
     408:	40001800 	.word	0x40001800
     40c:	2000003c 	.word	0x2000003c
     410:	000019dc 	.word	0x000019dc
     414:	0000156d 	.word	0x0000156d
     418:	000014fd 	.word	0x000014fd
     41c:	00001954 	.word	0x00001954
     420:	000019d4 	.word	0x000019d4
     424:	00001639 	.word	0x00001639
     428:	00001880 	.word	0x00001880
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     42c:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     42e:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     430:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     432:	0109      	lsls	r1, r1, #4
     434:	2370      	movs	r3, #112	; 0x70
     436:	400b      	ands	r3, r1
     438:	4313      	orrs	r3, r2
     43a:	4652      	mov	r2, sl
     43c:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     43e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     440:	8c13      	ldrh	r3, [r2, #32]
     442:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     444:	2b00      	cmp	r3, #0
     446:	d1fb      	bne.n	440 <adc_init+0x2bc>
	if (config->sample_length > 63) {
     448:	7d7b      	ldrb	r3, [r7, #21]
		return STATUS_ERR_INVALID_ARG;
     44a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     44c:	2b3f      	cmp	r3, #63	; 0x3f
     44e:	d900      	bls.n	452 <adc_init+0x2ce>
     450:	e6b3      	b.n	1ba <adc_init+0x36>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     452:	7bfa      	ldrb	r2, [r7, #15]
     454:	01d2      	lsls	r2, r2, #7
     456:	4313      	orrs	r3, r2
     458:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
     45a:	4652      	mov	r2, sl
     45c:	7353      	strb	r3, [r2, #13]
	Adc *const adc_module = module_inst->hw;
     45e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     460:	8c13      	ldrh	r3, [r2, #32]
     462:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     464:	2b00      	cmp	r3, #0
     466:	d1fb      	bne.n	460 <adc_init+0x2dc>
			config->clock_prescaler;
     468:	78bb      	ldrb	r3, [r7, #2]
	adc_module->CTRLB.reg =
     46a:	4652      	mov	r2, sl
     46c:	7053      	strb	r3, [r2, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     46e:	2324      	movs	r3, #36	; 0x24
     470:	5cfb      	ldrb	r3, [r7, r3]
     472:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     474:	7b3a      	ldrb	r2, [r7, #12]
     476:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     478:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     47a:	7afb      	ldrb	r3, [r7, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     47c:	4313      	orrs	r3, r2
     47e:	7aba      	ldrb	r2, [r7, #10]
     480:	0052      	lsls	r2, r2, #1
     482:	4313      	orrs	r3, r2
     484:	4333      	orrs	r3, r6
	adc_module->CTRLC.reg =
     486:	4652      	mov	r2, sl
     488:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     48a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     48c:	8c13      	ldrh	r3, [r2, #32]
     48e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     490:	2b00      	cmp	r3, #0
     492:	d1fb      	bne.n	48c <adc_init+0x308>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     494:	8b3b      	ldrh	r3, [r7, #24]
     496:	2b00      	cmp	r3, #0
     498:	d020      	beq.n	4dc <adc_init+0x358>
		switch (resolution) {
     49a:	2e10      	cmp	r6, #16
     49c:	d100      	bne.n	4a0 <adc_init+0x31c>
     49e:	e0bf      	b.n	620 <adc_init+0x49c>
     4a0:	d800      	bhi.n	4a4 <adc_init+0x320>
     4a2:	e07f      	b.n	5a4 <adc_init+0x420>
     4a4:	2e20      	cmp	r6, #32
     4a6:	d100      	bne.n	4aa <adc_init+0x326>
     4a8:	e09c      	b.n	5e4 <adc_init+0x460>
     4aa:	2e30      	cmp	r6, #48	; 0x30
     4ac:	d116      	bne.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     4ae:	7afa      	ldrb	r2, [r7, #11]
     4b0:	2a00      	cmp	r2, #0
     4b2:	d00a      	beq.n	4ca <adc_init+0x346>
					(config->window.window_lower_value > 127 ||
     4b4:	69fa      	ldr	r2, [r7, #28]
     4b6:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4b8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4ba:	2aff      	cmp	r2, #255	; 0xff
     4bc:	d900      	bls.n	4c0 <adc_init+0x33c>
     4be:	e67c      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -128 ||
     4c0:	6a3a      	ldr	r2, [r7, #32]
     4c2:	3280      	adds	r2, #128	; 0x80
     4c4:	2aff      	cmp	r2, #255	; 0xff
     4c6:	d900      	bls.n	4ca <adc_init+0x346>
     4c8:	e677      	b.n	1ba <adc_init+0x36>
				return STATUS_ERR_INVALID_ARG;
     4ca:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4cc:	69fa      	ldr	r2, [r7, #28]
     4ce:	2aff      	cmp	r2, #255	; 0xff
     4d0:	dd00      	ble.n	4d4 <adc_init+0x350>
     4d2:	e672      	b.n	1ba <adc_init+0x36>
     4d4:	6a3a      	ldr	r2, [r7, #32]
     4d6:	2aff      	cmp	r2, #255	; 0xff
     4d8:	dd00      	ble.n	4dc <adc_init+0x358>
     4da:	e66e      	b.n	1ba <adc_init+0x36>
	adc_module->CTRLC.reg |= config->window.window_mode;
     4dc:	4652      	mov	r2, sl
     4de:	8952      	ldrh	r2, [r2, #10]
     4e0:	4313      	orrs	r3, r2
     4e2:	4652      	mov	r2, sl
     4e4:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     4e6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4e8:	8c13      	ldrh	r3, [r2, #32]
     4ea:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4ec:	2b00      	cmp	r3, #0
     4ee:	d1fb      	bne.n	4e8 <adc_init+0x364>
	adc_module->WINLT.reg =
     4f0:	8bbb      	ldrh	r3, [r7, #28]
     4f2:	4652      	mov	r2, sl
     4f4:	81d3      	strh	r3, [r2, #14]
	Adc *const adc_module = module_inst->hw;
     4f6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4f8:	8c13      	ldrh	r3, [r2, #32]
     4fa:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4fc:	2b00      	cmp	r3, #0
     4fe:	d1fb      	bne.n	4f8 <adc_init+0x374>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     500:	8c3b      	ldrh	r3, [r7, #32]
     502:	4652      	mov	r2, sl
     504:	8213      	strh	r3, [r2, #16]
	Adc *const adc_module = module_inst->hw;
     506:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     508:	8c13      	ldrh	r3, [r2, #32]
     50a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     50c:	2b00      	cmp	r3, #0
     50e:	d1fb      	bne.n	508 <adc_init+0x384>
			config->positive_input;
     510:	793b      	ldrb	r3, [r7, #4]
			config->negative_input |
     512:	88fa      	ldrh	r2, [r7, #6]
     514:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     516:	4652      	mov	r2, sl
     518:	8113      	strh	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     51a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     51c:	8c13      	ldrh	r3, [r2, #32]
     51e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     520:	2b00      	cmp	r3, #0
     522:	d1fb      	bne.n	51c <adc_init+0x398>
	adc_module->EVCTRL.reg = config->event_action;
     524:	332a      	adds	r3, #42	; 0x2a
     526:	5cfb      	ldrb	r3, [r7, r3]
     528:	4652      	mov	r2, sl
     52a:	70d3      	strb	r3, [r2, #3]
	adc_module->INTENCLR.reg =
     52c:	2307      	movs	r3, #7
     52e:	7113      	strb	r3, [r2, #4]
	if (config->correction.correction_enable){
     530:	331d      	adds	r3, #29
     532:	5cfb      	ldrb	r3, [r7, r3]
     534:	2b00      	cmp	r3, #0
     536:	d01d      	beq.n	574 <adc_init+0x3f0>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     53a:	4a49      	ldr	r2, [pc, #292]	; (660 <adc_init+0x4dc>)
			return STATUS_ERR_INVALID_ARG;
     53c:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     53e:	4293      	cmp	r3, r2
     540:	d900      	bls.n	544 <adc_init+0x3c0>
     542:	e63a      	b.n	1ba <adc_init+0x36>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     544:	4652      	mov	r2, sl
     546:	8253      	strh	r3, [r2, #18]
	Adc *const adc_module = module_inst->hw;
     548:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     54a:	8c13      	ldrh	r3, [r2, #32]
     54c:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     54e:	2b00      	cmp	r3, #0
     550:	d1fb      	bne.n	54a <adc_init+0x3c6>
		if (config->correction.offset_correction > 2047 ||
     552:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
     554:	2380      	movs	r3, #128	; 0x80
     556:	011b      	lsls	r3, r3, #4
     558:	18d3      	adds	r3, r2, r3
     55a:	4941      	ldr	r1, [pc, #260]	; (660 <adc_init+0x4dc>)
     55c:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
     560:	428b      	cmp	r3, r1
     562:	d900      	bls.n	566 <adc_init+0x3e2>
     564:	e629      	b.n	1ba <adc_init+0x36>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     566:	4653      	mov	r3, sl
     568:	829a      	strh	r2, [r3, #20]
	Adc *const adc_module = module_inst->hw;
     56a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     56c:	8c13      	ldrh	r3, [r2, #32]
     56e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     570:	2b00      	cmp	r3, #0
     572:	d1fb      	bne.n	56c <adc_init+0x3e8>
			ADC_CALIB_BIASREFBUF(
     574:	00a2      	lsls	r2, r4, #2
     576:	4b3b      	ldr	r3, [pc, #236]	; (664 <adc_init+0x4e0>)
     578:	58d3      	ldr	r3, [r2, r3]
     57a:	493b      	ldr	r1, [pc, #236]	; (668 <adc_init+0x4e4>)
     57c:	5d09      	ldrb	r1, [r1, r4]
     57e:	681b      	ldr	r3, [r3, #0]
     580:	40cb      	lsrs	r3, r1
     582:	021b      	lsls	r3, r3, #8
     584:	21e0      	movs	r1, #224	; 0xe0
     586:	00c9      	lsls	r1, r1, #3
     588:	400b      	ands	r3, r1
			ADC_CALIB_BIASCOMP(
     58a:	4938      	ldr	r1, [pc, #224]	; (66c <adc_init+0x4e8>)
     58c:	5852      	ldr	r2, [r2, r1]
     58e:	4938      	ldr	r1, [pc, #224]	; (670 <adc_init+0x4ec>)
     590:	5d09      	ldrb	r1, [r1, r4]
     592:	6812      	ldr	r2, [r2, #0]
     594:	40ca      	lsrs	r2, r1
     596:	2107      	movs	r1, #7
     598:	400a      	ands	r2, r1
			) |
     59a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     59c:	4652      	mov	r2, sl
     59e:	8593      	strh	r3, [r2, #44]	; 0x2c
	return STATUS_OK;
     5a0:	2000      	movs	r0, #0
     5a2:	e60a      	b.n	1ba <adc_init+0x36>
		switch (resolution) {
     5a4:	2e00      	cmp	r6, #0
     5a6:	d199      	bne.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     5a8:	7afa      	ldrb	r2, [r7, #11]
     5aa:	2a00      	cmp	r2, #0
     5ac:	d00f      	beq.n	5ce <adc_init+0x44a>
					(config->window.window_lower_value > 2047 ||
     5ae:	69fa      	ldr	r2, [r7, #28]
     5b0:	2180      	movs	r1, #128	; 0x80
     5b2:	0109      	lsls	r1, r1, #4
     5b4:	468c      	mov	ip, r1
     5b6:	4462      	add	r2, ip
			if (config->differential_mode &&
     5b8:	4929      	ldr	r1, [pc, #164]	; (660 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
     5ba:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5bc:	428a      	cmp	r2, r1
     5be:	d900      	bls.n	5c2 <adc_init+0x43e>
     5c0:	e5fb      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -2048 ||
     5c2:	6a3a      	ldr	r2, [r7, #32]
     5c4:	4462      	add	r2, ip
     5c6:	4926      	ldr	r1, [pc, #152]	; (660 <adc_init+0x4dc>)
     5c8:	428a      	cmp	r2, r1
     5ca:	d900      	bls.n	5ce <adc_init+0x44a>
     5cc:	e5f5      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 4095 ||
     5ce:	4a24      	ldr	r2, [pc, #144]	; (660 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
     5d0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5d2:	69f9      	ldr	r1, [r7, #28]
     5d4:	4291      	cmp	r1, r2
     5d6:	dd00      	ble.n	5da <adc_init+0x456>
     5d8:	e5ef      	b.n	1ba <adc_init+0x36>
     5da:	6a39      	ldr	r1, [r7, #32]
     5dc:	4291      	cmp	r1, r2
     5de:	dd00      	ble.n	5e2 <adc_init+0x45e>
     5e0:	e5eb      	b.n	1ba <adc_init+0x36>
     5e2:	e77b      	b.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     5e4:	7afa      	ldrb	r2, [r7, #11]
     5e6:	2a00      	cmp	r2, #0
     5e8:	d00f      	beq.n	60a <adc_init+0x486>
					(config->window.window_lower_value > 511 ||
     5ea:	69fa      	ldr	r2, [r7, #28]
     5ec:	2180      	movs	r1, #128	; 0x80
     5ee:	0089      	lsls	r1, r1, #2
     5f0:	468c      	mov	ip, r1
     5f2:	4462      	add	r2, ip
			if (config->differential_mode &&
     5f4:	491f      	ldr	r1, [pc, #124]	; (674 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
     5f6:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5f8:	428a      	cmp	r2, r1
     5fa:	d900      	bls.n	5fe <adc_init+0x47a>
     5fc:	e5dd      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -512 ||
     5fe:	6a3a      	ldr	r2, [r7, #32]
     600:	4462      	add	r2, ip
     602:	491c      	ldr	r1, [pc, #112]	; (674 <adc_init+0x4f0>)
     604:	428a      	cmp	r2, r1
     606:	d900      	bls.n	60a <adc_init+0x486>
     608:	e5d7      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 1023 ||
     60a:	4a1a      	ldr	r2, [pc, #104]	; (674 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
     60c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     60e:	69f9      	ldr	r1, [r7, #28]
     610:	4291      	cmp	r1, r2
     612:	dd00      	ble.n	616 <adc_init+0x492>
     614:	e5d1      	b.n	1ba <adc_init+0x36>
     616:	6a39      	ldr	r1, [r7, #32]
     618:	4291      	cmp	r1, r2
     61a:	dd00      	ble.n	61e <adc_init+0x49a>
     61c:	e5cd      	b.n	1ba <adc_init+0x36>
     61e:	e75d      	b.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     620:	7afa      	ldrb	r2, [r7, #11]
     622:	2a00      	cmp	r2, #0
     624:	d00f      	beq.n	646 <adc_init+0x4c2>
					(config->window.window_lower_value > 32767 ||
     626:	69fa      	ldr	r2, [r7, #28]
     628:	2180      	movs	r1, #128	; 0x80
     62a:	0209      	lsls	r1, r1, #8
     62c:	468c      	mov	ip, r1
     62e:	4462      	add	r2, ip
			if (config->differential_mode &&
     630:	4911      	ldr	r1, [pc, #68]	; (678 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
     632:	2017      	movs	r0, #23
			if (config->differential_mode &&
     634:	428a      	cmp	r2, r1
     636:	d900      	bls.n	63a <adc_init+0x4b6>
     638:	e5bf      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -32768 ||
     63a:	6a3a      	ldr	r2, [r7, #32]
     63c:	4462      	add	r2, ip
     63e:	490e      	ldr	r1, [pc, #56]	; (678 <adc_init+0x4f4>)
     640:	428a      	cmp	r2, r1
     642:	d900      	bls.n	646 <adc_init+0x4c2>
     644:	e5b9      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 65535 ||
     646:	4a0c      	ldr	r2, [pc, #48]	; (678 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
     648:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     64a:	69f9      	ldr	r1, [r7, #28]
     64c:	4291      	cmp	r1, r2
     64e:	dd00      	ble.n	652 <adc_init+0x4ce>
     650:	e5b3      	b.n	1ba <adc_init+0x36>
     652:	6a39      	ldr	r1, [r7, #32]
     654:	4291      	cmp	r1, r2
     656:	dd00      	ble.n	65a <adc_init+0x4d6>
     658:	e5af      	b.n	1ba <adc_init+0x36>
     65a:	e73f      	b.n	4dc <adc_init+0x358>
		return STATUS_ERR_INVALID_ARG;
     65c:	2017      	movs	r0, #23
     65e:	e5ac      	b.n	1ba <adc_init+0x36>
     660:	00000fff 	.word	0x00000fff
     664:	000019c8 	.word	0x000019c8
     668:	000019d0 	.word	0x000019d0
     66c:	000019bc 	.word	0x000019bc
     670:	000019c4 	.word	0x000019c4
     674:	000003ff 	.word	0x000003ff
     678:	0000ffff 	.word	0x0000ffff

0000067c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     67c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     67e:	0080      	lsls	r0, r0, #2
     680:	4b2e      	ldr	r3, [pc, #184]	; (73c <_adc_interrupt_handler+0xc0>)
     682:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     684:	6823      	ldr	r3, [r4, #0]
     686:	799a      	ldrb	r2, [r3, #6]
     688:	795d      	ldrb	r5, [r3, #5]
     68a:	4015      	ands	r5, r2

	if (flags & ADC_INTFLAG_RESRDY) {
     68c:	07ea      	lsls	r2, r5, #31
     68e:	d52a      	bpl.n	6e6 <_adc_interrupt_handler+0x6a>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     690:	2201      	movs	r2, #1
     692:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     694:	6962      	ldr	r2, [r4, #20]
     696:	1c93      	adds	r3, r2, #2
     698:	6163      	str	r3, [r4, #20]
     69a:	6823      	ldr	r3, [r4, #0]
     69c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     69e:	b29b      	uxth	r3, r3
     6a0:	8013      	strh	r3, [r2, #0]

		if (--module->remaining_conversions > 0) {
     6a2:	8b23      	ldrh	r3, [r4, #24]
     6a4:	3b01      	subs	r3, #1
     6a6:	b29b      	uxth	r3, r3
     6a8:	8323      	strh	r3, [r4, #24]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d015      	beq.n	6da <_adc_interrupt_handler+0x5e>
			if (module->software_trigger == true
     6ae:	7f63      	ldrb	r3, [r4, #29]
     6b0:	2b00      	cmp	r3, #0
     6b2:	d018      	beq.n	6e6 <_adc_interrupt_handler+0x6a>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     6b4:	6822      	ldr	r2, [r4, #0]
     6b6:	79d3      	ldrb	r3, [r2, #7]
     6b8:	b25b      	sxtb	r3, r3
     6ba:	2b00      	cmp	r3, #0
     6bc:	db13      	blt.n	6e6 <_adc_interrupt_handler+0x6a>
     6be:	8c13      	ldrh	r3, [r2, #32]
     6c0:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     6c2:	2b00      	cmp	r3, #0
     6c4:	d1fb      	bne.n	6be <_adc_interrupt_handler+0x42>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6c6:	7e13      	ldrb	r3, [r2, #24]
     6c8:	2102      	movs	r1, #2
     6ca:	430b      	orrs	r3, r1
     6cc:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     6ce:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     6d0:	8c13      	ldrh	r3, [r2, #32]
     6d2:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     6d4:	2b00      	cmp	r3, #0
     6d6:	d1fb      	bne.n	6d0 <_adc_interrupt_handler+0x54>
     6d8:	e005      	b.n	6e6 <_adc_interrupt_handler+0x6a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     6da:	2301      	movs	r3, #1
     6dc:	6822      	ldr	r2, [r4, #0]
     6de:	7113      	strb	r3, [r2, #4]
				adc_start_conversion(module);
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
			if (module->job_status == STATUS_BUSY) {
     6e0:	7f23      	ldrb	r3, [r4, #28]
     6e2:	2b05      	cmp	r3, #5
     6e4:	d016      	beq.n	714 <_adc_interrupt_handler+0x98>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     6e6:	076b      	lsls	r3, r5, #29
     6e8:	d508      	bpl.n	6fc <_adc_interrupt_handler+0x80>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     6ea:	2304      	movs	r3, #4
     6ec:	6822      	ldr	r2, [r4, #0]
     6ee:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     6f0:	7ee3      	ldrb	r3, [r4, #27]
     6f2:	079b      	lsls	r3, r3, #30
     6f4:	d502      	bpl.n	6fc <_adc_interrupt_handler+0x80>
     6f6:	7ea3      	ldrb	r3, [r4, #26]
     6f8:	079b      	lsls	r3, r3, #30
     6fa:	d417      	bmi.n	72c <_adc_interrupt_handler+0xb0>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     6fc:	07ab      	lsls	r3, r5, #30
     6fe:	d508      	bpl.n	712 <_adc_interrupt_handler+0x96>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     700:	2302      	movs	r3, #2
     702:	6822      	ldr	r2, [r4, #0]
     704:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     706:	7ee3      	ldrb	r3, [r4, #27]
     708:	075b      	lsls	r3, r3, #29
     70a:	d502      	bpl.n	712 <_adc_interrupt_handler+0x96>
     70c:	7ea3      	ldrb	r3, [r4, #26]
     70e:	075b      	lsls	r3, r3, #29
     710:	d410      	bmi.n	734 <_adc_interrupt_handler+0xb8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     712:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     714:	2300      	movs	r3, #0
     716:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     718:	7ee3      	ldrb	r3, [r4, #27]
     71a:	07db      	lsls	r3, r3, #31
     71c:	d5e3      	bpl.n	6e6 <_adc_interrupt_handler+0x6a>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     71e:	7ea3      	ldrb	r3, [r4, #26]
     720:	07db      	lsls	r3, r3, #31
     722:	d5e0      	bpl.n	6e6 <_adc_interrupt_handler+0x6a>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     724:	0020      	movs	r0, r4
     726:	68a3      	ldr	r3, [r4, #8]
     728:	4798      	blx	r3
     72a:	e7dc      	b.n	6e6 <_adc_interrupt_handler+0x6a>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     72c:	0020      	movs	r0, r4
     72e:	68e3      	ldr	r3, [r4, #12]
     730:	4798      	blx	r3
     732:	e7e3      	b.n	6fc <_adc_interrupt_handler+0x80>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     734:	6923      	ldr	r3, [r4, #16]
     736:	0020      	movs	r0, r4
     738:	4798      	blx	r3
}
     73a:	e7ea      	b.n	712 <_adc_interrupt_handler+0x96>
     73c:	2000003c 	.word	0x2000003c

00000740 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
     740:	b510      	push	{r4, lr}
     742:	2000      	movs	r0, #0
     744:	4b01      	ldr	r3, [pc, #4]	; (74c <ADC0_Handler+0xc>)
     746:	4798      	blx	r3
     748:	bd10      	pop	{r4, pc}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	0000067d 	.word	0x0000067d

00000750 <ADC1_Handler>:
     750:	b510      	push	{r4, lr}
     752:	2001      	movs	r0, #1
     754:	4b01      	ldr	r3, [pc, #4]	; (75c <ADC1_Handler+0xc>)
     756:	4798      	blx	r3
     758:	bd10      	pop	{r4, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	0000067d 	.word	0x0000067d

00000760 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     760:	4a06      	ldr	r2, [pc, #24]	; (77c <_extint_enable+0x1c>)
     762:	7813      	ldrb	r3, [r2, #0]
     764:	2102      	movs	r1, #2
     766:	430b      	orrs	r3, r1
     768:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     76a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     76c:	6853      	ldr	r3, [r2, #4]
     76e:	4219      	tst	r1, r3
     770:	d1fc      	bne.n	76c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     772:	6853      	ldr	r3, [r2, #4]
     774:	4218      	tst	r0, r3
     776:	d1f9      	bne.n	76c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     778:	4770      	bx	lr
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	40002800 	.word	0x40002800

00000780 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     780:	4a06      	ldr	r2, [pc, #24]	; (79c <_extint_disable+0x1c>)
     782:	7813      	ldrb	r3, [r2, #0]
     784:	2102      	movs	r1, #2
     786:	438b      	bics	r3, r1
     788:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     78a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     78c:	6853      	ldr	r3, [r2, #4]
     78e:	4219      	tst	r1, r3
     790:	d1fc      	bne.n	78c <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     792:	6853      	ldr	r3, [r2, #4]
     794:	4218      	tst	r0, r3
     796:	d1f9      	bne.n	78c <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     798:	4770      	bx	lr
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	40002800 	.word	0x40002800

000007a0 <_system_extint_init>:
{
     7a0:	b500      	push	{lr}
     7a2:	b083      	sub	sp, #12
			MCLK->APBAMASK.reg |= mask;
     7a4:	4a12      	ldr	r2, [pc, #72]	; (7f0 <_system_extint_init+0x50>)
     7a6:	6951      	ldr	r1, [r2, #20]
     7a8:	2380      	movs	r3, #128	; 0x80
     7aa:	00db      	lsls	r3, r3, #3
     7ac:	430b      	orrs	r3, r1
     7ae:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     7b0:	a901      	add	r1, sp, #4
     7b2:	2300      	movs	r3, #0
     7b4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     7b6:	2002      	movs	r0, #2
     7b8:	4b0e      	ldr	r3, [pc, #56]	; (7f4 <_system_extint_init+0x54>)
     7ba:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     7bc:	2002      	movs	r0, #2
     7be:	4b0e      	ldr	r3, [pc, #56]	; (7f8 <_system_extint_init+0x58>)
     7c0:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     7c2:	4a0e      	ldr	r2, [pc, #56]	; (7fc <_system_extint_init+0x5c>)
     7c4:	7813      	ldrb	r3, [r2, #0]
     7c6:	2101      	movs	r1, #1
     7c8:	430b      	orrs	r3, r1
     7ca:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     7cc:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     7ce:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     7d0:	6853      	ldr	r3, [r2, #4]
     7d2:	4219      	tst	r1, r3
     7d4:	d1fc      	bne.n	7d0 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     7d6:	6853      	ldr	r3, [r2, #4]
     7d8:	4218      	tst	r0, r3
     7da:	d1f9      	bne.n	7d0 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     7dc:	4a07      	ldr	r2, [pc, #28]	; (7fc <_system_extint_init+0x5c>)
     7de:	7813      	ldrb	r3, [r2, #0]
     7e0:	2110      	movs	r1, #16
     7e2:	438b      	bics	r3, r1
     7e4:	7013      	strb	r3, [r2, #0]
	_extint_enable();
     7e6:	4b06      	ldr	r3, [pc, #24]	; (800 <_system_extint_init+0x60>)
     7e8:	4798      	blx	r3
}
     7ea:	b003      	add	sp, #12
     7ec:	bd00      	pop	{pc}
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	40000800 	.word	0x40000800
     7f4:	0000156d 	.word	0x0000156d
     7f8:	000014fd 	.word	0x000014fd
     7fc:	40002800 	.word	0x40002800
     800:	00000761 	.word	0x00000761

00000804 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     804:	2300      	movs	r3, #0
     806:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     808:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     80a:	2201      	movs	r2, #1
     80c:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     80e:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     810:	3201      	adds	r2, #1
     812:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     814:	7243      	strb	r3, [r0, #9]
}
     816:	4770      	bx	lr

00000818 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     818:	b5f0      	push	{r4, r5, r6, r7, lr}
     81a:	b083      	sub	sp, #12
     81c:	0005      	movs	r5, r0
     81e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     820:	4b1c      	ldr	r3, [pc, #112]	; (894 <extint_chan_set_config+0x7c>)
     822:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     824:	a901      	add	r1, sp, #4
     826:	2300      	movs	r3, #0
     828:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     82a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     82c:	7923      	ldrb	r3, [r4, #4]
     82e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     830:	7a23      	ldrb	r3, [r4, #8]
     832:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     834:	7820      	ldrb	r0, [r4, #0]
     836:	4b18      	ldr	r3, [pc, #96]	; (898 <extint_chan_set_config+0x80>)
     838:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     83a:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     83c:	2d1f      	cmp	r5, #31
     83e:	d800      	bhi.n	842 <extint_chan_set_config+0x2a>
		return eics[eic_index];
     840:	4916      	ldr	r1, [pc, #88]	; (89c <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     842:	2207      	movs	r2, #7
     844:	402a      	ands	r2, r5
     846:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     848:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     84a:	7aa3      	ldrb	r3, [r4, #10]
     84c:	2b00      	cmp	r3, #0
     84e:	d001      	beq.n	854 <extint_chan_set_config+0x3c>
     850:	2308      	movs	r3, #8
     852:	431f      	orrs	r7, r3
     854:	08eb      	lsrs	r3, r5, #3
     856:	009b      	lsls	r3, r3, #2
     858:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     85a:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     85c:	260f      	movs	r6, #15
     85e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     860:	43b0      	bics	r0, r6
			(new_config << config_pos);
     862:	4097      	lsls	r7, r2
     864:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     866:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     868:	61da      	str	r2, [r3, #28]
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
#if (SAMC21)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     86a:	7a63      	ldrb	r3, [r4, #9]
     86c:	2b00      	cmp	r3, #0
     86e:	d10b      	bne.n	888 <extint_chan_set_config+0x70>
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
     870:	698a      	ldr	r2, [r1, #24]
     872:	2301      	movs	r3, #1
     874:	40ab      	lsls	r3, r5
     876:	43db      	mvns	r3, r3
     878:	041b      	lsls	r3, r3, #16
     87a:	0c1b      	lsrs	r3, r3, #16
     87c:	4013      	ands	r3, r2
     87e:	618b      	str	r3, [r1, #24]
	}
#endif
	_extint_enable();
     880:	4b07      	ldr	r3, [pc, #28]	; (8a0 <extint_chan_set_config+0x88>)
     882:	4798      	blx	r3
}
     884:	b003      	add	sp, #12
     886:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
     888:	698a      	ldr	r2, [r1, #24]
     88a:	2301      	movs	r3, #1
     88c:	40ab      	lsls	r3, r5
     88e:	4313      	orrs	r3, r2
     890:	618b      	str	r3, [r1, #24]
     892:	e7f5      	b.n	880 <extint_chan_set_config+0x68>
     894:	00000781 	.word	0x00000781
     898:	00001639 	.word	0x00001639
     89c:	40002800 	.word	0x40002800
     8a0:	00000761 	.word	0x00000761

000008a4 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     8a4:	4b09      	ldr	r3, [pc, #36]	; (8cc <_tcc_get_inst_index+0x28>)
     8a6:	4298      	cmp	r0, r3
     8a8:	d00c      	beq.n	8c4 <_tcc_get_inst_index+0x20>
     8aa:	4b09      	ldr	r3, [pc, #36]	; (8d0 <_tcc_get_inst_index+0x2c>)
     8ac:	4298      	cmp	r0, r3
     8ae:	d007      	beq.n	8c0 <_tcc_get_inst_index+0x1c>
     8b0:	4a08      	ldr	r2, [pc, #32]	; (8d4 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     8b2:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
     8b4:	4290      	cmp	r0, r2
     8b6:	d001      	beq.n	8bc <_tcc_get_inst_index+0x18>
}
     8b8:	0018      	movs	r0, r3
     8ba:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     8bc:	3302      	adds	r3, #2
     8be:	e002      	b.n	8c6 <_tcc_get_inst_index+0x22>
     8c0:	2301      	movs	r3, #1
     8c2:	e000      	b.n	8c6 <_tcc_get_inst_index+0x22>
     8c4:	2300      	movs	r3, #0
			return i;
     8c6:	b2db      	uxtb	r3, r3
     8c8:	e7f6      	b.n	8b8 <_tcc_get_inst_index+0x14>
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	42002400 	.word	0x42002400
     8d0:	42002800 	.word	0x42002800
     8d4:	42002c00 	.word	0x42002c00

000008d8 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
     8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8da:	000f      	movs	r7, r1
     8dc:	0014      	movs	r4, r2
     8de:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     8e0:	6806      	ldr	r6, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
     8e2:	0030      	movs	r0, r6
     8e4:	4b10      	ldr	r3, [pc, #64]	; (928 <_tcc_set_compare_value+0x50>)
     8e6:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
     8e8:	4b10      	ldr	r3, [pc, #64]	; (92c <_tcc_set_compare_value+0x54>)
     8ea:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
     8ec:	2317      	movs	r3, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
     8ee:	42ba      	cmp	r2, r7
     8f0:	d801      	bhi.n	8f6 <_tcc_set_compare_value+0x1e>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
     8f2:	0018      	movs	r0, r3
     8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t max_count = _tcc_maxs[module_index];
     8f6:	0080      	lsls	r0, r0, #2
	if (compare > max_count) {
     8f8:	4b0d      	ldr	r3, [pc, #52]	; (930 <_tcc_set_compare_value+0x58>)
     8fa:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
     8fc:	2317      	movs	r3, #23
	if (compare > max_count) {
     8fe:	42a2      	cmp	r2, r4
     900:	d3f7      	bcc.n	8f2 <_tcc_set_compare_value+0x1a>
	if (double_buffering_enabled) {
     902:	2d00      	cmp	r5, #0
     904:	d10b      	bne.n	91e <_tcc_set_compare_value+0x46>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
     906:	2280      	movs	r2, #128	; 0x80
     908:	0052      	lsls	r2, r2, #1
     90a:	40ba      	lsls	r2, r7
     90c:	68b3      	ldr	r3, [r6, #8]
     90e:	421a      	tst	r2, r3
     910:	d1fc      	bne.n	90c <_tcc_set_compare_value+0x34>
		tcc_module->CC[channel_index].reg = compare;
     912:	3710      	adds	r7, #16
     914:	00bf      	lsls	r7, r7, #2
     916:	19f6      	adds	r6, r6, r7
     918:	6074      	str	r4, [r6, #4]
	return STATUS_OK;
     91a:	2300      	movs	r3, #0
     91c:	e7e9      	b.n	8f2 <_tcc_set_compare_value+0x1a>
		tcc_module->CCBUF[channel_index].reg = compare;
     91e:	371c      	adds	r7, #28
     920:	00bf      	lsls	r7, r7, #2
     922:	51bc      	str	r4, [r7, r6]
	return STATUS_OK;
     924:	2300      	movs	r3, #0
     926:	e7e4      	b.n	8f2 <_tcc_set_compare_value+0x1a>
     928:	000008a5 	.word	0x000008a5
     92c:	000019ec 	.word	0x000019ec
     930:	000019f4 	.word	0x000019f4

00000934 <tcc_get_config_defaults>:
{
     934:	b510      	push	{r4, lr}
     936:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
     938:	0008      	movs	r0, r1
     93a:	4b4f      	ldr	r3, [pc, #316]	; (a78 <tcc_get_config_defaults+0x144>)
     93c:	4798      	blx	r3
	config->counter.count                  = 0;
     93e:	2300      	movs	r3, #0
     940:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
     942:	0080      	lsls	r0, r0, #2
     944:	4a4d      	ldr	r2, [pc, #308]	; (a7c <tcc_get_config_defaults+0x148>)
     946:	5882      	ldr	r2, [r0, r2]
     948:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
     94a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     94c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     94e:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     950:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     952:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     954:	61e3      	str	r3, [r4, #28]
     956:	6223      	str	r3, [r4, #32]
     958:	6263      	str	r3, [r4, #36]	; 0x24
     95a:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     95c:	7523      	strb	r3, [r4, #20]
     95e:	7563      	strb	r3, [r4, #21]
     960:	75a3      	strb	r3, [r4, #22]
     962:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     964:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     966:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     968:	7423      	strb	r3, [r4, #16]
     96a:	7463      	strb	r3, [r4, #17]
     96c:	74a3      	strb	r3, [r4, #18]
     96e:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     970:	222c      	movs	r2, #44	; 0x2c
     972:	54a3      	strb	r3, [r4, r2]
     974:	3201      	adds	r2, #1
     976:	54a3      	strb	r3, [r4, r2]
     978:	3201      	adds	r2, #1
     97a:	54a3      	strb	r3, [r4, r2]
     97c:	3201      	adds	r2, #1
     97e:	54a3      	strb	r3, [r4, r2]
     980:	3201      	adds	r2, #1
     982:	54a3      	strb	r3, [r4, r2]
     984:	3201      	adds	r2, #1
     986:	54a3      	strb	r3, [r4, r2]
     988:	3201      	adds	r2, #1
     98a:	54a3      	strb	r3, [r4, r2]
     98c:	3201      	adds	r2, #1
     98e:	54a3      	strb	r3, [r4, r2]
     990:	3201      	adds	r2, #1
     992:	54a3      	strb	r3, [r4, r2]
     994:	3201      	adds	r2, #1
     996:	54a3      	strb	r3, [r4, r2]
     998:	3201      	adds	r2, #1
     99a:	54a3      	strb	r3, [r4, r2]
     99c:	3201      	adds	r2, #1
     99e:	54a3      	strb	r3, [r4, r2]
     9a0:	3201      	adds	r2, #1
     9a2:	54a3      	strb	r3, [r4, r2]
     9a4:	3201      	adds	r2, #1
     9a6:	54a3      	strb	r3, [r4, r2]
     9a8:	3201      	adds	r2, #1
     9aa:	54a3      	strb	r3, [r4, r2]
     9ac:	3201      	adds	r2, #1
     9ae:	54a3      	strb	r3, [r4, r2]
     9b0:	3201      	adds	r2, #1
     9b2:	54a3      	strb	r3, [r4, r2]
     9b4:	3201      	adds	r2, #1
     9b6:	54a3      	strb	r3, [r4, r2]
     9b8:	3201      	adds	r2, #1
     9ba:	54a3      	strb	r3, [r4, r2]
     9bc:	3201      	adds	r2, #1
     9be:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     9c0:	3201      	adds	r2, #1
     9c2:	54a3      	strb	r3, [r4, r2]
     9c4:	3201      	adds	r2, #1
     9c6:	54a3      	strb	r3, [r4, r2]
     9c8:	3201      	adds	r2, #1
     9ca:	54a3      	strb	r3, [r4, r2]
     9cc:	3201      	adds	r2, #1
     9ce:	54a3      	strb	r3, [r4, r2]
     9d0:	3201      	adds	r2, #1
     9d2:	54a3      	strb	r3, [r4, r2]
     9d4:	3201      	adds	r2, #1
     9d6:	54a3      	strb	r3, [r4, r2]
     9d8:	3201      	adds	r2, #1
     9da:	54a3      	strb	r3, [r4, r2]
     9dc:	3201      	adds	r2, #1
     9de:	54a3      	strb	r3, [r4, r2]
     9e0:	3201      	adds	r2, #1
     9e2:	54a3      	strb	r3, [r4, r2]
     9e4:	3201      	adds	r2, #1
     9e6:	54a3      	strb	r3, [r4, r2]
     9e8:	3201      	adds	r2, #1
     9ea:	54a3      	strb	r3, [r4, r2]
     9ec:	3201      	adds	r2, #1
     9ee:	54a3      	strb	r3, [r4, r2]
     9f0:	3201      	adds	r2, #1
     9f2:	54a3      	strb	r3, [r4, r2]
     9f4:	3201      	adds	r2, #1
     9f6:	54a3      	strb	r3, [r4, r2]
     9f8:	3201      	adds	r2, #1
     9fa:	54a3      	strb	r3, [r4, r2]
     9fc:	3201      	adds	r2, #1
     9fe:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     a00:	3201      	adds	r2, #1
     a02:	54a3      	strb	r3, [r4, r2]
     a04:	3201      	adds	r2, #1
     a06:	54a3      	strb	r3, [r4, r2]
     a08:	3201      	adds	r2, #1
     a0a:	54a3      	strb	r3, [r4, r2]
     a0c:	3201      	adds	r2, #1
     a0e:	54a3      	strb	r3, [r4, r2]
     a10:	3201      	adds	r2, #1
     a12:	54a3      	strb	r3, [r4, r2]
     a14:	3201      	adds	r2, #1
     a16:	54a3      	strb	r3, [r4, r2]
     a18:	3201      	adds	r2, #1
     a1a:	54a3      	strb	r3, [r4, r2]
     a1c:	3201      	adds	r2, #1
     a1e:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     a20:	3241      	adds	r2, #65	; 0x41
     a22:	54a3      	strb	r3, [r4, r2]
     a24:	65a3      	str	r3, [r4, #88]	; 0x58
     a26:	67a3      	str	r3, [r4, #120]	; 0x78
     a28:	3201      	adds	r2, #1
     a2a:	54a3      	strb	r3, [r4, r2]
     a2c:	65e3      	str	r3, [r4, #92]	; 0x5c
     a2e:	67e3      	str	r3, [r4, #124]	; 0x7c
     a30:	3201      	adds	r2, #1
     a32:	54a3      	strb	r3, [r4, r2]
     a34:	6623      	str	r3, [r4, #96]	; 0x60
     a36:	3a1a      	subs	r2, #26
     a38:	50a3      	str	r3, [r4, r2]
     a3a:	321b      	adds	r2, #27
     a3c:	54a3      	strb	r3, [r4, r2]
     a3e:	6663      	str	r3, [r4, #100]	; 0x64
     a40:	3a17      	subs	r2, #23
     a42:	50a3      	str	r3, [r4, r2]
     a44:	3218      	adds	r2, #24
     a46:	54a3      	strb	r3, [r4, r2]
     a48:	66a3      	str	r3, [r4, #104]	; 0x68
     a4a:	3a14      	subs	r2, #20
     a4c:	50a3      	str	r3, [r4, r2]
     a4e:	3215      	adds	r2, #21
     a50:	54a3      	strb	r3, [r4, r2]
     a52:	66e3      	str	r3, [r4, #108]	; 0x6c
     a54:	3a11      	subs	r2, #17
     a56:	50a3      	str	r3, [r4, r2]
     a58:	3212      	adds	r2, #18
     a5a:	54a3      	strb	r3, [r4, r2]
     a5c:	6723      	str	r3, [r4, #112]	; 0x70
     a5e:	3a0e      	subs	r2, #14
     a60:	50a3      	str	r3, [r4, r2]
     a62:	320f      	adds	r2, #15
     a64:	54a3      	strb	r3, [r4, r2]
     a66:	6763      	str	r3, [r4, #116]	; 0x74
     a68:	3a0b      	subs	r2, #11
     a6a:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
     a6c:	2101      	movs	r1, #1
     a6e:	320c      	adds	r2, #12
     a70:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     a72:	3201      	adds	r2, #1
     a74:	54a3      	strb	r3, [r4, r2]
}
     a76:	bd10      	pop	{r4, pc}
     a78:	000008a5 	.word	0x000008a5
     a7c:	000019f4 	.word	0x000019f4

00000a80 <tcc_init>:
{
     a80:	b5f0      	push	{r4, r5, r6, r7, lr}
     a82:	46de      	mov	lr, fp
     a84:	4657      	mov	r7, sl
     a86:	464e      	mov	r6, r9
     a88:	4645      	mov	r5, r8
     a8a:	b5e0      	push	{r5, r6, r7, lr}
     a8c:	b091      	sub	sp, #68	; 0x44
     a8e:	9001      	str	r0, [sp, #4]
     a90:	000c      	movs	r4, r1
     a92:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     a94:	0008      	movs	r0, r1
     a96:	4bc9      	ldr	r3, [pc, #804]	; (dbc <tcc_init+0x33c>)
     a98:	4798      	blx	r3
     a9a:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     a9c:	0001      	movs	r1, r0
			MCLK->APBCMASK.reg |= mask;
     a9e:	48c8      	ldr	r0, [pc, #800]	; (dc0 <tcc_init+0x340>)
     aa0:	69c2      	ldr	r2, [r0, #28]
     aa2:	009e      	lsls	r6, r3, #2
     aa4:	4fc7      	ldr	r7, [pc, #796]	; (dc4 <tcc_init+0x344>)
     aa6:	59f7      	ldr	r7, [r6, r7]
     aa8:	433a      	orrs	r2, r7
     aaa:	61c2      	str	r2, [r0, #28]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     aac:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     aae:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     ab0:	0792      	lsls	r2, r2, #30
     ab2:	d506      	bpl.n	ac2 <tcc_init+0x42>
}
     ab4:	b011      	add	sp, #68	; 0x44
     ab6:	bc3c      	pop	{r2, r3, r4, r5}
     ab8:	4690      	mov	r8, r2
     aba:	4699      	mov	r9, r3
     abc:	46a2      	mov	sl, r4
     abe:	46ab      	mov	fp, r5
     ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     ac2:	6822      	ldr	r2, [r4, #0]
     ac4:	2701      	movs	r7, #1
     ac6:	4017      	ands	r7, r2
     ac8:	d1f4      	bne.n	ab4 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     aca:	48bf      	ldr	r0, [pc, #764]	; (dc8 <tcc_init+0x348>)
     acc:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     ace:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     ad0:	682e      	ldr	r6, [r5, #0]
     ad2:	42b2      	cmp	r2, r6
     ad4:	d3ee      	bcc.n	ab4 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     ad6:	686e      	ldr	r6, [r5, #4]
     ad8:	42b2      	cmp	r2, r6
     ada:	d3eb      	bcc.n	ab4 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     adc:	69e8      	ldr	r0, [r5, #28]
     ade:	4282      	cmp	r2, r0
     ae0:	d200      	bcs.n	ae4 <tcc_init+0x64>
     ae2:	e165      	b.n	db0 <tcc_init+0x330>
     ae4:	6a28      	ldr	r0, [r5, #32]
     ae6:	4282      	cmp	r2, r0
     ae8:	d200      	bcs.n	aec <tcc_init+0x6c>
     aea:	e163      	b.n	db4 <tcc_init+0x334>
     aec:	6a68      	ldr	r0, [r5, #36]	; 0x24
     aee:	4282      	cmp	r2, r0
     af0:	d200      	bcs.n	af4 <tcc_init+0x74>
     af2:	e161      	b.n	db8 <tcc_init+0x338>
     af4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     af6:	4282      	cmp	r2, r0
     af8:	d200      	bcs.n	afc <tcc_init+0x7c>
     afa:	e16d      	b.n	dd8 <tcc_init+0x358>
     afc:	2298      	movs	r2, #152	; 0x98
     afe:	4694      	mov	ip, r2
     b00:	44ac      	add	ip, r5
     b02:	4662      	mov	r2, ip
     b04:	9208      	str	r2, [sp, #32]
     b06:	2000      	movs	r0, #0
     b08:	e003      	b.n	b12 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     b0a:	3001      	adds	r0, #1
     b0c:	3201      	adds	r2, #1
     b0e:	2808      	cmp	r0, #8
     b10:	d008      	beq.n	b24 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     b12:	7816      	ldrb	r6, [r2, #0]
     b14:	2e00      	cmp	r6, #0
     b16:	d0f8      	beq.n	b0a <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     b18:	4eac      	ldr	r6, [pc, #688]	; (dcc <tcc_init+0x34c>)
     b1a:	5c76      	ldrb	r6, [r6, r1]
     b1c:	4286      	cmp	r6, r0
     b1e:	dcf4      	bgt.n	b0a <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     b20:	2017      	movs	r0, #23
     b22:	e7c7      	b.n	ab4 <tcc_init+0x34>
     b24:	2200      	movs	r2, #0
     b26:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     b28:	2080      	movs	r0, #128	; 0x80
     b2a:	0440      	lsls	r0, r0, #17
     b2c:	4684      	mov	ip, r0
     b2e:	e002      	b.n	b36 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     b30:	3201      	adds	r2, #1
     b32:	2a04      	cmp	r2, #4
     b34:	d00e      	beq.n	b54 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     b36:	18a8      	adds	r0, r5, r2
     b38:	7c00      	ldrb	r0, [r0, #16]
     b3a:	2801      	cmp	r0, #1
     b3c:	d1f8      	bne.n	b30 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     b3e:	48a4      	ldr	r0, [pc, #656]	; (dd0 <tcc_init+0x350>)
     b40:	5c40      	ldrb	r0, [r0, r1]
     b42:	4290      	cmp	r0, r2
     b44:	da00      	bge.n	b48 <tcc_init+0xc8>
     b46:	e149      	b.n	ddc <tcc_init+0x35c>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     b48:	4660      	mov	r0, ip
     b4a:	4090      	lsls	r0, r2
     b4c:	9e02      	ldr	r6, [sp, #8]
     b4e:	4306      	orrs	r6, r0
     b50:	9602      	str	r6, [sp, #8]
     b52:	e7ed      	b.n	b30 <tcc_init+0xb0>
	if (config->run_in_standby) {
     b54:	329d      	adds	r2, #157	; 0x9d
     b56:	5caa      	ldrb	r2, [r5, r2]
     b58:	2a00      	cmp	r2, #0
     b5a:	d004      	beq.n	b66 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     b5c:	2280      	movs	r2, #128	; 0x80
     b5e:	0112      	lsls	r2, r2, #4
     b60:	9902      	ldr	r1, [sp, #8]
     b62:	4311      	orrs	r1, r2
     b64:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     b66:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     b68:	1e51      	subs	r1, r2, #1
     b6a:	418a      	sbcs	r2, r1
     b6c:	0092      	lsls	r2, r2, #2
     b6e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     b70:	7a6a      	ldrb	r2, [r5, #9]
     b72:	2a01      	cmp	r2, #1
     b74:	d022      	beq.n	bbc <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     b76:	4a96      	ldr	r2, [pc, #600]	; (dd0 <tcc_init+0x350>)
     b78:	5cd2      	ldrb	r2, [r2, r3]
     b7a:	0011      	movs	r1, r2
     b7c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     b7e:	2235      	movs	r2, #53	; 0x35
     b80:	5caa      	ldrb	r2, [r5, r2]
     b82:	4291      	cmp	r1, r2
     b84:	d800      	bhi.n	b88 <tcc_init+0x108>
     b86:	e133      	b.n	df0 <tcc_init+0x370>
		if (cfg->filter_value > 0xF) {
     b88:	212c      	movs	r1, #44	; 0x2c
     b8a:	5c69      	ldrb	r1, [r5, r1]
     b8c:	290f      	cmp	r1, #15
     b8e:	d900      	bls.n	b92 <tcc_init+0x112>
     b90:	e12e      	b.n	df0 <tcc_init+0x370>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     b92:	7b28      	ldrb	r0, [r5, #12]
     b94:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     b96:	7ae8      	ldrb	r0, [r5, #11]
     b98:	900b      	str	r0, [sp, #44]	; 0x2c
     b9a:	202d      	movs	r0, #45	; 0x2d
     b9c:	4682      	mov	sl, r0
     b9e:	44aa      	add	sl, r5
     ba0:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     ba2:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     ba4:	ae0e      	add	r6, sp, #56	; 0x38
     ba6:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     ba8:	26c0      	movs	r6, #192	; 0xc0
     baa:	0136      	lsls	r6, r6, #4
     bac:	46b1      	mov	r9, r6
     bae:	4684      	mov	ip, r0
     bb0:	46a0      	mov	r8, r4
     bb2:	0028      	movs	r0, r5
     bb4:	4655      	mov	r5, sl
     bb6:	9309      	str	r3, [sp, #36]	; 0x24
     bb8:	4682      	mov	sl, r0
     bba:	e035      	b.n	c28 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     bbc:	9906      	ldr	r1, [sp, #24]
     bbe:	4311      	orrs	r1, r2
     bc0:	9106      	str	r1, [sp, #24]
     bc2:	e7d8      	b.n	b76 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     bc4:	0292      	lsls	r2, r2, #10
     bc6:	464f      	mov	r7, r9
     bc8:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     bca:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     bcc:	7919      	ldrb	r1, [r3, #4]
     bce:	468b      	mov	fp, r1
     bd0:	2103      	movs	r1, #3
     bd2:	465f      	mov	r7, fp
     bd4:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     bd6:	430a      	orrs	r2, r1
     bd8:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     bda:	795a      	ldrb	r2, [r3, #5]
     bdc:	0152      	lsls	r2, r2, #5
     bde:	2160      	movs	r1, #96	; 0x60
     be0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     be2:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     be4:	7999      	ldrb	r1, [r3, #6]
     be6:	0209      	lsls	r1, r1, #8
     be8:	26c0      	movs	r6, #192	; 0xc0
     bea:	00b6      	lsls	r6, r6, #2
     bec:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     bee:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     bf0:	79da      	ldrb	r2, [r3, #7]
     bf2:	0312      	lsls	r2, r2, #12
     bf4:	21e0      	movs	r1, #224	; 0xe0
     bf6:	01c9      	lsls	r1, r1, #7
     bf8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     bfa:	4316      	orrs	r6, r2
     bfc:	4334      	orrs	r4, r6
     bfe:	9a03      	ldr	r2, [sp, #12]
     c00:	4314      	orrs	r4, r2
     c02:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     c04:	4662      	mov	r2, ip
     c06:	9907      	ldr	r1, [sp, #28]
     c08:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     c0a:	2a04      	cmp	r2, #4
     c0c:	d02a      	beq.n	c64 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     c0e:	7c9a      	ldrb	r2, [r3, #18]
     c10:	9905      	ldr	r1, [sp, #20]
     c12:	4291      	cmp	r1, r2
     c14:	d800      	bhi.n	c18 <tcc_init+0x198>
     c16:	e0eb      	b.n	df0 <tcc_init+0x370>
		if (cfg->filter_value > 0xF) {
     c18:	7a59      	ldrb	r1, [r3, #9]
     c1a:	350a      	adds	r5, #10
     c1c:	2304      	movs	r3, #4
     c1e:	469b      	mov	fp, r3
     c20:	44dc      	add	ip, fp
     c22:	290f      	cmp	r1, #15
     c24:	d900      	bls.n	c28 <tcc_init+0x1a8>
     c26:	e0e3      	b.n	df0 <tcc_init+0x370>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     c28:	0609      	lsls	r1, r1, #24
     c2a:	23f0      	movs	r3, #240	; 0xf0
     c2c:	051b      	lsls	r3, r3, #20
     c2e:	4019      	ands	r1, r3
     c30:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     c32:	782e      	ldrb	r6, [r5, #0]
     c34:	0436      	lsls	r6, r6, #16
     c36:	20ff      	movs	r0, #255	; 0xff
     c38:	0400      	lsls	r0, r0, #16
     c3a:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     c3c:	7868      	ldrb	r0, [r5, #1]
     c3e:	2480      	movs	r4, #128	; 0x80
     c40:	2800      	cmp	r0, #0
     c42:	d100      	bne.n	c46 <tcc_init+0x1c6>
     c44:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     c46:	7898      	ldrb	r0, [r3, #2]
     c48:	2708      	movs	r7, #8
     c4a:	9703      	str	r7, [sp, #12]
     c4c:	2800      	cmp	r0, #0
     c4e:	d101      	bne.n	c54 <tcc_init+0x1d4>
     c50:	9804      	ldr	r0, [sp, #16]
     c52:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     c54:	78d8      	ldrb	r0, [r3, #3]
     c56:	4683      	mov	fp, r0
     c58:	2010      	movs	r0, #16
     c5a:	465f      	mov	r7, fp
     c5c:	2f00      	cmp	r7, #0
     c5e:	d1b1      	bne.n	bc4 <tcc_init+0x144>
     c60:	9804      	ldr	r0, [sp, #16]
     c62:	e7af      	b.n	bc4 <tcc_init+0x144>
     c64:	4644      	mov	r4, r8
     c66:	4655      	mov	r5, sl
     c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     c6a:	4a58      	ldr	r2, [pc, #352]	; (dcc <tcc_init+0x34c>)
     c6c:	5cd2      	ldrb	r2, [r2, r3]
     c6e:	4691      	mov	r9, r2
     c70:	4651      	mov	r1, sl
     c72:	3150      	adds	r1, #80	; 0x50
     c74:	4650      	mov	r0, sl
     c76:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     c78:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     c7a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     c7c:	2601      	movs	r6, #1
     c7e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     c80:	2602      	movs	r6, #2
     c82:	36ff      	adds	r6, #255	; 0xff
     c84:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     c86:	2680      	movs	r6, #128	; 0x80
     c88:	0276      	lsls	r6, r6, #9
     c8a:	46b0      	mov	r8, r6
     c8c:	46a4      	mov	ip, r4
     c8e:	001c      	movs	r4, r3
     c90:	464b      	mov	r3, r9
     c92:	e00f      	b.n	cb4 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     c94:	7806      	ldrb	r6, [r0, #0]
     c96:	2e00      	cmp	r6, #0
     c98:	d007      	beq.n	caa <tcc_init+0x22a>
			if (i >= ow_num) {
     c9a:	4293      	cmp	r3, r2
     c9c:	d800      	bhi.n	ca0 <tcc_init+0x220>
     c9e:	e0a1      	b.n	de4 <tcc_init+0x364>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     ca0:	2e02      	cmp	r6, #2
     ca2:	d014      	beq.n	cce <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     ca4:	4656      	mov	r6, sl
     ca6:	4096      	lsls	r6, r2
     ca8:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     caa:	3201      	adds	r2, #1
     cac:	3101      	adds	r1, #1
     cae:	3002      	adds	r0, #2
     cb0:	2a08      	cmp	r2, #8
     cb2:	d010      	beq.n	cd6 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     cb4:	780e      	ldrb	r6, [r1, #0]
     cb6:	2e00      	cmp	r6, #0
     cb8:	d0ec      	beq.n	c94 <tcc_init+0x214>
			if (i >= ow_num) {
     cba:	4293      	cmp	r3, r2
     cbc:	d800      	bhi.n	cc0 <tcc_init+0x240>
     cbe:	e08f      	b.n	de0 <tcc_init+0x360>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     cc0:	4646      	mov	r6, r8
     cc2:	4096      	lsls	r6, r2
     cc4:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     cc6:	7806      	ldrb	r6, [r0, #0]
     cc8:	2e00      	cmp	r6, #0
     cca:	d1e9      	bne.n	ca0 <tcc_init+0x220>
     ccc:	e7ed      	b.n	caa <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     cce:	465e      	mov	r6, fp
     cd0:	4096      	lsls	r6, r2
     cd2:	4337      	orrs	r7, r6
     cd4:	e7e9      	b.n	caa <tcc_init+0x22a>
     cd6:	4699      	mov	r9, r3
     cd8:	0023      	movs	r3, r4
     cda:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     cdc:	7e6a      	ldrb	r2, [r5, #25]
     cde:	0112      	lsls	r2, r2, #4
     ce0:	2130      	movs	r1, #48	; 0x30
     ce2:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     ce4:	7e28      	ldrb	r0, [r5, #24]
     ce6:	2207      	movs	r2, #7
     ce8:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     cea:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     cec:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     cee:	2080      	movs	r0, #128	; 0x80
     cf0:	0240      	lsls	r0, r0, #9
     cf2:	000e      	movs	r6, r1
     cf4:	e002      	b.n	cfc <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     cf6:	3201      	adds	r2, #1
     cf8:	2a04      	cmp	r2, #4
     cfa:	d07b      	beq.n	df4 <tcc_init+0x374>
		if (wav_cfg->wave_polarity[n]) {
     cfc:	18a9      	adds	r1, r5, r2
     cfe:	7d09      	ldrb	r1, [r1, #20]
     d00:	2900      	cmp	r1, #0
     d02:	d0f8      	beq.n	cf6 <tcc_init+0x276>
			if (n >= cc_num) {
     d04:	9905      	ldr	r1, [sp, #20]
     d06:	4291      	cmp	r1, r2
     d08:	dd6e      	ble.n	de8 <tcc_init+0x368>
			wave |= (TCC_WAVE_POL0 << n);
     d0a:	0001      	movs	r1, r0
     d0c:	4091      	lsls	r1, r2
     d0e:	430e      	orrs	r6, r1
     d10:	e7f1      	b.n	cf6 <tcc_init+0x276>
     d12:	3401      	adds	r4, #1
     d14:	3504      	adds	r5, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     d16:	42b4      	cmp	r4, r6
     d18:	d014      	beq.n	d44 <tcc_init+0x2c4>
		if (!config->pins.enable_wave_out_pin[i]) {
     d1a:	7823      	ldrb	r3, [r4, #0]
     d1c:	2b00      	cmp	r3, #0
     d1e:	d0f8      	beq.n	d12 <tcc_init+0x292>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d20:	ab0c      	add	r3, sp, #48	; 0x30
     d22:	464a      	mov	r2, r9
     d24:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     d26:	2300      	movs	r3, #0
     d28:	aa0c      	add	r2, sp, #48	; 0x30
     d2a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     d2c:	0013      	movs	r3, r2
     d2e:	2220      	movs	r2, #32
     d30:	18aa      	adds	r2, r5, r2
     d32:	7812      	ldrb	r2, [r2, #0]
     d34:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     d36:	464a      	mov	r2, r9
     d38:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     d3a:	7828      	ldrb	r0, [r5, #0]
     d3c:	0019      	movs	r1, r3
     d3e:	4b25      	ldr	r3, [pc, #148]	; (dd4 <tcc_init+0x354>)
     d40:	4798      	blx	r3
     d42:	e7e6      	b.n	d12 <tcc_init+0x292>
     d44:	4644      	mov	r4, r8
     d46:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     d4a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     d4e:	0212      	lsls	r2, r2, #8
     d50:	4313      	orrs	r3, r2
     d52:	9a02      	ldr	r2, [sp, #8]
     d54:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     d56:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     d58:	2204      	movs	r2, #4
     d5a:	68a3      	ldr	r3, [r4, #8]
     d5c:	421a      	tst	r2, r3
     d5e:	d1fc      	bne.n	d5a <tcc_init+0x2da>
	hw->CTRLBCLR.reg = 0xFF;
     d60:	23ff      	movs	r3, #255	; 0xff
     d62:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     d64:	2204      	movs	r2, #4
     d66:	68a3      	ldr	r3, [r4, #8]
     d68:	421a      	tst	r2, r3
     d6a:	d1fc      	bne.n	d66 <tcc_init+0x2e6>
	hw->CTRLBSET.reg = ctrlb;
     d6c:	466b      	mov	r3, sp
     d6e:	7e1b      	ldrb	r3, [r3, #24]
     d70:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     d74:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     d78:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     d7a:	61a7      	str	r7, [r4, #24]
	hw->WAVE.reg = waves[0];
     d7c:	4653      	mov	r3, sl
     d7e:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     d80:	2210      	movs	r2, #16
     d82:	68a3      	ldr	r3, [r4, #8]
     d84:	421a      	tst	r2, r3
     d86:	d1fc      	bne.n	d82 <tcc_init+0x302>
	hw->COUNT.reg = config->counter.count;
     d88:	682b      	ldr	r3, [r5, #0]
     d8a:	6363      	str	r3, [r4, #52]	; 0x34
	hw->PER.reg = (config->counter.period);
     d8c:	686b      	ldr	r3, [r5, #4]
     d8e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     d90:	9905      	ldr	r1, [sp, #20]
     d92:	2900      	cmp	r1, #0
     d94:	dd2a      	ble.n	dec <tcc_init+0x36c>
     d96:	351c      	adds	r5, #28
     d98:	2200      	movs	r2, #0
		hw->CC[i].reg = (config->compare.match[i]);
     d9a:	cd01      	ldmia	r5!, {r0}
     d9c:	0013      	movs	r3, r2
     d9e:	3310      	adds	r3, #16
     da0:	009b      	lsls	r3, r3, #2
     da2:	18e3      	adds	r3, r4, r3
     da4:	6058      	str	r0, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     da6:	3201      	adds	r2, #1
     da8:	428a      	cmp	r2, r1
     daa:	dbf6      	blt.n	d9a <tcc_init+0x31a>
	return STATUS_OK;
     dac:	2000      	movs	r0, #0
     dae:	e681      	b.n	ab4 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     db0:	2017      	movs	r0, #23
     db2:	e67f      	b.n	ab4 <tcc_init+0x34>
     db4:	2017      	movs	r0, #23
     db6:	e67d      	b.n	ab4 <tcc_init+0x34>
     db8:	2017      	movs	r0, #23
     dba:	e67b      	b.n	ab4 <tcc_init+0x34>
     dbc:	000008a5 	.word	0x000008a5
     dc0:	40000800 	.word	0x40000800
     dc4:	000019e0 	.word	0x000019e0
     dc8:	000019f4 	.word	0x000019f4
     dcc:	00001a00 	.word	0x00001a00
     dd0:	000019ec 	.word	0x000019ec
     dd4:	00001639 	.word	0x00001639
     dd8:	2017      	movs	r0, #23
     dda:	e66b      	b.n	ab4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     ddc:	2017      	movs	r0, #23
     dde:	e669      	b.n	ab4 <tcc_init+0x34>
			if (i >= ow_num) {
     de0:	2017      	movs	r0, #23
     de2:	e667      	b.n	ab4 <tcc_init+0x34>
			if (i >= ow_num) {
     de4:	2017      	movs	r0, #23
     de6:	e665      	b.n	ab4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     de8:	2017      	movs	r0, #23
     dea:	e663      	b.n	ab4 <tcc_init+0x34>
	return STATUS_OK;
     dec:	2000      	movs	r0, #0
     dee:	e661      	b.n	ab4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     df0:	2017      	movs	r0, #23
     df2:	e65f      	b.n	ab4 <tcc_init+0x34>
     df4:	46b2      	mov	sl, r6
	module_inst->hw = hw;
     df6:	9901      	ldr	r1, [sp, #4]
     df8:	600c      	str	r4, [r1, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     dfa:	22a0      	movs	r2, #160	; 0xa0
     dfc:	5caa      	ldrb	r2, [r5, r2]
     dfe:	710a      	strb	r2, [r1, #4]
	gclk_chan_config.source_generator = config->counter.clock_source;
     e00:	a90d      	add	r1, sp, #52	; 0x34
     e02:	7aaa      	ldrb	r2, [r5, #10]
     e04:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     e06:	4a0c      	ldr	r2, [pc, #48]	; (e38 <tcc_init+0x3b8>)
     e08:	5cd6      	ldrb	r6, [r2, r3]
     e0a:	0030      	movs	r0, r6
     e0c:	4b0b      	ldr	r3, [pc, #44]	; (e3c <tcc_init+0x3bc>)
     e0e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     e10:	0030      	movs	r0, r6
     e12:	4b0b      	ldr	r3, [pc, #44]	; (e40 <tcc_init+0x3c0>)
     e14:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     e16:	464b      	mov	r3, r9
     e18:	2b00      	cmp	r3, #0
     e1a:	dd95      	ble.n	d48 <tcc_init+0x2c8>
     e1c:	2358      	movs	r3, #88	; 0x58
     e1e:	4698      	mov	r8, r3
     e20:	44a8      	add	r8, r5
     e22:	464e      	mov	r6, r9
     e24:	3698      	adds	r6, #152	; 0x98
     e26:	19ae      	adds	r6, r5, r6
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e28:	3b57      	subs	r3, #87	; 0x57
     e2a:	4699      	mov	r9, r3
     e2c:	46ab      	mov	fp, r5
     e2e:	4645      	mov	r5, r8
     e30:	46a0      	mov	r8, r4
     e32:	9c08      	ldr	r4, [sp, #32]
     e34:	e771      	b.n	d1a <tcc_init+0x29a>
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	000019f0 	.word	0x000019f0
     e3c:	0000156d 	.word	0x0000156d
     e40:	000014fd 	.word	0x000014fd

00000e44 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
     e44:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
     e46:	7903      	ldrb	r3, [r0, #4]
     e48:	4c01      	ldr	r4, [pc, #4]	; (e50 <tcc_set_compare_value+0xc>)
     e4a:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
     e4c:	bd10      	pop	{r4, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	000008d9 	.word	0x000008d9

00000e54 <main>:
	adc_enable(&adc_instance);
}


int main(void)
{
     e54:	b5f0      	push	{r4, r5, r6, r7, lr}
     e56:	46de      	mov	lr, fp
     e58:	4657      	mov	r7, sl
     e5a:	464e      	mov	r6, r9
     e5c:	4645      	mov	r5, r8
     e5e:	b5e0      	push	{r5, r6, r7, lr}
     e60:	b0ab      	sub	sp, #172	; 0xac
	system_init();
     e62:	4ba7      	ldr	r3, [pc, #668]	; (1100 <main+0x2ac>)
     e64:	4798      	blx	r3
	tcc_get_config_defaults(&config_tcc, TCC0);
     e66:	4da7      	ldr	r5, [pc, #668]	; (1104 <main+0x2b0>)
     e68:	ac01      	add	r4, sp, #4
     e6a:	0029      	movs	r1, r5
     e6c:	0020      	movs	r0, r4
     e6e:	4ea6      	ldr	r6, [pc, #664]	; (1108 <main+0x2b4>)
     e70:	47b0      	blx	r6
	tcc_get_config_defaults(&config_tcc, TCC1);
     e72:	49a6      	ldr	r1, [pc, #664]	; (110c <main+0x2b8>)
     e74:	0020      	movs	r0, r4
     e76:	47b0      	blx	r6
	config_tcc.counter.period = 65535;
     e78:	4ba5      	ldr	r3, [pc, #660]	; (1110 <main+0x2bc>)
     e7a:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     e7c:	2202      	movs	r2, #2
     e7e:	7622      	strb	r2, [r4, #24]
	config_tcc.compare.match[3] = 65535;
     e80:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.compare.match[0] = 65535;
     e82:	61e3      	str	r3, [r4, #28]
	config_tcc.compare.match[1] = 65535;
     e84:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[7] = true;
     e86:	2301      	movs	r3, #1
     e88:	329d      	adds	r2, #157	; 0x9d
     e8a:	54a3      	strb	r3, [r4, r2]
	config_tcc.pins.wave_out_pin[7] = PIN_PB13F_TCC0_WO7;
     e8c:	3a72      	subs	r2, #114	; 0x72
     e8e:	6762      	str	r2, [r4, #116]	; 0x74
	config_tcc.pins.wave_out_pin_mux[7] = MUX_PB13F_TCC0_WO7;
     e90:	2105      	movs	r1, #5
     e92:	3267      	adds	r2, #103	; 0x67
     e94:	50a1      	str	r1, [r4, r2]
	config_tcc.pins.enable_wave_out_pin[0] = true;
     e96:	3204      	adds	r2, #4
     e98:	54a3      	strb	r3, [r4, r2]
	config_tcc.pins.wave_out_pin[0] = PIN_PB30E_TCC0_WO0;
     e9a:	3a5a      	subs	r2, #90	; 0x5a
     e9c:	65a2      	str	r2, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[0] = MUX_PB30E_TCC0_WO0;
     e9e:	3a3a      	subs	r2, #58	; 0x3a
     ea0:	67a2      	str	r2, [r4, #120]	; 0x78
	config_tcc.pins.enable_wave_out_pin[1] = true;
     ea2:	3194      	adds	r1, #148	; 0x94
     ea4:	5463      	strb	r3, [r4, r1]
	config_tcc.pins.wave_out_pin[1] = PIN_PA09E_TCC0_WO1;
     ea6:	3308      	adds	r3, #8
     ea8:	65e3      	str	r3, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[1] = MUX_PA09E_TCC0_WO1;
     eaa:	67e2      	str	r2, [r4, #124]	; 0x7c
	tcc_init(&tcc_instance, TCC0, &config_tcc);
     eac:	4e99      	ldr	r6, [pc, #612]	; (1114 <main+0x2c0>)
     eae:	0022      	movs	r2, r4
     eb0:	0029      	movs	r1, r5
     eb2:	0030      	movs	r0, r6
     eb4:	4b98      	ldr	r3, [pc, #608]	; (1118 <main+0x2c4>)
     eb6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     eb8:	6833      	ldr	r3, [r6, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     eba:	2202      	movs	r2, #2
     ebc:	6899      	ldr	r1, [r3, #8]
     ebe:	420a      	tst	r2, r1
     ec0:	d1fc      	bne.n	ebc <main+0x68>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     ec2:	681a      	ldr	r2, [r3, #0]
     ec4:	2502      	movs	r5, #2
     ec6:	432a      	orrs	r2, r5
     ec8:	601a      	str	r2, [r3, #0]
	configure_tcc();
	delay_init();
     eca:	4b94      	ldr	r3, [pc, #592]	; (111c <main+0x2c8>)
     ecc:	4798      	blx	r3
	extint_chan_get_config_defaults(&config_extint_chan);
     ece:	ac01      	add	r4, sp, #4
     ed0:	0020      	movs	r0, r4
     ed2:	4b93      	ldr	r3, [pc, #588]	; (1120 <main+0x2cc>)
     ed4:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PA20A_EIC_EXTINT4;
     ed6:	2314      	movs	r3, #20
     ed8:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = MUX_PA20A_EIC_EXTINT4;
     eda:	2300      	movs	r3, #0
     edc:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_DOWN;
     ede:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_HIGH;
     ee0:	3304      	adds	r3, #4
     ee2:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(4, &config_extint_chan);
     ee4:	0021      	movs	r1, r4
     ee6:	2004      	movs	r0, #4
     ee8:	4b8e      	ldr	r3, [pc, #568]	; (1124 <main+0x2d0>)
     eea:	4798      	blx	r3
	adc_get_config_defaults(&conf_adc);
     eec:	0020      	movs	r0, r4
     eee:	4b8e      	ldr	r3, [pc, #568]	; (1128 <main+0x2d4>)
     ef0:	4798      	blx	r3
	conf_adc.positive_input = ADC_POSITIVE_INPUT_PIN10;
     ef2:	230a      	movs	r3, #10
     ef4:	7123      	strb	r3, [r4, #4]
	adc_init(&adc_instance, ADC1, &conf_adc);
     ef6:	4d8d      	ldr	r5, [pc, #564]	; (112c <main+0x2d8>)
     ef8:	0022      	movs	r2, r4
     efa:	498d      	ldr	r1, [pc, #564]	; (1130 <main+0x2dc>)
     efc:	0028      	movs	r0, r5
     efe:	4b8d      	ldr	r3, [pc, #564]	; (1134 <main+0x2e0>)
     f00:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
     f02:	682c      	ldr	r4, [r5, #0]
     f04:	8c23      	ldrh	r3, [r4, #32]
     f06:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     f08:	2b00      	cmp	r3, #0
     f0a:	d1fb      	bne.n	f04 <main+0xb0>
			_adc_get_inst_index(adc_module)));
     f0c:	0020      	movs	r0, r4
     f0e:	4b8a      	ldr	r3, [pc, #552]	; (1138 <main+0x2e4>)
     f10:	4798      	blx	r3
	return (enum system_interrupt_vector)adc_interrupt_vectors[inst_num];
     f12:	4b8a      	ldr	r3, [pc, #552]	; (113c <main+0x2e8>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f14:	5c1b      	ldrb	r3, [r3, r0]
     f16:	221f      	movs	r2, #31
     f18:	401a      	ands	r2, r3
     f1a:	2301      	movs	r3, #1
     f1c:	4093      	lsls	r3, r2
     f1e:	4a88      	ldr	r2, [pc, #544]	; (1140 <main+0x2ec>)
     f20:	6013      	str	r3, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     f22:	2307      	movs	r3, #7
     f24:	7123      	strb	r3, [r4, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     f26:	71a3      	strb	r3, [r4, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     f28:	7823      	ldrb	r3, [r4, #0]
     f2a:	2202      	movs	r2, #2
     f2c:	4313      	orrs	r3, r2
     f2e:	7023      	strb	r3, [r4, #0]
	Adc *const adc_module = module_inst->hw;
     f30:	4b7e      	ldr	r3, [pc, #504]	; (112c <main+0x2d8>)
     f32:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
     f34:	8c13      	ldrh	r3, [r2, #32]
     f36:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     f38:	2b00      	cmp	r3, #0
     f3a:	d1fb      	bne.n	f34 <main+0xe0>

	uint16_t result = 10;

	int devideo = 0;
	int rgbtype = 1;
	int tmr = 250;
     f3c:	24fa      	movs	r4, #250	; 0xfa
	int rgbtype = 1;
     f3e:	3301      	adds	r3, #1
     f40:	469b      	mov	fp, r3
			}
			devideo	= 0;
			for (int i = 1; i < 255; i++) {
				devideo = devideo + 255;
				tcc_set_compare_value(&tcc_instance, 3, devideo);
				delay_us(tmr);
     f42:	4b80      	ldr	r3, [pc, #512]	; (1144 <main+0x2f0>)
     f44:	4698      	mov	r8, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     f46:	2304      	movs	r3, #4
     f48:	4699      	mov	r9, r3
     f4a:	e0d0      	b.n	10ee <main+0x29a>
				delay_us(tmr);
     f4c:	2001      	movs	r0, #1
     f4e:	47b8      	blx	r7
			for (int i = 1; i < 255; i++) {
     f50:	4b7d      	ldr	r3, [pc, #500]	; (1148 <main+0x2f4>)
     f52:	429d      	cmp	r5, r3
     f54:	d00a      	beq.n	f6c <main+0x118>
				devideo = devideo - 255;
     f56:	3dff      	subs	r5, #255	; 0xff
				tcc_set_compare_value(&tcc_instance, 3, devideo);
     f58:	002a      	movs	r2, r5
     f5a:	2103      	movs	r1, #3
     f5c:	486d      	ldr	r0, [pc, #436]	; (1114 <main+0x2c0>)
     f5e:	47b0      	blx	r6
				delay_us(tmr);
     f60:	2c00      	cmp	r4, #0
     f62:	d0f3      	beq.n	f4c <main+0xf8>
     f64:	0020      	movs	r0, r4
     f66:	4b77      	ldr	r3, [pc, #476]	; (1144 <main+0x2f0>)
     f68:	4798      	blx	r3
     f6a:	e7f1      	b.n	f50 <main+0xfc>
     f6c:	2500      	movs	r5, #0
				tcc_set_compare_value(&tcc_instance, 3, devideo);
     f6e:	4e69      	ldr	r6, [pc, #420]	; (1114 <main+0x2c0>)
     f70:	4f76      	ldr	r7, [pc, #472]	; (114c <main+0x2f8>)
     f72:	e004      	b.n	f7e <main+0x12a>
				delay_us(tmr);
     f74:	2001      	movs	r0, #1
     f76:	47c0      	blx	r8
			for (int i = 1; i < 255; i++) {
     f78:	4b75      	ldr	r3, [pc, #468]	; (1150 <main+0x2fc>)
     f7a:	429d      	cmp	r5, r3
     f7c:	d00a      	beq.n	f94 <main+0x140>
				devideo = devideo + 255;
     f7e:	35ff      	adds	r5, #255	; 0xff
				tcc_set_compare_value(&tcc_instance, 3, devideo);
     f80:	002a      	movs	r2, r5
     f82:	2103      	movs	r1, #3
     f84:	0030      	movs	r0, r6
     f86:	47b8      	blx	r7
				delay_us(tmr);
     f88:	2c00      	cmp	r4, #0
     f8a:	d0f3      	beq.n	f74 <main+0x120>
     f8c:	0020      	movs	r0, r4
     f8e:	4b6d      	ldr	r3, [pc, #436]	; (1144 <main+0x2f0>)
     f90:	4798      	blx	r3
     f92:	e7f1      	b.n	f78 <main+0x124>
				
			}
		}
		if ((rgbtype == 0)||(rgbtype == 2)) {
     f94:	465d      	mov	r5, fp
     f96:	2302      	movs	r3, #2
     f98:	439d      	bics	r5, r3
     f9a:	d12e      	bne.n	ffa <main+0x1a6>
     f9c:	4e5c      	ldr	r6, [pc, #368]	; (1110 <main+0x2bc>)
			devideo	= 65535;
			for (int i = 1; i < 255; i++) {
				devideo = devideo - 255;
				tcc_set_compare_value(&tcc_instance, 0, devideo);
     f9e:	4f6b      	ldr	r7, [pc, #428]	; (114c <main+0x2f8>)
				delay_us(tmr);
     fa0:	4b68      	ldr	r3, [pc, #416]	; (1144 <main+0x2f0>)
     fa2:	469a      	mov	sl, r3
     fa4:	e004      	b.n	fb0 <main+0x15c>
     fa6:	2001      	movs	r0, #1
     fa8:	47d0      	blx	sl
			for (int i = 1; i < 255; i++) {
     faa:	4b67      	ldr	r3, [pc, #412]	; (1148 <main+0x2f4>)
     fac:	429e      	cmp	r6, r3
     fae:	d00a      	beq.n	fc6 <main+0x172>
				devideo = devideo - 255;
     fb0:	3eff      	subs	r6, #255	; 0xff
				tcc_set_compare_value(&tcc_instance, 0, devideo);
     fb2:	0032      	movs	r2, r6
     fb4:	2100      	movs	r1, #0
     fb6:	4857      	ldr	r0, [pc, #348]	; (1114 <main+0x2c0>)
     fb8:	47b8      	blx	r7
				delay_us(tmr);
     fba:	2c00      	cmp	r4, #0
     fbc:	d0f3      	beq.n	fa6 <main+0x152>
     fbe:	0020      	movs	r0, r4
     fc0:	4b60      	ldr	r3, [pc, #384]	; (1144 <main+0x2f0>)
     fc2:	4798      	blx	r3
     fc4:	e7f1      	b.n	faa <main+0x156>
				
			}
			devideo	= 0;
			for (int i = 1; i < 255; i++) {
				devideo = devideo + 255;
				tcc_set_compare_value(&tcc_instance, 0, devideo);
     fc6:	4f61      	ldr	r7, [pc, #388]	; (114c <main+0x2f8>)
				delay_us(tmr);
     fc8:	4e5e      	ldr	r6, [pc, #376]	; (1144 <main+0x2f0>)
     fca:	e005      	b.n	fd8 <main+0x184>
     fcc:	2001      	movs	r0, #1
     fce:	4b5d      	ldr	r3, [pc, #372]	; (1144 <main+0x2f0>)
     fd0:	4798      	blx	r3
			for (int i = 1; i < 255; i++) {
     fd2:	4b5f      	ldr	r3, [pc, #380]	; (1150 <main+0x2fc>)
     fd4:	429d      	cmp	r5, r3
     fd6:	d009      	beq.n	fec <main+0x198>
				devideo = devideo + 255;
     fd8:	35ff      	adds	r5, #255	; 0xff
				tcc_set_compare_value(&tcc_instance, 0, devideo);
     fda:	002a      	movs	r2, r5
     fdc:	2100      	movs	r1, #0
     fde:	484d      	ldr	r0, [pc, #308]	; (1114 <main+0x2c0>)
     fe0:	47b8      	blx	r7
				delay_us(tmr);
     fe2:	2c00      	cmp	r4, #0
     fe4:	d0f2      	beq.n	fcc <main+0x178>
     fe6:	0020      	movs	r0, r4
     fe8:	47b0      	blx	r6
     fea:	e7f2      	b.n	fd2 <main+0x17e>
				
			}
		}
		if ((rgbtype == 0)||(rgbtype == 3)) {
     fec:	465b      	mov	r3, fp
     fee:	2b00      	cmp	r3, #0
     ff0:	d103      	bne.n	ffa <main+0x1a6>
     ff2:	4d47      	ldr	r5, [pc, #284]	; (1110 <main+0x2bc>)
			devideo	= 65535;
			for (int i = 1; i < 255; i++) {
				devideo = devideo - 255;
				tcc_set_compare_value(&tcc_instance, 1, devideo);
     ff4:	4f55      	ldr	r7, [pc, #340]	; (114c <main+0x2f8>)
				delay_us(tmr);
     ff6:	4e53      	ldr	r6, [pc, #332]	; (1144 <main+0x2f0>)
     ff8:	e00c      	b.n	1014 <main+0x1c0>
		if ((rgbtype == 0)||(rgbtype == 3)) {
     ffa:	465b      	mov	r3, fp
     ffc:	2b03      	cmp	r3, #3
     ffe:	d0f8      	beq.n	ff2 <main+0x19e>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	return (eic_module->INTFLAG.reg & eic_mask);
    1000:	4b54      	ldr	r3, [pc, #336]	; (1154 <main+0x300>)
    1002:	695b      	ldr	r3, [r3, #20]
				tcc_set_compare_value(&tcc_instance, 1, devideo);
				delay_us(tmr);
				
			}
		}
		if (extint_chan_is_detected(4)) {
    1004:	06db      	lsls	r3, r3, #27
    1006:	d42b      	bmi.n	1060 <main+0x20c>
    1008:	e033      	b.n	1072 <main+0x21e>
				delay_us(tmr);
    100a:	2001      	movs	r0, #1
    100c:	47b0      	blx	r6
			for (int i = 1; i < 255; i++) {
    100e:	4b4e      	ldr	r3, [pc, #312]	; (1148 <main+0x2f4>)
    1010:	429d      	cmp	r5, r3
    1012:	d00a      	beq.n	102a <main+0x1d6>
				devideo = devideo - 255;
    1014:	3dff      	subs	r5, #255	; 0xff
				tcc_set_compare_value(&tcc_instance, 1, devideo);
    1016:	002a      	movs	r2, r5
    1018:	2101      	movs	r1, #1
    101a:	483e      	ldr	r0, [pc, #248]	; (1114 <main+0x2c0>)
    101c:	47b8      	blx	r7
				delay_us(tmr);
    101e:	2c00      	cmp	r4, #0
    1020:	d0f3      	beq.n	100a <main+0x1b6>
    1022:	0020      	movs	r0, r4
    1024:	4b47      	ldr	r3, [pc, #284]	; (1144 <main+0x2f0>)
    1026:	4798      	blx	r3
    1028:	e7f1      	b.n	100e <main+0x1ba>
    102a:	2500      	movs	r5, #0
				tcc_set_compare_value(&tcc_instance, 1, devideo);
    102c:	4f47      	ldr	r7, [pc, #284]	; (114c <main+0x2f8>)
				delay_us(tmr);
    102e:	4e45      	ldr	r6, [pc, #276]	; (1144 <main+0x2f0>)
    1030:	e004      	b.n	103c <main+0x1e8>
    1032:	2001      	movs	r0, #1
    1034:	47b0      	blx	r6
			for (int i = 1; i < 255; i++) {
    1036:	4b46      	ldr	r3, [pc, #280]	; (1150 <main+0x2fc>)
    1038:	429d      	cmp	r5, r3
    103a:	d00a      	beq.n	1052 <main+0x1fe>
				devideo = devideo + 255;
    103c:	35ff      	adds	r5, #255	; 0xff
				tcc_set_compare_value(&tcc_instance, 1, devideo);
    103e:	002a      	movs	r2, r5
    1040:	2101      	movs	r1, #1
    1042:	4834      	ldr	r0, [pc, #208]	; (1114 <main+0x2c0>)
    1044:	47b8      	blx	r7
				delay_us(tmr);
    1046:	2c00      	cmp	r4, #0
    1048:	d0f3      	beq.n	1032 <main+0x1de>
    104a:	0020      	movs	r0, r4
    104c:	4b3d      	ldr	r3, [pc, #244]	; (1144 <main+0x2f0>)
    104e:	4798      	blx	r3
    1050:	e7f1      	b.n	1036 <main+0x1e2>
    1052:	4b40      	ldr	r3, [pc, #256]	; (1154 <main+0x300>)
    1054:	695b      	ldr	r3, [r3, #20]
		if (extint_chan_is_detected(4)) {
    1056:	06db      	lsls	r3, r3, #27
    1058:	d50b      	bpl.n	1072 <main+0x21e>
			// Do something in response to EXTINT edge detection
			if (rgbtype == 3){
    105a:	465b      	mov	r3, fp
    105c:	2b03      	cmp	r3, #3
    105e:	d018      	beq.n	1092 <main+0x23e>
				rgbtype = 0;
			} else {
				rgbtype++;
    1060:	465b      	mov	r3, fp
    1062:	3301      	adds	r3, #1
    1064:	469b      	mov	fp, r3
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1066:	2210      	movs	r2, #16
    1068:	4b3a      	ldr	r3, [pc, #232]	; (1154 <main+0x300>)
    106a:	615a      	str	r2, [r3, #20]
			}
			extint_chan_clear_detected(4);
			delay_ms(25);
    106c:	2019      	movs	r0, #25
    106e:	4b3a      	ldr	r3, [pc, #232]	; (1158 <main+0x304>)
    1070:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1072:	4b2e      	ldr	r3, [pc, #184]	; (112c <main+0x2d8>)
    1074:	6819      	ldr	r1, [r3, #0]
    1076:	8c0b      	ldrh	r3, [r1, #32]
    1078:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    107a:	2b00      	cmp	r3, #0
    107c:	d1fb      	bne.n	1076 <main+0x222>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    107e:	7e0b      	ldrb	r3, [r1, #24]
    1080:	2202      	movs	r2, #2
    1082:	4313      	orrs	r3, r2
    1084:	760b      	strb	r3, [r1, #24]
    1086:	8c0b      	ldrh	r3, [r1, #32]
    1088:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    108a:	2b00      	cmp	r3, #0
    108c:	d1fb      	bne.n	1086 <main+0x232>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    108e:	2001      	movs	r0, #1
    1090:	e004      	b.n	109c <main+0x248>
				rgbtype = 0;
    1092:	2300      	movs	r3, #0
    1094:	469b      	mov	fp, r3
    1096:	e7e6      	b.n	1066 <main+0x212>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1098:	4210      	tst	r0, r2
    109a:	d10e      	bne.n	10ba <main+0x266>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    109c:	798b      	ldrb	r3, [r1, #6]
    109e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    10a0:	0002      	movs	r2, r0
    10a2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    10a4:	464c      	mov	r4, r9
    10a6:	421c      	tst	r4, r3
    10a8:	d001      	beq.n	10ae <main+0x25a>
		status_flags |= ADC_STATUS_WINDOW;
    10aa:	2402      	movs	r4, #2
    10ac:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    10ae:	2402      	movs	r4, #2
    10b0:	421c      	tst	r4, r3
    10b2:	d0f1      	beq.n	1098 <main+0x244>
		status_flags |= ADC_STATUS_OVERRUN;
    10b4:	464b      	mov	r3, r9
    10b6:	431a      	orrs	r2, r3
    10b8:	e7ee      	b.n	1098 <main+0x244>
	*result = adc_module->RESULT.reg;
    10ba:	8c88      	ldrh	r0, [r1, #36]	; 0x24
    10bc:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    10be:	2301      	movs	r3, #1
    10c0:	718b      	strb	r3, [r1, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    10c2:	798a      	ldrb	r2, [r1, #6]
    10c4:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    10c6:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    10c8:	464c      	mov	r4, r9
    10ca:	4214      	tst	r4, r2
    10cc:	d001      	beq.n	10d2 <main+0x27e>
		status_flags |= ADC_STATUS_WINDOW;
    10ce:	2402      	movs	r4, #2
    10d0:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    10d2:	2402      	movs	r4, #2
    10d4:	4214      	tst	r4, r2
    10d6:	d001      	beq.n	10dc <main+0x288>
		status_flags |= ADC_STATUS_OVERRUN;
    10d8:	464a      	mov	r2, r9
    10da:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    10dc:	464a      	mov	r2, r9
    10de:	421a      	tst	r2, r3
    10e0:	d001      	beq.n	10e6 <main+0x292>
	adc_module->INTFLAG.reg = int_flags;
    10e2:	2302      	movs	r3, #2
    10e4:	718b      	strb	r3, [r1, #6]
		}
		adc_start_conversion(&adc_instance);
		do {
			/* Wait for conversion to be done and read out result */
		} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
		tmr = result / 10;
    10e6:	210a      	movs	r1, #10
    10e8:	4b1c      	ldr	r3, [pc, #112]	; (115c <main+0x308>)
    10ea:	4798      	blx	r3
    10ec:	b284      	uxth	r4, r0
		if ((rgbtype == 0)||(rgbtype == 1)) {
    10ee:	465b      	mov	r3, fp
    10f0:	2b01      	cmp	r3, #1
    10f2:	d900      	bls.n	10f6 <main+0x2a2>
    10f4:	e74e      	b.n	f94 <main+0x140>
    10f6:	4d06      	ldr	r5, [pc, #24]	; (1110 <main+0x2bc>)
				tcc_set_compare_value(&tcc_instance, 3, devideo);
    10f8:	4e14      	ldr	r6, [pc, #80]	; (114c <main+0x2f8>)
				delay_us(tmr);
    10fa:	4f12      	ldr	r7, [pc, #72]	; (1144 <main+0x2f0>)
    10fc:	e72b      	b.n	f56 <main+0x102>
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	00001669 	.word	0x00001669
    1104:	42002400 	.word	0x42002400
    1108:	00000935 	.word	0x00000935
    110c:	42002800 	.word	0x42002800
    1110:	0000ffff 	.word	0x0000ffff
    1114:	20000044 	.word	0x20000044
    1118:	00000a81 	.word	0x00000a81
    111c:	00001161 	.word	0x00001161
    1120:	00000805 	.word	0x00000805
    1124:	00000819 	.word	0x00000819
    1128:	00000141 	.word	0x00000141
    112c:	2000004c 	.word	0x2000004c
    1130:	42004800 	.word	0x42004800
    1134:	00000185 	.word	0x00000185
    1138:	0000011d 	.word	0x0000011d
    113c:	00001a04 	.word	0x00001a04
    1140:	e000e100 	.word	0xe000e100
    1144:	000011a1 	.word	0x000011a1
    1148:	000002fd 	.word	0x000002fd
    114c:	00000e45 	.word	0x00000e45
    1150:	0000fd02 	.word	0x0000fd02
    1154:	40002800 	.word	0x40002800
    1158:	000011cd 	.word	0x000011cd
    115c:	00001721 	.word	0x00001721

00001160 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1160:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1162:	2000      	movs	r0, #0
    1164:	4b08      	ldr	r3, [pc, #32]	; (1188 <delay_init+0x28>)
    1166:	4798      	blx	r3
    1168:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    116a:	4c08      	ldr	r4, [pc, #32]	; (118c <delay_init+0x2c>)
    116c:	21fa      	movs	r1, #250	; 0xfa
    116e:	0089      	lsls	r1, r1, #2
    1170:	47a0      	blx	r4
    1172:	4b07      	ldr	r3, [pc, #28]	; (1190 <delay_init+0x30>)
    1174:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1176:	4907      	ldr	r1, [pc, #28]	; (1194 <delay_init+0x34>)
    1178:	0028      	movs	r0, r5
    117a:	47a0      	blx	r4
    117c:	4b06      	ldr	r3, [pc, #24]	; (1198 <delay_init+0x38>)
    117e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1180:	2205      	movs	r2, #5
    1182:	4b06      	ldr	r3, [pc, #24]	; (119c <delay_init+0x3c>)
    1184:	601a      	str	r2, [r3, #0]
}
    1186:	bd70      	pop	{r4, r5, r6, pc}
    1188:	00001491 	.word	0x00001491
    118c:	00001721 	.word	0x00001721
    1190:	20000000 	.word	0x20000000
    1194:	000f4240 	.word	0x000f4240
    1198:	20000004 	.word	0x20000004
    119c:	e000e010 	.word	0xe000e010

000011a0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    11a0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    11a2:	4b08      	ldr	r3, [pc, #32]	; (11c4 <delay_cycles_us+0x24>)
    11a4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    11a6:	4a08      	ldr	r2, [pc, #32]	; (11c8 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    11a8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    11aa:	2180      	movs	r1, #128	; 0x80
    11ac:	0249      	lsls	r1, r1, #9
	while (n--) {
    11ae:	3801      	subs	r0, #1
    11b0:	d307      	bcc.n	11c2 <delay_cycles_us+0x22>
	if (n > 0) {
    11b2:	2c00      	cmp	r4, #0
    11b4:	d0fb      	beq.n	11ae <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    11b6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    11b8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    11ba:	6813      	ldr	r3, [r2, #0]
    11bc:	420b      	tst	r3, r1
    11be:	d0fc      	beq.n	11ba <delay_cycles_us+0x1a>
    11c0:	e7f5      	b.n	11ae <delay_cycles_us+0xe>
	}
}
    11c2:	bd30      	pop	{r4, r5, pc}
    11c4:	20000004 	.word	0x20000004
    11c8:	e000e010 	.word	0xe000e010

000011cc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    11cc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    11ce:	4b08      	ldr	r3, [pc, #32]	; (11f0 <delay_cycles_ms+0x24>)
    11d0:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    11d2:	4a08      	ldr	r2, [pc, #32]	; (11f4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    11d4:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    11d6:	2180      	movs	r1, #128	; 0x80
    11d8:	0249      	lsls	r1, r1, #9
	while (n--) {
    11da:	3801      	subs	r0, #1
    11dc:	d307      	bcc.n	11ee <delay_cycles_ms+0x22>
	if (n > 0) {
    11de:	2c00      	cmp	r4, #0
    11e0:	d0fb      	beq.n	11da <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    11e2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    11e4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    11e6:	6813      	ldr	r3, [r2, #0]
    11e8:	420b      	tst	r3, r1
    11ea:	d0fc      	beq.n	11e6 <delay_cycles_ms+0x1a>
    11ec:	e7f5      	b.n	11da <delay_cycles_ms+0xe>
	}
}
    11ee:	bd30      	pop	{r4, r5, pc}
    11f0:	20000000 	.word	0x20000000
    11f4:	e000e010 	.word	0xe000e010

000011f8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    11f8:	4b0c      	ldr	r3, [pc, #48]	; (122c <cpu_irq_enter_critical+0x34>)
    11fa:	681b      	ldr	r3, [r3, #0]
    11fc:	2b00      	cmp	r3, #0
    11fe:	d106      	bne.n	120e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1200:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1204:	2b00      	cmp	r3, #0
    1206:	d007      	beq.n	1218 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1208:	2200      	movs	r2, #0
    120a:	4b09      	ldr	r3, [pc, #36]	; (1230 <cpu_irq_enter_critical+0x38>)
    120c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    120e:	4a07      	ldr	r2, [pc, #28]	; (122c <cpu_irq_enter_critical+0x34>)
    1210:	6813      	ldr	r3, [r2, #0]
    1212:	3301      	adds	r3, #1
    1214:	6013      	str	r3, [r2, #0]
}
    1216:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1218:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    121a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    121e:	2200      	movs	r2, #0
    1220:	4b04      	ldr	r3, [pc, #16]	; (1234 <cpu_irq_enter_critical+0x3c>)
    1222:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1224:	3201      	adds	r2, #1
    1226:	4b02      	ldr	r3, [pc, #8]	; (1230 <cpu_irq_enter_critical+0x38>)
    1228:	701a      	strb	r2, [r3, #0]
    122a:	e7f0      	b.n	120e <cpu_irq_enter_critical+0x16>
    122c:	20000028 	.word	0x20000028
    1230:	2000002c 	.word	0x2000002c
    1234:	20000008 	.word	0x20000008

00001238 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1238:	4b08      	ldr	r3, [pc, #32]	; (125c <cpu_irq_leave_critical+0x24>)
    123a:	681a      	ldr	r2, [r3, #0]
    123c:	3a01      	subs	r2, #1
    123e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	2b00      	cmp	r3, #0
    1244:	d109      	bne.n	125a <cpu_irq_leave_critical+0x22>
    1246:	4b06      	ldr	r3, [pc, #24]	; (1260 <cpu_irq_leave_critical+0x28>)
    1248:	781b      	ldrb	r3, [r3, #0]
    124a:	2b00      	cmp	r3, #0
    124c:	d005      	beq.n	125a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    124e:	2201      	movs	r2, #1
    1250:	4b04      	ldr	r3, [pc, #16]	; (1264 <cpu_irq_leave_critical+0x2c>)
    1252:	701a      	strb	r2, [r3, #0]
    1254:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1258:	b662      	cpsie	i
	}
}
    125a:	4770      	bx	lr
    125c:	20000028 	.word	0x20000028
    1260:	2000002c 	.word	0x2000002c
    1264:	20000008 	.word	0x20000008

00001268 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1268:	b5f0      	push	{r4, r5, r6, r7, lr}
    126a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    126c:	ac01      	add	r4, sp, #4
    126e:	2501      	movs	r5, #1
    1270:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1272:	2700      	movs	r7, #0
    1274:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1276:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1278:	0021      	movs	r1, r4
    127a:	200f      	movs	r0, #15
    127c:	4e06      	ldr	r6, [pc, #24]	; (1298 <system_board_init+0x30>)
    127e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1280:	2280      	movs	r2, #128	; 0x80
    1282:	0212      	lsls	r2, r2, #8
    1284:	2382      	movs	r3, #130	; 0x82
    1286:	05db      	lsls	r3, r3, #23
    1288:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    128a:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    128c:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    128e:	0021      	movs	r1, r4
    1290:	201c      	movs	r0, #28
    1292:	47b0      	blx	r6
}
    1294:	b003      	add	sp, #12
    1296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1298:	0000129d 	.word	0x0000129d

0000129c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    129c:	b500      	push	{lr}
    129e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12a0:	ab01      	add	r3, sp, #4
    12a2:	2280      	movs	r2, #128	; 0x80
    12a4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    12a6:	780a      	ldrb	r2, [r1, #0]
    12a8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    12aa:	784a      	ldrb	r2, [r1, #1]
    12ac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    12ae:	788a      	ldrb	r2, [r1, #2]
    12b0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    12b2:	0019      	movs	r1, r3
    12b4:	4b01      	ldr	r3, [pc, #4]	; (12bc <port_pin_set_config+0x20>)
    12b6:	4798      	blx	r3
}
    12b8:	b003      	add	sp, #12
    12ba:	bd00      	pop	{pc}
    12bc:	00001639 	.word	0x00001639

000012c0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    12c0:	b510      	push	{r4, lr}
	switch (clock_source) {
    12c2:	2807      	cmp	r0, #7
    12c4:	d803      	bhi.n	12ce <system_clock_source_get_hz+0xe>
    12c6:	0080      	lsls	r0, r0, #2
    12c8:	4b0f      	ldr	r3, [pc, #60]	; (1308 <system_clock_source_get_hz+0x48>)
    12ca:	581b      	ldr	r3, [r3, r0]
    12cc:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    12ce:	2000      	movs	r0, #0
    12d0:	e018      	b.n	1304 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    12d2:	4b0e      	ldr	r3, [pc, #56]	; (130c <system_clock_source_get_hz+0x4c>)
    12d4:	6858      	ldr	r0, [r3, #4]
    12d6:	e015      	b.n	1304 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    12d8:	4b0d      	ldr	r3, [pc, #52]	; (1310 <system_clock_source_get_hz+0x50>)
    12da:	7d59      	ldrb	r1, [r3, #21]
    12dc:	0709      	lsls	r1, r1, #28
    12de:	0f09      	lsrs	r1, r1, #28
    12e0:	3101      	adds	r1, #1
    12e2:	480c      	ldr	r0, [pc, #48]	; (1314 <system_clock_source_get_hz+0x54>)
    12e4:	4b0c      	ldr	r3, [pc, #48]	; (1318 <system_clock_source_get_hz+0x58>)
    12e6:	4798      	blx	r3
    12e8:	e00c      	b.n	1304 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    12ea:	4b08      	ldr	r3, [pc, #32]	; (130c <system_clock_source_get_hz+0x4c>)
    12ec:	6898      	ldr	r0, [r3, #8]
    12ee:	e009      	b.n	1304 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    12f0:	4b07      	ldr	r3, [pc, #28]	; (1310 <system_clock_source_get_hz+0x50>)
    12f2:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    12f4:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    12f6:	079b      	lsls	r3, r3, #30
    12f8:	d504      	bpl.n	1304 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    12fa:	4b04      	ldr	r3, [pc, #16]	; (130c <system_clock_source_get_hz+0x4c>)
    12fc:	6818      	ldr	r0, [r3, #0]
    12fe:	e001      	b.n	1304 <system_clock_source_get_hz+0x44>
		return 32768UL;
    1300:	2080      	movs	r0, #128	; 0x80
    1302:	0200      	lsls	r0, r0, #8
	}
}
    1304:	bd10      	pop	{r4, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	00001a08 	.word	0x00001a08
    130c:	20000030 	.word	0x20000030
    1310:	40001000 	.word	0x40001000
    1314:	02dc6c00 	.word	0x02dc6c00
    1318:	00001721 	.word	0x00001721

0000131c <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    131c:	b500      	push	{lr}
    131e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    1320:	2203      	movs	r2, #3
    1322:	4b10      	ldr	r3, [pc, #64]	; (1364 <system_clock_init+0x48>)
    1324:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1326:	4a10      	ldr	r2, [pc, #64]	; (1368 <system_clock_init+0x4c>)
    1328:	6853      	ldr	r3, [r2, #4]
    132a:	211e      	movs	r1, #30
    132c:	438b      	bics	r3, r1
    132e:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    1330:	4a0e      	ldr	r2, [pc, #56]	; (136c <system_clock_init+0x50>)
    1332:	7d13      	ldrb	r3, [r2, #20]
    1334:	3162      	adds	r1, #98	; 0x62
    1336:	430b      	orrs	r3, r1
    1338:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    133a:	4b0d      	ldr	r3, [pc, #52]	; (1370 <system_clock_init+0x54>)
    133c:	4798      	blx	r3
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    133e:	2301      	movs	r3, #1
    1340:	4a0c      	ldr	r2, [pc, #48]	; (1374 <system_clock_init+0x58>)
    1342:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    1344:	a901      	add	r1, sp, #4
    1346:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1348:	2300      	movs	r3, #0
    134a:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    134c:	2206      	movs	r2, #6
    134e:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    1350:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1352:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1354:	2000      	movs	r0, #0
    1356:	4b08      	ldr	r3, [pc, #32]	; (1378 <system_clock_init+0x5c>)
    1358:	4798      	blx	r3
    135a:	2000      	movs	r0, #0
    135c:	4b07      	ldr	r3, [pc, #28]	; (137c <system_clock_init+0x60>)
    135e:	4798      	blx	r3
#endif

}
    1360:	b005      	add	sp, #20
    1362:	bd00      	pop	{pc}
    1364:	40001800 	.word	0x40001800
    1368:	41004000 	.word	0x41004000
    136c:	40001000 	.word	0x40001000
    1370:	00001381 	.word	0x00001381
    1374:	40000800 	.word	0x40000800
    1378:	000013a5 	.word	0x000013a5
    137c:	00001451 	.word	0x00001451

00001380 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    1380:	4a06      	ldr	r2, [pc, #24]	; (139c <system_gclk_init+0x1c>)
    1382:	6953      	ldr	r3, [r2, #20]
    1384:	2180      	movs	r1, #128	; 0x80
    1386:	430b      	orrs	r3, r1
    1388:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    138a:	2201      	movs	r2, #1
    138c:	4b04      	ldr	r3, [pc, #16]	; (13a0 <system_gclk_init+0x20>)
    138e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1390:	0019      	movs	r1, r3
    1392:	780b      	ldrb	r3, [r1, #0]
    1394:	4213      	tst	r3, r2
    1396:	d1fc      	bne.n	1392 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1398:	4770      	bx	lr
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	40000800 	.word	0x40000800
    13a0:	40001c00 	.word	0x40001c00

000013a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    13a4:	b570      	push	{r4, r5, r6, lr}
    13a6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    13a8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    13aa:	784b      	ldrb	r3, [r1, #1]
    13ac:	2b00      	cmp	r3, #0
    13ae:	d002      	beq.n	13b6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    13b0:	2380      	movs	r3, #128	; 0x80
    13b2:	00db      	lsls	r3, r3, #3
    13b4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    13b6:	7a4b      	ldrb	r3, [r1, #9]
    13b8:	2b00      	cmp	r3, #0
    13ba:	d002      	beq.n	13c2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    13bc:	2380      	movs	r3, #128	; 0x80
    13be:	011b      	lsls	r3, r3, #4
    13c0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    13c2:	6848      	ldr	r0, [r1, #4]
    13c4:	2801      	cmp	r0, #1
    13c6:	d90f      	bls.n	13e8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    13c8:	1e43      	subs	r3, r0, #1
    13ca:	4218      	tst	r0, r3
    13cc:	d131      	bne.n	1432 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    13ce:	2802      	cmp	r0, #2
    13d0:	d92d      	bls.n	142e <system_gclk_gen_set_config+0x8a>
    13d2:	2302      	movs	r3, #2
    13d4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    13d6:	3201      	adds	r2, #1
						mask <<= 1) {
    13d8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    13da:	4298      	cmp	r0, r3
    13dc:	d8fb      	bhi.n	13d6 <system_gclk_gen_set_config+0x32>
    13de:	2380      	movs	r3, #128	; 0x80
    13e0:	015b      	lsls	r3, r3, #5
    13e2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    13e4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    13e6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    13e8:	7a0b      	ldrb	r3, [r1, #8]
    13ea:	2b00      	cmp	r3, #0
    13ec:	d002      	beq.n	13f4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    13ee:	2380      	movs	r3, #128	; 0x80
    13f0:	019b      	lsls	r3, r3, #6
    13f2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    13f4:	2604      	movs	r6, #4
    13f6:	40a6      	lsls	r6, r4
    13f8:	4911      	ldr	r1, [pc, #68]	; (1440 <system_gclk_gen_set_config+0x9c>)
    13fa:	4a12      	ldr	r2, [pc, #72]	; (1444 <system_gclk_gen_set_config+0xa0>)
    13fc:	684b      	ldr	r3, [r1, #4]
    13fe:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    1400:	421e      	tst	r6, r3
    1402:	d1fb      	bne.n	13fc <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    1404:	4b10      	ldr	r3, [pc, #64]	; (1448 <system_gclk_gen_set_config+0xa4>)
    1406:	4798      	blx	r3
    1408:	00a4      	lsls	r4, r4, #2
    140a:	4b0d      	ldr	r3, [pc, #52]	; (1440 <system_gclk_gen_set_config+0x9c>)
    140c:	469c      	mov	ip, r3
    140e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1410:	6a22      	ldr	r2, [r4, #32]
    1412:	2380      	movs	r3, #128	; 0x80
    1414:	005b      	lsls	r3, r3, #1
    1416:	401a      	ands	r2, r3
    1418:	432a      	orrs	r2, r5
    141a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    141c:	4661      	mov	r1, ip
    141e:	4a09      	ldr	r2, [pc, #36]	; (1444 <system_gclk_gen_set_config+0xa0>)
    1420:	684b      	ldr	r3, [r1, #4]
    1422:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    1424:	421e      	tst	r6, r3
    1426:	d1fb      	bne.n	1420 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    1428:	4b08      	ldr	r3, [pc, #32]	; (144c <system_gclk_gen_set_config+0xa8>)
    142a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    142c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    142e:	2200      	movs	r2, #0
    1430:	e7d5      	b.n	13de <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    1432:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1434:	2380      	movs	r3, #128	; 0x80
    1436:	009b      	lsls	r3, r3, #2
    1438:	4318      	orrs	r0, r3
    143a:	4305      	orrs	r5, r0
    143c:	e7d4      	b.n	13e8 <system_gclk_gen_set_config+0x44>
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	40001c00 	.word	0x40001c00
    1444:	000007fc 	.word	0x000007fc
    1448:	000011f9 	.word	0x000011f9
    144c:	00001239 	.word	0x00001239

00001450 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1450:	b510      	push	{r4, lr}
    1452:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1454:	2204      	movs	r2, #4
    1456:	4082      	lsls	r2, r0
    1458:	4809      	ldr	r0, [pc, #36]	; (1480 <system_gclk_gen_enable+0x30>)
    145a:	490a      	ldr	r1, [pc, #40]	; (1484 <system_gclk_gen_enable+0x34>)
    145c:	6843      	ldr	r3, [r0, #4]
    145e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1460:	421a      	tst	r2, r3
    1462:	d1fb      	bne.n	145c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    1464:	4b08      	ldr	r3, [pc, #32]	; (1488 <system_gclk_gen_enable+0x38>)
    1466:	4798      	blx	r3
    1468:	00a4      	lsls	r4, r4, #2
    146a:	4b05      	ldr	r3, [pc, #20]	; (1480 <system_gclk_gen_enable+0x30>)
    146c:	469c      	mov	ip, r3
    146e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1470:	6a22      	ldr	r2, [r4, #32]
    1472:	2380      	movs	r3, #128	; 0x80
    1474:	005b      	lsls	r3, r3, #1
    1476:	4313      	orrs	r3, r2
    1478:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    147a:	4b04      	ldr	r3, [pc, #16]	; (148c <system_gclk_gen_enable+0x3c>)
    147c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    147e:	bd10      	pop	{r4, pc}
    1480:	40001c00 	.word	0x40001c00
    1484:	000007fc 	.word	0x000007fc
    1488:	000011f9 	.word	0x000011f9
    148c:	00001239 	.word	0x00001239

00001490 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1492:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1494:	2204      	movs	r2, #4
    1496:	4082      	lsls	r2, r0
    1498:	4812      	ldr	r0, [pc, #72]	; (14e4 <system_gclk_gen_get_hz+0x54>)
    149a:	4913      	ldr	r1, [pc, #76]	; (14e8 <system_gclk_gen_get_hz+0x58>)
    149c:	6843      	ldr	r3, [r0, #4]
    149e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    14a0:	421a      	tst	r2, r3
    14a2:	d1fb      	bne.n	149c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    14a4:	4b11      	ldr	r3, [pc, #68]	; (14ec <system_gclk_gen_get_hz+0x5c>)
    14a6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    14a8:	4f0e      	ldr	r7, [pc, #56]	; (14e4 <system_gclk_gen_get_hz+0x54>)
    14aa:	3408      	adds	r4, #8
    14ac:	00a4      	lsls	r4, r4, #2
    14ae:	59e0      	ldr	r0, [r4, r7]
    14b0:	0740      	lsls	r0, r0, #29
    14b2:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    14b4:	4b0e      	ldr	r3, [pc, #56]	; (14f0 <system_gclk_gen_get_hz+0x60>)
    14b6:	4798      	blx	r3
    14b8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    14ba:	59e5      	ldr	r5, [r4, r7]
    14bc:	04ed      	lsls	r5, r5, #19
    14be:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    14c0:	59e4      	ldr	r4, [r4, r7]
    14c2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    14c4:	4b0b      	ldr	r3, [pc, #44]	; (14f4 <system_gclk_gen_get_hz+0x64>)
    14c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    14c8:	2d00      	cmp	r5, #0
    14ca:	d107      	bne.n	14dc <system_gclk_gen_get_hz+0x4c>
    14cc:	2c01      	cmp	r4, #1
    14ce:	d907      	bls.n	14e0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    14d0:	0021      	movs	r1, r4
    14d2:	0030      	movs	r0, r6
    14d4:	4b08      	ldr	r3, [pc, #32]	; (14f8 <system_gclk_gen_get_hz+0x68>)
    14d6:	4798      	blx	r3
    14d8:	0006      	movs	r6, r0
    14da:	e001      	b.n	14e0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    14dc:	3401      	adds	r4, #1
    14de:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    14e0:	0030      	movs	r0, r6
    14e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14e4:	40001c00 	.word	0x40001c00
    14e8:	000007fc 	.word	0x000007fc
    14ec:	000011f9 	.word	0x000011f9
    14f0:	000012c1 	.word	0x000012c1
    14f4:	00001239 	.word	0x00001239
    14f8:	00001721 	.word	0x00001721

000014fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    14fc:	b510      	push	{r4, lr}
    14fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1500:	4b09      	ldr	r3, [pc, #36]	; (1528 <system_gclk_chan_enable+0x2c>)
    1502:	4798      	blx	r3
    1504:	00a0      	lsls	r0, r4, #2
    1506:	4b09      	ldr	r3, [pc, #36]	; (152c <system_gclk_chan_enable+0x30>)
    1508:	469c      	mov	ip, r3
    150a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    150c:	2280      	movs	r2, #128	; 0x80
    150e:	5883      	ldr	r3, [r0, r2]
    1510:	2140      	movs	r1, #64	; 0x40
    1512:	430b      	orrs	r3, r1
    1514:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1516:	3140      	adds	r1, #64	; 0x40
    1518:	3a40      	subs	r2, #64	; 0x40
    151a:	5843      	ldr	r3, [r0, r1]
    151c:	421a      	tst	r2, r3
    151e:	d0fc      	beq.n	151a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    1520:	4b03      	ldr	r3, [pc, #12]	; (1530 <system_gclk_chan_enable+0x34>)
    1522:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1524:	bd10      	pop	{r4, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	000011f9 	.word	0x000011f9
    152c:	40001c00 	.word	0x40001c00
    1530:	00001239 	.word	0x00001239

00001534 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1534:	b510      	push	{r4, lr}
    1536:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1538:	4b09      	ldr	r3, [pc, #36]	; (1560 <system_gclk_chan_disable+0x2c>)
    153a:	4798      	blx	r3
    153c:	00a0      	lsls	r0, r4, #2
    153e:	4b09      	ldr	r3, [pc, #36]	; (1564 <system_gclk_chan_disable+0x30>)
    1540:	469c      	mov	ip, r3
    1542:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1544:	2280      	movs	r2, #128	; 0x80
    1546:	5883      	ldr	r3, [r0, r2]
    1548:	2140      	movs	r1, #64	; 0x40
    154a:	438b      	bics	r3, r1
    154c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    154e:	3140      	adds	r1, #64	; 0x40
    1550:	3a40      	subs	r2, #64	; 0x40
    1552:	5843      	ldr	r3, [r0, r1]
    1554:	421a      	tst	r2, r3
    1556:	d1fc      	bne.n	1552 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    1558:	4b03      	ldr	r3, [pc, #12]	; (1568 <system_gclk_chan_disable+0x34>)
    155a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    155c:	bd10      	pop	{r4, pc}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	000011f9 	.word	0x000011f9
    1564:	40001c00 	.word	0x40001c00
    1568:	00001239 	.word	0x00001239

0000156c <system_gclk_chan_set_config>:
{
    156c:	b570      	push	{r4, r5, r6, lr}
    156e:	0004      	movs	r4, r0
    1570:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    1572:	4b05      	ldr	r3, [pc, #20]	; (1588 <system_gclk_chan_set_config+0x1c>)
    1574:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1576:	782a      	ldrb	r2, [r5, #0]
    1578:	230f      	movs	r3, #15
    157a:	4013      	ands	r3, r2
    157c:	3420      	adds	r4, #32
    157e:	00a4      	lsls	r4, r4, #2
    1580:	4a02      	ldr	r2, [pc, #8]	; (158c <system_gclk_chan_set_config+0x20>)
    1582:	50a3      	str	r3, [r4, r2]
}
    1584:	bd70      	pop	{r4, r5, r6, pc}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	00001535 	.word	0x00001535
    158c:	40001c00 	.word	0x40001c00

00001590 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1590:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1592:	78d3      	ldrb	r3, [r2, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d135      	bne.n	1604 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1598:	7813      	ldrb	r3, [r2, #0]
    159a:	2b80      	cmp	r3, #128	; 0x80
    159c:	d029      	beq.n	15f2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    159e:	061b      	lsls	r3, r3, #24
    15a0:	2480      	movs	r4, #128	; 0x80
    15a2:	0264      	lsls	r4, r4, #9
    15a4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    15a6:	7854      	ldrb	r4, [r2, #1]
    15a8:	2502      	movs	r5, #2
    15aa:	43ac      	bics	r4, r5
    15ac:	d106      	bne.n	15bc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    15ae:	7894      	ldrb	r4, [r2, #2]
    15b0:	2c00      	cmp	r4, #0
    15b2:	d120      	bne.n	15f6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    15b4:	2480      	movs	r4, #128	; 0x80
    15b6:	02a4      	lsls	r4, r4, #10
    15b8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    15ba:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15bc:	7854      	ldrb	r4, [r2, #1]
    15be:	3c01      	subs	r4, #1
    15c0:	2c01      	cmp	r4, #1
    15c2:	d91c      	bls.n	15fe <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    15c4:	040d      	lsls	r5, r1, #16
    15c6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15c8:	24a0      	movs	r4, #160	; 0xa0
    15ca:	05e4      	lsls	r4, r4, #23
    15cc:	432c      	orrs	r4, r5
    15ce:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15d0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    15d2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15d4:	24d0      	movs	r4, #208	; 0xd0
    15d6:	0624      	lsls	r4, r4, #24
    15d8:	432c      	orrs	r4, r5
    15da:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15dc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    15de:	78d4      	ldrb	r4, [r2, #3]
    15e0:	2c00      	cmp	r4, #0
    15e2:	d122      	bne.n	162a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    15e4:	035b      	lsls	r3, r3, #13
    15e6:	d51c      	bpl.n	1622 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    15e8:	7893      	ldrb	r3, [r2, #2]
    15ea:	2b01      	cmp	r3, #1
    15ec:	d01e      	beq.n	162c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    15ee:	6141      	str	r1, [r0, #20]
    15f0:	e017      	b.n	1622 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    15f2:	2300      	movs	r3, #0
    15f4:	e7d7      	b.n	15a6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    15f6:	24c0      	movs	r4, #192	; 0xc0
    15f8:	02e4      	lsls	r4, r4, #11
    15fa:	4323      	orrs	r3, r4
    15fc:	e7dd      	b.n	15ba <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    15fe:	4c0d      	ldr	r4, [pc, #52]	; (1634 <_system_pinmux_config+0xa4>)
    1600:	4023      	ands	r3, r4
    1602:	e7df      	b.n	15c4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1604:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1606:	040c      	lsls	r4, r1, #16
    1608:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    160a:	23a0      	movs	r3, #160	; 0xa0
    160c:	05db      	lsls	r3, r3, #23
    160e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1610:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1612:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1614:	23d0      	movs	r3, #208	; 0xd0
    1616:	061b      	lsls	r3, r3, #24
    1618:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    161a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    161c:	78d3      	ldrb	r3, [r2, #3]
    161e:	2b00      	cmp	r3, #0
    1620:	d103      	bne.n	162a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1622:	7853      	ldrb	r3, [r2, #1]
    1624:	3b01      	subs	r3, #1
    1626:	2b01      	cmp	r3, #1
    1628:	d902      	bls.n	1630 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    162a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    162c:	6181      	str	r1, [r0, #24]
    162e:	e7f8      	b.n	1622 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1630:	6081      	str	r1, [r0, #8]
}
    1632:	e7fa      	b.n	162a <_system_pinmux_config+0x9a>
    1634:	fffbffff 	.word	0xfffbffff

00001638 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1638:	b510      	push	{r4, lr}
    163a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    163c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    163e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1640:	2900      	cmp	r1, #0
    1642:	d105      	bne.n	1650 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1644:	0943      	lsrs	r3, r0, #5
    1646:	01db      	lsls	r3, r3, #7
    1648:	2182      	movs	r1, #130	; 0x82
    164a:	05c9      	lsls	r1, r1, #23
    164c:	468c      	mov	ip, r1
    164e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1650:	241f      	movs	r4, #31
    1652:	4020      	ands	r0, r4
    1654:	2101      	movs	r1, #1
    1656:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1658:	0018      	movs	r0, r3
    165a:	4b01      	ldr	r3, [pc, #4]	; (1660 <system_pinmux_pin_set_config+0x28>)
    165c:	4798      	blx	r3
}
    165e:	bd10      	pop	{r4, pc}
    1660:	00001591 	.word	0x00001591

00001664 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1664:	4770      	bx	lr
	...

00001668 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1668:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    166a:	4b05      	ldr	r3, [pc, #20]	; (1680 <system_init+0x18>)
    166c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    166e:	4b05      	ldr	r3, [pc, #20]	; (1684 <system_init+0x1c>)
    1670:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1672:	4b05      	ldr	r3, [pc, #20]	; (1688 <system_init+0x20>)
    1674:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1676:	4b05      	ldr	r3, [pc, #20]	; (168c <system_init+0x24>)
    1678:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    167a:	4b05      	ldr	r3, [pc, #20]	; (1690 <system_init+0x28>)
    167c:	4798      	blx	r3
}
    167e:	bd10      	pop	{r4, pc}
    1680:	0000131d 	.word	0x0000131d
    1684:	00001269 	.word	0x00001269
    1688:	00001665 	.word	0x00001665
    168c:	000007a1 	.word	0x000007a1
    1690:	00001665 	.word	0x00001665

00001694 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1694:	e7fe      	b.n	1694 <Dummy_Handler>
	...

00001698 <Reset_Handler>:
{
    1698:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    169a:	4a17      	ldr	r2, [pc, #92]	; (16f8 <Reset_Handler+0x60>)
    169c:	4b17      	ldr	r3, [pc, #92]	; (16fc <Reset_Handler+0x64>)
    169e:	429a      	cmp	r2, r3
    16a0:	d011      	beq.n	16c6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    16a2:	001a      	movs	r2, r3
    16a4:	4b16      	ldr	r3, [pc, #88]	; (1700 <Reset_Handler+0x68>)
    16a6:	429a      	cmp	r2, r3
    16a8:	d20d      	bcs.n	16c6 <Reset_Handler+0x2e>
    16aa:	4a16      	ldr	r2, [pc, #88]	; (1704 <Reset_Handler+0x6c>)
    16ac:	3303      	adds	r3, #3
    16ae:	1a9b      	subs	r3, r3, r2
    16b0:	089b      	lsrs	r3, r3, #2
    16b2:	3301      	adds	r3, #1
    16b4:	009b      	lsls	r3, r3, #2
    16b6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    16b8:	4810      	ldr	r0, [pc, #64]	; (16fc <Reset_Handler+0x64>)
    16ba:	490f      	ldr	r1, [pc, #60]	; (16f8 <Reset_Handler+0x60>)
    16bc:	588c      	ldr	r4, [r1, r2]
    16be:	5084      	str	r4, [r0, r2]
    16c0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    16c2:	429a      	cmp	r2, r3
    16c4:	d1fa      	bne.n	16bc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    16c6:	4a10      	ldr	r2, [pc, #64]	; (1708 <Reset_Handler+0x70>)
    16c8:	4b10      	ldr	r3, [pc, #64]	; (170c <Reset_Handler+0x74>)
    16ca:	429a      	cmp	r2, r3
    16cc:	d20a      	bcs.n	16e4 <Reset_Handler+0x4c>
    16ce:	43d3      	mvns	r3, r2
    16d0:	490e      	ldr	r1, [pc, #56]	; (170c <Reset_Handler+0x74>)
    16d2:	185b      	adds	r3, r3, r1
    16d4:	2103      	movs	r1, #3
    16d6:	438b      	bics	r3, r1
    16d8:	3304      	adds	r3, #4
    16da:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    16dc:	2100      	movs	r1, #0
    16de:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    16e0:	4293      	cmp	r3, r2
    16e2:	d1fc      	bne.n	16de <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16e4:	4a0a      	ldr	r2, [pc, #40]	; (1710 <Reset_Handler+0x78>)
    16e6:	21ff      	movs	r1, #255	; 0xff
    16e8:	4b0a      	ldr	r3, [pc, #40]	; (1714 <Reset_Handler+0x7c>)
    16ea:	438b      	bics	r3, r1
    16ec:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    16ee:	4b0a      	ldr	r3, [pc, #40]	; (1718 <Reset_Handler+0x80>)
    16f0:	4798      	blx	r3
        main();
    16f2:	4b0a      	ldr	r3, [pc, #40]	; (171c <Reset_Handler+0x84>)
    16f4:	4798      	blx	r3
    16f6:	e7fe      	b.n	16f6 <Reset_Handler+0x5e>
    16f8:	00001a48 	.word	0x00001a48
    16fc:	20000000 	.word	0x20000000
    1700:	2000000c 	.word	0x2000000c
    1704:	20000004 	.word	0x20000004
    1708:	2000000c 	.word	0x2000000c
    170c:	2000006c 	.word	0x2000006c
    1710:	e000ed00 	.word	0xe000ed00
    1714:	00000000 	.word	0x00000000
    1718:	00001839 	.word	0x00001839
    171c:	00000e55 	.word	0x00000e55

00001720 <__udivsi3>:
    1720:	2200      	movs	r2, #0
    1722:	0843      	lsrs	r3, r0, #1
    1724:	428b      	cmp	r3, r1
    1726:	d374      	bcc.n	1812 <__udivsi3+0xf2>
    1728:	0903      	lsrs	r3, r0, #4
    172a:	428b      	cmp	r3, r1
    172c:	d35f      	bcc.n	17ee <__udivsi3+0xce>
    172e:	0a03      	lsrs	r3, r0, #8
    1730:	428b      	cmp	r3, r1
    1732:	d344      	bcc.n	17be <__udivsi3+0x9e>
    1734:	0b03      	lsrs	r3, r0, #12
    1736:	428b      	cmp	r3, r1
    1738:	d328      	bcc.n	178c <__udivsi3+0x6c>
    173a:	0c03      	lsrs	r3, r0, #16
    173c:	428b      	cmp	r3, r1
    173e:	d30d      	bcc.n	175c <__udivsi3+0x3c>
    1740:	22ff      	movs	r2, #255	; 0xff
    1742:	0209      	lsls	r1, r1, #8
    1744:	ba12      	rev	r2, r2
    1746:	0c03      	lsrs	r3, r0, #16
    1748:	428b      	cmp	r3, r1
    174a:	d302      	bcc.n	1752 <__udivsi3+0x32>
    174c:	1212      	asrs	r2, r2, #8
    174e:	0209      	lsls	r1, r1, #8
    1750:	d065      	beq.n	181e <__udivsi3+0xfe>
    1752:	0b03      	lsrs	r3, r0, #12
    1754:	428b      	cmp	r3, r1
    1756:	d319      	bcc.n	178c <__udivsi3+0x6c>
    1758:	e000      	b.n	175c <__udivsi3+0x3c>
    175a:	0a09      	lsrs	r1, r1, #8
    175c:	0bc3      	lsrs	r3, r0, #15
    175e:	428b      	cmp	r3, r1
    1760:	d301      	bcc.n	1766 <__udivsi3+0x46>
    1762:	03cb      	lsls	r3, r1, #15
    1764:	1ac0      	subs	r0, r0, r3
    1766:	4152      	adcs	r2, r2
    1768:	0b83      	lsrs	r3, r0, #14
    176a:	428b      	cmp	r3, r1
    176c:	d301      	bcc.n	1772 <__udivsi3+0x52>
    176e:	038b      	lsls	r3, r1, #14
    1770:	1ac0      	subs	r0, r0, r3
    1772:	4152      	adcs	r2, r2
    1774:	0b43      	lsrs	r3, r0, #13
    1776:	428b      	cmp	r3, r1
    1778:	d301      	bcc.n	177e <__udivsi3+0x5e>
    177a:	034b      	lsls	r3, r1, #13
    177c:	1ac0      	subs	r0, r0, r3
    177e:	4152      	adcs	r2, r2
    1780:	0b03      	lsrs	r3, r0, #12
    1782:	428b      	cmp	r3, r1
    1784:	d301      	bcc.n	178a <__udivsi3+0x6a>
    1786:	030b      	lsls	r3, r1, #12
    1788:	1ac0      	subs	r0, r0, r3
    178a:	4152      	adcs	r2, r2
    178c:	0ac3      	lsrs	r3, r0, #11
    178e:	428b      	cmp	r3, r1
    1790:	d301      	bcc.n	1796 <__udivsi3+0x76>
    1792:	02cb      	lsls	r3, r1, #11
    1794:	1ac0      	subs	r0, r0, r3
    1796:	4152      	adcs	r2, r2
    1798:	0a83      	lsrs	r3, r0, #10
    179a:	428b      	cmp	r3, r1
    179c:	d301      	bcc.n	17a2 <__udivsi3+0x82>
    179e:	028b      	lsls	r3, r1, #10
    17a0:	1ac0      	subs	r0, r0, r3
    17a2:	4152      	adcs	r2, r2
    17a4:	0a43      	lsrs	r3, r0, #9
    17a6:	428b      	cmp	r3, r1
    17a8:	d301      	bcc.n	17ae <__udivsi3+0x8e>
    17aa:	024b      	lsls	r3, r1, #9
    17ac:	1ac0      	subs	r0, r0, r3
    17ae:	4152      	adcs	r2, r2
    17b0:	0a03      	lsrs	r3, r0, #8
    17b2:	428b      	cmp	r3, r1
    17b4:	d301      	bcc.n	17ba <__udivsi3+0x9a>
    17b6:	020b      	lsls	r3, r1, #8
    17b8:	1ac0      	subs	r0, r0, r3
    17ba:	4152      	adcs	r2, r2
    17bc:	d2cd      	bcs.n	175a <__udivsi3+0x3a>
    17be:	09c3      	lsrs	r3, r0, #7
    17c0:	428b      	cmp	r3, r1
    17c2:	d301      	bcc.n	17c8 <__udivsi3+0xa8>
    17c4:	01cb      	lsls	r3, r1, #7
    17c6:	1ac0      	subs	r0, r0, r3
    17c8:	4152      	adcs	r2, r2
    17ca:	0983      	lsrs	r3, r0, #6
    17cc:	428b      	cmp	r3, r1
    17ce:	d301      	bcc.n	17d4 <__udivsi3+0xb4>
    17d0:	018b      	lsls	r3, r1, #6
    17d2:	1ac0      	subs	r0, r0, r3
    17d4:	4152      	adcs	r2, r2
    17d6:	0943      	lsrs	r3, r0, #5
    17d8:	428b      	cmp	r3, r1
    17da:	d301      	bcc.n	17e0 <__udivsi3+0xc0>
    17dc:	014b      	lsls	r3, r1, #5
    17de:	1ac0      	subs	r0, r0, r3
    17e0:	4152      	adcs	r2, r2
    17e2:	0903      	lsrs	r3, r0, #4
    17e4:	428b      	cmp	r3, r1
    17e6:	d301      	bcc.n	17ec <__udivsi3+0xcc>
    17e8:	010b      	lsls	r3, r1, #4
    17ea:	1ac0      	subs	r0, r0, r3
    17ec:	4152      	adcs	r2, r2
    17ee:	08c3      	lsrs	r3, r0, #3
    17f0:	428b      	cmp	r3, r1
    17f2:	d301      	bcc.n	17f8 <__udivsi3+0xd8>
    17f4:	00cb      	lsls	r3, r1, #3
    17f6:	1ac0      	subs	r0, r0, r3
    17f8:	4152      	adcs	r2, r2
    17fa:	0883      	lsrs	r3, r0, #2
    17fc:	428b      	cmp	r3, r1
    17fe:	d301      	bcc.n	1804 <__udivsi3+0xe4>
    1800:	008b      	lsls	r3, r1, #2
    1802:	1ac0      	subs	r0, r0, r3
    1804:	4152      	adcs	r2, r2
    1806:	0843      	lsrs	r3, r0, #1
    1808:	428b      	cmp	r3, r1
    180a:	d301      	bcc.n	1810 <__udivsi3+0xf0>
    180c:	004b      	lsls	r3, r1, #1
    180e:	1ac0      	subs	r0, r0, r3
    1810:	4152      	adcs	r2, r2
    1812:	1a41      	subs	r1, r0, r1
    1814:	d200      	bcs.n	1818 <__udivsi3+0xf8>
    1816:	4601      	mov	r1, r0
    1818:	4152      	adcs	r2, r2
    181a:	4610      	mov	r0, r2
    181c:	4770      	bx	lr
    181e:	e7ff      	b.n	1820 <__udivsi3+0x100>
    1820:	b501      	push	{r0, lr}
    1822:	2000      	movs	r0, #0
    1824:	f000 f806 	bl	1834 <__aeabi_idiv0>
    1828:	bd02      	pop	{r1, pc}
    182a:	46c0      	nop			; (mov r8, r8)

0000182c <__aeabi_uidivmod>:
    182c:	2900      	cmp	r1, #0
    182e:	d0f7      	beq.n	1820 <__udivsi3+0x100>
    1830:	e776      	b.n	1720 <__udivsi3>
    1832:	4770      	bx	lr

00001834 <__aeabi_idiv0>:
    1834:	4770      	bx	lr
    1836:	46c0      	nop			; (mov r8, r8)

00001838 <__libc_init_array>:
    1838:	b570      	push	{r4, r5, r6, lr}
    183a:	2600      	movs	r6, #0
    183c:	4d0c      	ldr	r5, [pc, #48]	; (1870 <__libc_init_array+0x38>)
    183e:	4c0d      	ldr	r4, [pc, #52]	; (1874 <__libc_init_array+0x3c>)
    1840:	1b64      	subs	r4, r4, r5
    1842:	10a4      	asrs	r4, r4, #2
    1844:	42a6      	cmp	r6, r4
    1846:	d109      	bne.n	185c <__libc_init_array+0x24>
    1848:	2600      	movs	r6, #0
    184a:	f000 f8ed 	bl	1a28 <_init>
    184e:	4d0a      	ldr	r5, [pc, #40]	; (1878 <__libc_init_array+0x40>)
    1850:	4c0a      	ldr	r4, [pc, #40]	; (187c <__libc_init_array+0x44>)
    1852:	1b64      	subs	r4, r4, r5
    1854:	10a4      	asrs	r4, r4, #2
    1856:	42a6      	cmp	r6, r4
    1858:	d105      	bne.n	1866 <__libc_init_array+0x2e>
    185a:	bd70      	pop	{r4, r5, r6, pc}
    185c:	00b3      	lsls	r3, r6, #2
    185e:	58eb      	ldr	r3, [r5, r3]
    1860:	4798      	blx	r3
    1862:	3601      	adds	r6, #1
    1864:	e7ee      	b.n	1844 <__libc_init_array+0xc>
    1866:	00b3      	lsls	r3, r6, #2
    1868:	58eb      	ldr	r3, [r5, r3]
    186a:	4798      	blx	r3
    186c:	3601      	adds	r6, #1
    186e:	e7f2      	b.n	1856 <__libc_init_array+0x1e>
    1870:	00001a34 	.word	0x00001a34
    1874:	00001a34 	.word	0x00001a34
    1878:	00001a34 	.word	0x00001a34
    187c:	00001a38 	.word	0x00001a38
    1880:	000003f4 	.word	0x000003f4
    1884:	0000065c 	.word	0x0000065c
    1888:	0000065c 	.word	0x0000065c
    188c:	0000065c 	.word	0x0000065c
    1890:	0000065c 	.word	0x0000065c
    1894:	0000065c 	.word	0x0000065c
    1898:	0000065c 	.word	0x0000065c
    189c:	0000065c 	.word	0x0000065c
    18a0:	0000065c 	.word	0x0000065c
    18a4:	0000065c 	.word	0x0000065c
    18a8:	0000065c 	.word	0x0000065c
    18ac:	0000065c 	.word	0x0000065c
    18b0:	0000065c 	.word	0x0000065c
    18b4:	0000065c 	.word	0x0000065c
    18b8:	0000065c 	.word	0x0000065c
    18bc:	0000065c 	.word	0x0000065c
    18c0:	000003dc 	.word	0x000003dc
    18c4:	0000065c 	.word	0x0000065c
    18c8:	0000065c 	.word	0x0000065c
    18cc:	0000065c 	.word	0x0000065c
    18d0:	0000065c 	.word	0x0000065c
    18d4:	0000065c 	.word	0x0000065c
    18d8:	0000065c 	.word	0x0000065c
    18dc:	0000065c 	.word	0x0000065c
    18e0:	0000065c 	.word	0x0000065c
    18e4:	0000065c 	.word	0x0000065c
    18e8:	0000065c 	.word	0x0000065c
    18ec:	0000065c 	.word	0x0000065c
    18f0:	0000065c 	.word	0x0000065c
    18f4:	0000065c 	.word	0x0000065c
    18f8:	0000065c 	.word	0x0000065c
    18fc:	0000065c 	.word	0x0000065c
    1900:	000003ec 	.word	0x000003ec
    1904:	0000065c 	.word	0x0000065c
    1908:	0000065c 	.word	0x0000065c
    190c:	0000065c 	.word	0x0000065c
    1910:	0000065c 	.word	0x0000065c
    1914:	0000065c 	.word	0x0000065c
    1918:	0000065c 	.word	0x0000065c
    191c:	0000065c 	.word	0x0000065c
    1920:	0000065c 	.word	0x0000065c
    1924:	0000065c 	.word	0x0000065c
    1928:	0000065c 	.word	0x0000065c
    192c:	0000065c 	.word	0x0000065c
    1930:	0000065c 	.word	0x0000065c
    1934:	0000065c 	.word	0x0000065c
    1938:	0000065c 	.word	0x0000065c
    193c:	0000065c 	.word	0x0000065c
    1940:	000003e4 	.word	0x000003e4
    1944:	0000042c 	.word	0x0000042c
    1948:	000003c4 	.word	0x000003c4
    194c:	000003d4 	.word	0x000003d4
    1950:	000003cc 	.word	0x000003cc
    1954:	00000002 	.word	0x00000002
    1958:	00000003 	.word	0x00000003
    195c:	00000028 	.word	0x00000028
    1960:	00000029 	.word	0x00000029
    1964:	00000004 	.word	0x00000004
    1968:	00000005 	.word	0x00000005
    196c:	00000006 	.word	0x00000006
    1970:	00000007 	.word	0x00000007
    1974:	00000008 	.word	0x00000008
    1978:	00000009 	.word	0x00000009
    197c:	0000000a 	.word	0x0000000a
    1980:	0000000b 	.word	0x0000000b
    1984:	00000020 	.word	0x00000020
    1988:	00000021 	.word	0x00000021
    198c:	00000022 	.word	0x00000022
    1990:	00000023 	.word	0x00000023
    1994:	00000028 	.word	0x00000028
    1998:	00000029 	.word	0x00000029
    199c:	00000024 	.word	0x00000024
    19a0:	00000025 	.word	0x00000025
    19a4:	00000026 	.word	0x00000026
    19a8:	00000027 	.word	0x00000027
    19ac:	00000008 	.word	0x00000008
    19b0:	00000009 	.word	0x00000009

000019b4 <_adc_apbcmasks>:
    19b4:	00020000 00040000                       ........

000019bc <_adc_biascomp_addr>:
    19bc:	00806020 00806020                        `.. `..

000019c4 <_adc_biascomp_pos>:
    19c4:	00000903                                ....

000019c8 <_adc_biasrefbuf_addr>:
    19c8:	00806020 00806020                        `.. `..

000019d0 <_adc_biasrefbuf_pos>:
    19d0:	00000600                                ....

000019d4 <_adc_extchannel_msb>:
    19d4:	0000000b 0000000b                       ........

000019dc <_adc_gclk_ids>:
    19dc:	00002221                                !"..

000019e0 <_tcc_apbcmasks>:
    19e0:	00000200 00000400 00000800              ............

000019ec <_tcc_cc_nums>:
    19ec:	00020204                                ....

000019f0 <_tcc_gclk_ids>:
    19f0:	001d1c1c                                ....

000019f4 <_tcc_maxs>:
    19f4:	00ffffff 00ffffff 0000ffff              ............

00001a00 <_tcc_ow_nums>:
    1a00:	00020408                                ....

00001a04 <adc_interrupt_vectors.13810>:
    1a04:	00001a19 000012d2 000012ce 000012ce     ................
    1a14:	00001300 00001300 000012ea 000012d8     ................
    1a24:	000012f0                                ....

00001a28 <_init>:
    1a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1a2e:	bc08      	pop	{r3}
    1a30:	469e      	mov	lr, r3
    1a32:	4770      	bx	lr

00001a34 <__init_array_start>:
    1a34:	000000e5 	.word	0x000000e5

00001a38 <_fini>:
    1a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a3a:	46c0      	nop			; (mov r8, r8)
    1a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1a3e:	bc08      	pop	{r3}
    1a40:	469e      	mov	lr, r3
    1a42:	4770      	bx	lr

00001a44 <__fini_array_start>:
    1a44:	000000bd 	.word	0x000000bd
